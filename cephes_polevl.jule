// Copyright 2025 mertcandav.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// Derived from SciPy's special/cephes/polevl.h
// https://github.com/scipy/scipy/blob/master/scipy/special/cephes/polevl.h
// Made freely available by Stephen L. Moshier without support or guarantee.

// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.
// Copyright ©1984, ©1987, ©1988 by Stephen L. Moshier
// Portions Copyright ©2016 The Gonum Authors. All rights reserved.

use "std/math"

// Evaluates a polynomial of degree N
//
//	y = c_0 + c_1 x_1 + c_2 x_2^2 ...
//
// where the coefficients are stored in reverse order, i.e. coef[0] = c_n and
// coef[n] = c_0.
#disable boundary
fn polevl(x: f64, coef: []f64, n: int): f64 {
	mut ans := coef[0]
	mut i := 1
	for i <= n; i++ {
		ans = ans*x + coef[i]
	}
	ret ans
}

// Same as polevl, except c_n is assumed to be 1 and is not included in the slice.
#disable boundary
fn p1evl(x: f64, coef: []f64, n: int): f64 {
	mut ans := x + coef[0]
	mut i := 1
	for i <= n-1; i++ {
		ans = ans*x + coef[i]
	}
	ret ans
}

// Evaluates a rational function
fn ratevl(x: f64, num: []f64, m: int, denom: []f64, n: int): f64 {
	// Source: Holin et. al., "Polynomial and Rational Function Evaluation",
	// http://www.boost.org/doc/libs/1_61_0/libs/math/doc/html/math_toolkit/roots/rational.html
	absx := math::Abs(x)

	let mut dir: int
	let mut idx: int
	let mut y: f64
	if absx > 1 {
		// Evaluate as a polynomial in 1/x
		dir = -1
		idx = m
		y = 1 / x
	} else {
		dir = 1
		idx = 0
		y = x
	}

	// Evaluate the numerator
	mut numAns := num[idx]
	idx += dir
	mut i := 0
	for i < m; i++ {
		numAns = numAns*y + num[idx]
		idx += dir
	}

	// Evaluate the denominator
	if absx > 1 {
		idx = n
	} else {
		idx = 0
	}

	mut denomAns := denom[idx]
	idx += dir
	i = 0
	for i < n; i++ {
		denomAns = denomAns*y + denom[idx]
		idx += dir
	}

	if absx > 1 {
		pow := f64(n - m)
		ret math::Pow(x, pow) * numAns / denomAns
	}
	ret numAns / denomAns
}