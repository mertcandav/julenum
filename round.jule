// Copyright 2025 mertcandav.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// Implementation derived from the test gonum package.
//
// Copyright ©2018 The Gonum Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

use "std/math"

// Returns the half away from zero rounded value of x with precision.
//
// Special cases are:
//	Round(±0, prec) = +0
//	Round(±Inf, prec) = ±Inf
//	Round(NaN, prec) = NaN
fn Round(mut x: f64, prec: int): f64 {
	if x == 0 {
		// Make sure zero is returned
		// without the negative bit set.
		ret 0
	}
	// Fast path for positive precision on integers.
	if prec >= 0 && x == math::Trunc(x) {
		ret x
	}
	pow := math::Pow10(prec)
	intermed := x * pow
	if math::IsInf(intermed, 0) {
		ret x
	}
	x = math::Round(intermed)

	if x == 0 {
		ret 0
	}

	ret x / pow
}

// Returns the half even rounded value of x with precision.
//
// Special cases are:
//	RoundEven(±0, prec) = +0
//	RoundEven(±Inf, prec) = ±Inf
//	RoundEven(NaN, prec) = NaN
fn RoundEven(mut x: f64, prec: int): f64 {
	if x == 0 {
		// Make sure zero is returned
		// without the negative bit set.
		ret 0
	}
	// Fast path for positive precision on integers.
	if prec >= 0 && x == math::Trunc(x) {
		ret x
	}
	pow := math::Pow10(prec)
	intermed := x * pow
	if math::IsInf(intermed, 0) {
		ret x
	}
	x = math::RoundEven(intermed)

	if x == 0 {
		ret 0
	}

	ret x / pow
}