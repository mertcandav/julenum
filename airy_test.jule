// Copyright 2025 mertcandav.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/testing"

struct airyTest {
	z:    cmplx128
	want: cmplx128
}

let testsAiry: []airyTest = [
	// Results computed using Octave.
	{5, 1.08344428136074e-04},
	{5i, 29.9014823980070 + 21.6778315987835i},
]

#test
fn testAiry(t: &testing::T) {
	for _, test in testsAiry {
		got := AiryAi(test.z)
		if !Tolerance(real(got), real(test.want), 1e-10) {
			t.Errorf("Real part mismatch. Got {}, want {}", real(got), real(test.want))
		}
		if !Tolerance(real(got), real(test.want), 1e-10) {
			t.Errorf("Imaginary part mismatch. Got {}, want {}", imag(got), imag(test.want))
		}
	}
}