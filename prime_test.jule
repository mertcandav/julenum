// Copyright 2025 mertcandav.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/testing"

struct primeTest {
	x:    u64
	want: bool
}

let testsPrime: []primeTest = [
	// Small positives.
	{x: 2, want: true},
	{x: 3, want: true},
	{x: 5, want: true},
	{x: 7, want: true},
	{x: 11, want: true},
	{x: 13, want: true},
	{x: 17, want: true},
	{x: 19, want: true},
	{x: 23, want: true},
	{x: 29, want: true},
	{x: 31, want: true},
	{x: 37, want: true},
	{x: 41, want: true},
	{x: 43, want: true},
	{x: 47, want: true},
	{x: 53, want: true},
	{x: 59, want: true},
	{x: 61, want: true},

	// Small negatives.
	{x: 0, want: false},
	{x: 1, want: false},
	{x: 4, want: false},
	{x: 6, want: false},
	{x: 8, want: false},
	{x: 9, want: false},
	{x: 10, want: false},
	{x: 12, want: false},
	{x: 15, want: false},
	{x: 20, want: false},
	{x: 21, want: false},
	{x: 25, want: false},
	{x: 27, want: false},
	{x: 33, want: false},
	{x: 35, want: false},
	{x: 39, want: false},
	{x: 51, want: false},

	// Large positives.
	{x: 1<<61 - 1, want: true},            // Mersenne prime (2^61-1)
	{x: 32416190071, want: true},
	{x: 9223372036854775783, want: true},
	{x: 18446744073709551557, want: true}, // prime close to u64 limits

	// Large negatives.
	{x: 1<<61, want: false},               // Mersenne prime +1
	{x: u64.Max - 1, want: false},
	{x: 9223372036854775806, want: false},
]

#test
fn testPrime(t: &testing::T) {
	for _, test in testsPrime {
		got := Prime(test.x)
		if got != test.want {
			t.Errorf("Prime({}) = {}, expected {}", test.x, got, test.want)
		}
	}
}