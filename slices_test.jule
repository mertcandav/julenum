// Copyright 2025 mertcandav.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/math"
use "std/testing"

struct maxTest {
	s:    []f64
	want: f64
}

let testsMax: []maxTest = [
	{s: [1, 2, 3, 4, 5, 6], want: 6},
	{s: [9, 0], want: 9},
	{s: [2], want: 2},
	{s: [-2], want: -2},
	{s: [math::NaN(), -2], want: math::NaN()},
	{s: [math::NaN()], want: math::NaN()},
	{s: [math::NaN(), math::Inf(+1)], want: math::NaN()},
	{s: [math::Inf(-1), math::Inf(+1)], want: math::Inf(+1)},
	{s: [9735, f64.Max, math::Inf(+1)], want: math::Inf(+1)},
]

#test
fn testMax(t: &testing::T) {
	for _, test in testsMax {
		max := Max(test.s...)
		if !Equal(max, test.want) {
			t.Errorf("Max({}) = {}, expected {}", test.s, max, test.want)
		}
	}
}