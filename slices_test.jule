// Copyright 2025 mertcandav.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/math"
use "std/testing"

struct csTest {
	s:   []f64
	max: f64
	min: f64
	sum: f64
}

let testsCS: []csTest = [
	{s: [1, 2, 3, 4, 5, 6], max: 6, min: 1, sum: 21},
	{s: [9, 0], max: 9, min: 0, sum: 9},
	{s: [2], max: 2, min: 2, sum: 2},
	{s: [-2], max: -2, min: -2, sum: -2},
	{s: [math::NaN(), -2], max: math::NaN(), min: math::NaN(), sum: math::NaN()},
	{s: [math::NaN()], max: math::NaN(), min: math::NaN(), sum: math::NaN()},
	{s: [math::NaN(), math::Inf(+1)], max: math::NaN(), min: math::NaN(), sum: math::NaN()},
	{s: [math::Inf(-1), math::Inf(+1)], max: math::Inf(+1), min: math::Inf(-1), sum: math::NaN()},
	{s: [math::Inf(+1), math::Inf(-1)], max: math::Inf(+1), min: math::Inf(-1), sum: math::NaN()},
	{s: [math::Inf(+1), math::Inf(+1)], max: math::Inf(+1), min: math::Inf(+1), sum: math::Inf(+1)},
	{s: [math::Inf(-1), math::Inf(-1)], max: math::Inf(-1), min: math::Inf(-1), sum: math::Inf(-1)},
	{s: [9735, f64.Max, math::Inf(+1)], max: math::Inf(+1), min: 9735, sum: math::Inf(+1)},
]

#test
fn testMax(t: &testing::T) {
	for _, test in testsCS {
		max := Max(test.s...)
		if !Equal(max, test.max) {
			t.Errorf("Max({}) = {}, expected {}", test.s, max, test.max)
		}
	}
}

#test
fn testMin(t: &testing::T) {
	for _, test in testsCS {
		min := Min(test.s...)
		if !Equal(min, test.min) {
			t.Errorf("Min({}) = {}, expected {}", test.s, min, test.min)
		}
	}
}

#test
fn testMinMax(t: &testing::T) {
	for _, test in testsCS {
		min, max := MinMax(test.s...)
		if !Equal(min, test.min) || !Equal(max, test.max) {
			t.Errorf("MinMax({}) = {}, {}, expected {}, {}", test.s, min, max, test.min, test.max)
		}
	}
}

#test
fn testSum(t: &testing::T) {
	for _, test in testsCS {
		sum := Sum(test.s...)
		if !Equal(sum, test.sum) {
			t.Errorf("Sum({}) = {}, expected {}", test.s, sum, test.sum)
		}
	}
}

struct linspaceTest {
	start: f64
	stop:  f64
	n:     int
	want:  []f64
}

let testsLinspace: []linspaceTest = [
	{
		start: 1, stop: 1, n: 0,
		want: [],
	},
	{
		start: 1, stop: 2, n: 1,
		want: [1],
	},
	{
		start: 1, stop: 1, n: 5,
		want: [1, 1, 1, 1, 1],
	},
	{
		start: 1, stop: 2, n: 5,
		want: [1, 1.25, 1.5, 1.75, 2],
	},
	{
		start: 2, stop: 1, n: 5,
		want: [2, 1.75, 1.5, 1.25, 1],
	},
	{
		start: 1, stop: 2, n: 4,
		want: [1, 1.3333333333333333, 1.6666666666666665, 2],
	},
	{
		start: 2, stop: 1, n: 4,
		want: [2, 1.6666666666666665, 1.3333333333333333, 1],
	},
	{
		start: -1, stop: 1, n: 4,
		want: [-1, -0.33333333333333337, 0.33333333333333326, 1],
	},
	{
		start: 1, stop: -1, n: 4,
		want: [1, 0.33333333333333337, -0.33333333333333326, -1],
	},
	{
		start: math::NaN(), stop: math::NaN(), n: 4,
		want: [math::NaN(), math::NaN(), math::NaN(), math::NaN()],
	},
	{
		start: math::NaN(), stop: 2, n: 4,
		want: [math::NaN(), math::NaN(), math::NaN(), math::NaN()],
	},
	{
		start: math::Inf(+1), stop: 2, n: 4,
		want: [math::Inf(+1), math::NaN(), math::NaN(), math::NaN()],
	},
	{
		start: math::Inf(+1), stop: -2, n: 4,
		want: [math::Inf(+1), math::NaN(), math::NaN(), math::NaN()],
	},
	{
		start: math::Inf(-1), stop: 2, n: 4,
		want: [math::Inf(-1), math::NaN(), math::NaN(), math::NaN()],
	},
	{
		start: math::Inf(-1), stop: -2, n: 4,
		want: [math::Inf(-1), math::NaN(), math::NaN(), math::NaN()],
	},
	{
		start: 10, stop: math::Inf(+1), n: 4,
		want: [10, math::Inf(+1), math::Inf(+1), math::Inf(+1)],
	},
	{
		start: 10, stop: math::Inf(-1), n: 4,
		want: [10, math::Inf(-1), math::Inf(-1), math::Inf(-1)],
	},
	{
		start: 1, stop: math::NaN(), n: 4,
		want: [1, math::NaN(), math::NaN(), math::NaN()],
	},
	{
		start: math::Inf(+1), stop: math::Inf(+1), n: 4,
		want: [math::Inf(+1), math::NaN(), math::NaN(), math::NaN()],
	},
	{
		start: math::Inf(-1), stop: math::Inf(+1), n: 4,
		want: [math::Inf(-1), math::NaN(), math::NaN(), math::NaN()],
	},
]

#test
fn testLinspace(t: &testing::T) {
	for _, test in testsLinspace {
		got := Linspace(test.start, test.stop, test.n)
		if len(got) != len(test.want) {
			t.Errorf("Linspace({}, {}, {}) = {}, expected {}", test.start, test.stop, test.n, got, test.want)
			continue
		}
		for i in got {
			if !Equal(got[i], test.want[i]) && !VeryClose(got[i], test.want[i]) {
				t.Errorf("Linspace({}, {}, {}) = {}, expected {}", test.start, test.stop, test.n, got, test.want)
				break
			}
		}
	}
}

struct rangeTest {
	start: f64
	stop:  f64
	step:  f64
	want:  []f64
}

let testsRange: []rangeTest = [
	{
		start: 1, stop: 1, step: 1,
		want: [],
	},
	{
		start: math::NaN(), stop: 2, step: 1,
		want: [],
	},
	{
		start: 1, stop: math::NaN(), step: 10,
		want: [],
	},
	{
		start: 1, stop: 10, step: math::NaN(),
		want: [1],
	},
	{
		start: -1, stop: 1, step: 1,
		want: [-1, 0],
	},
	{
		start: -1, stop: 1, step: 1,
		want: [-1, 0],
	},
	{
		start: -1, stop: 10, step: 1,
		want: [-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9],
	},
	{
		start: 1, stop: -10, step: 1,
		want: [],
	},
	{
		start: 10, stop: 1, step: 1,
		want: [],
	},
	{
		start: 10, stop: 1, step: -1,
		want: [10, 9, 8, 7, 6, 5, 4, 3, 2],
	},
	{
		start: -10, stop: 1, step: 1,
		want: [-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0],
	},
	{
		start: 10, stop: 5, step: -1,
		want: [10, 9, 8, 7, 6],
	},
	{
		start: -10, stop: -5, step: 1,
		want: [-10, -9, -8, -7, -6],
	},
	{
		start: -10, stop: -5, step: -1,
		want: [],
	},
	{
		start: 10, stop: 5, step: 1,
		want: [],
	},
	{
		start: 10, stop: 5, step: -1,
		want: [10, 9, 8, 7, 6],
	},
	{
		start: 10, stop: 9, step: -0.1,
		want: [10, 9.9, 9.8, 9.7, 9.6, 9.5, 9.4, 9.3, 9.2, 9.1],
	},
	{
		start: 9, stop: 1, step: 0.1,
		want: [],
	},
	{
		start: 9, stop: 10, step: 0.1,
		want: [9, 9.1, 9.2, 9.3, 9.4, 9.5, 9.6, 9.7, 9.8, 9.9],
	},
	{
		start: 9, stop: 10.1, step: 0.5,
		want: [9, 9.5, 10],
	},
	{
		start: 9, stop: 10, step: 0.3,
		want: [9, 9.3, 9.6, 9.9],
	},
	{
		start: 5, stop: 6, step: 2,
		want: [5],
	},
	{
		start: -5, stop: -6, step: -2,
		want: [-5],
	},
]

#test
fn testRange(t: &testing::T) {
	for _, test in testsRange {
		got := Range(test.start, test.stop, test.step)
		if len(got) != len(test.want) {
			t.Errorf("Range({}, {}, {}) = {}, expected {}", test.start, test.stop, test.step, got, test.want)
			continue
		}
		for i in got {
			if !Equal(got[i], test.want[i]) && !VeryClose(got[i], test.want[i]) {
				t.Errorf("Range({}, {}, {}) = {}, expected {}", test.start, test.stop, test.step, got, test.want)
				break
			}
		}

		// Check for integer cases.
		if math::Trunc(test.start) == test.start &&
			math::Trunc(test.stop) == test.stop &&
			math::Trunc(test.step) == test.step {
			gotint := Range(int(test.start), int(test.stop), int(test.step))
			if len(gotint) != len(test.want) {
				t.Errorf("Range({}, {}, {}) = {}, expected {}", test.start, test.stop, test.step, got, test.want)
				continue
			}
			for i in gotint {
				if gotint[i] != int(test.want[i]) {
					t.Errorf("Range({}, {}, {}) = {}, expected {}", test.start, test.stop, test.step, got, test.want)
					break
				}
			}
		}
	}
}