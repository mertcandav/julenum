// Copyright 2025 mertcandav.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/math"
use "std/testing"

struct csTest {
	s:   []f64
	max: f64
	min: f64
	sum: f64
}

let testsCS: []csTest = [
	{s: [1, 2, 3, 4, 5, 6], max: 6, min: 1, sum: 21},
	{s: [9, 0], max: 9, min: 0, sum: 9},
	{s: [2], max: 2, min: 2, sum: 2},
	{s: [-2], max: -2, min: -2, sum: -2},
	{s: [math::NaN(), -2], max: math::NaN(), min: math::NaN(), sum: math::NaN()},
	{s: [math::NaN()], max: math::NaN(), min: math::NaN(), sum: math::NaN()},
	{s: [math::NaN(), math::Inf(+1)], max: math::NaN(), min: math::NaN(), sum: math::NaN()},
	{s: [math::Inf(-1), math::Inf(+1)], max: math::Inf(+1), min: math::Inf(-1), sum: math::NaN()},
	{s: [math::Inf(+1), math::Inf(-1)], max: math::Inf(+1), min: math::Inf(-1), sum: math::NaN()},
	{s: [math::Inf(+1), math::Inf(+1)], max: math::Inf(+1), min: math::Inf(+1), sum: math::Inf(+1)},
	{s: [math::Inf(-1), math::Inf(-1)], max: math::Inf(-1), min: math::Inf(-1), sum: math::Inf(-1)},
	{s: [9735, f64.Max, math::Inf(+1)], max: math::Inf(+1), min: 9735, sum: math::Inf(+1)},
]

#test
fn testMax(t: &testing::T) {
	for _, test in testsCS {
		max := Max(test.s...)
		if !Equal(max, test.max) {
			t.Errorf("Max({}) = {}, expected {}", test.s, max, test.max)
		}
	}
}

#test
fn testMin(t: &testing::T) {
	for _, test in testsCS {
		min := Min(test.s...)
		if !Equal(min, test.min) {
			t.Errorf("Min({}) = {}, expected {}", test.s, min, test.min)
		}
	}
}

#test
fn testSum(t: &testing::T) {
	for _, test in testsCS {
		sum := Sum(test.s...)
		if !Equal(sum, test.sum) {
			t.Errorf("Sum({}) = {}, expected {}", test.s, sum, test.sum)
		}
	}
}