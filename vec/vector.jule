// Copyright 2025 mertcandav.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/math"

// General vector type for type T.
type Vector[T: integer | float]: []T

impl Vector {
	// Returns new Vector buffer enough to store at least n values.
	fn make(mut *self, n: int): Vector[T] {
		// Reuse self capacity, if there is enough space.
		if n <= cap(*self) {
			ret (*self)[:n]
		}
		ret make(Vector[T], n)
	}

	// Sets self to the sum x+y.
	// x any y must have same length.
	//
	// If self have enough capacity, Add will use it to avoid making allocation.
	// If length is zero, self will be zero-length. But keeps internal allocation.
	#disable boundary
	fn Add(mut *self, &x: *Vector[T], &y: *Vector[T]) {
		if len(*x) != len(*y) {
			panic("vec: Vector.Add: len(x) != len(y)")
		}

		// Make sure the self data have enough space.
		*self = self.make(len(*x))

		mut i := 0
		for i < len(*self); i++ {
			(*self)[i] = (*x)[i] + (*y)[i]
		}
	}

	// Sets self to the difference x-y.
	// x any y must have same length.
	//
	// If self have enough capacity, Sub will use it to avoid making allocation.
	// If length is zero, self will be zero-length. But keeps internal allocation.
	#disable boundary
	fn Sub(mut *self, &x: *Vector[T], &y: *Vector[T]) {
		if len(*x) != len(*y) {
			panic("vec: Vector.Sub: len(x) != len(y)")
		}

		// Make sure the self data have enough space.
		*self = self.make(len(*x))

		mut i := 0
		for i < len(*self); i++ {
			(*self)[i] = (*x)[i] - (*y)[i]
		}
	}

	// Returns the dot product self*y.
	// self any y must have same length.
	// Returns zero if length is zero.
	#disable boundary
	fn Dot(*self, &y: *Vector[T]): T {
		if len(*self) != len(*y) {
			panic("vec: Vector.Dot: len(self) != len(y)")
		}

		ret dot(self, y)
	}

	// Sets self to to x scaled by k.
	//
	// If self have enough capacity, Normalize will use it to avoid making allocation.
	// If length is zero, self will be zero-length. But keeps internal allocation.
	fn Scale(mut *self, &x: *Vector[T], k: f64) {
		// Make sure the self data have enough space.
		*self = self.make(len(*x))

		mut i := 0
		for i < len(*self); i++ {
			(*self)[i] = (*x)[i] * k
		}
	}

	// Returns norm (length) of vector.
	fn Norm(*self): f64 {
		ret math::Sqrt(f64(dot(self, self)))
	}

	// Sets self to the unit vector (vector with norm 1) in the same direction as x.
	// If the vector x has zero norm, it returns the zero vector (x₁=0, x₂=0, ..., xₙ=0) to avoid division by zero.
	//
	// If self have enough capacity, Normalize will use it to avoid making allocation.
	// If length is zero, self will be zero-length. But keeps internal allocation.
	#disable boundary
	fn Normalize(mut *self, &x: *Vector[T]) {
		// Make sure the self data have enough space.
		*self = self.make(len(*x))

		norm := x.Norm()
		if norm == 0 {
			mut i := 0
			for i < len(*self); i++ {
				(*self)[i] = 0
			}
		} else {
			mut i := 0
			for i < len(*self); i++ {
				(*self)[i] = (*x)[i] / norm
			}
		}
	}

	// Returns the angle in radians between self and y vectors.
	// self any y must have same length.
	fn AngleBetween(*self, &y: *Vector[T]): f64 {
		if len(*self) != len(*y) {
			panic("vec: Vector.AngleBetween: len(self) != len(y)")
		}

		normProduct := self.Norm() * y.Norm()
		if normProduct == 0 {
			ret 0
		}
		dot := f64(dot(self, y))
		mut cosTheta := dot / normProduct
		// Clamp to avoid NaN due to floating-point error.
		if cosTheta > 1 {
			cosTheta = 1
		} else if cosTheta < -1 {
			cosTheta = -1
		}
		ret math::Acos(cosTheta)
	}
}

fn dot[T: integer | float](&x: *Vector[T], &y: *Vector[T]): T {
	let mut dot: T
	mut i := 0
	for i < len(*x); i++ {
		dot += (*x)[i] * (*y)[i]
	}
	ret dot
}