// Copyright 2025 mertcandav.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use jn "julenum"
use "std/math"
use "std/slices"
use "std/testing"

struct vectorCSTest {
	x:            Vector[f64]
	norm:         f64
	y:            Vector[f64]
	dot:          f64
	angleBetween: f64
	add:          Vector[f64]
	sub:          Vector[f64]
	proj:         Vector[f64]
}

let mut testsVectorCS: []vectorCSTest = [
	{
		x: [],
		norm: 0,
		y: [],
		dot: 0,
		angleBetween: 0,
		add: [],
		sub: [],
		proj: [],
	},
	{
		x: [1, 0],
		norm: math::Sqrt(1*1 + 0*0),
		y: [0, 1],
		dot: 1*0 + 0*1,
		angleBetween: jn::Pi/2,
		add: [1, 1],
		sub: [1, -1],
		proj: [0, 0],
	},
	{
		x: [1, 1, 1, 1],
		norm: math::Sqrt(1*1 + 1*1 + 1*1 + 1*1),
		y: [-1, -1, -1, -1],
		dot: 1*-1 + 1*-1 + 1*-1 + 1*-1,
		angleBetween: jn::Pi,
		add: [0, 0, 0, 0],
		sub: [2, 2, 2, 2],
		proj: [1, 1, 1, 1],
	},
	{
		x: [1, 2, 3, 4, 5, 6],
		norm: math::Sqrt(1*1 + 2*2 + 3*3 + 4*4 + 5*5 + 6*6),
		y: [6, 5, 4, 3, 2, 1],
		dot: 1*6 + 2*5 + 3*4 + 4*3 + 5*2 + 6*1,
		angleBetween: 0.907922503144761,
		add: [7, 7, 7, 7, 7, 7],
		sub: [-5, -3, -1, 1, 3, 5],
		proj: [3.6923076923076925, 3.076923076923077, 2.4615384615384617, 1.8461538461538463, 1.2307692307692308, 0.6153846153846154],
	},
	{
		x: [1, 2, 3, 4],
		norm: math::Sqrt(1*1 + 2*2 + 3*3 + 4*4),
		y: [1, 2, 3, 4],
		dot: 1*1 + 2*2 + 3*3 + 4*4,
		angleBetween: 0,
		add: [2, 4, 6, 8],
		sub: [0, 0, 0, 0],
		proj: [1, 2, 3, 4],
	},
	{
		x: [10, 20, 30, 40],
		norm: math::Sqrt(10*10 + 20*20 + 30*30 + 40*40),
		y: [0, 0, 0, 0],
		dot: 0,
		angleBetween: 0,
		add: [10, 20, 30, 40],
		sub: [10, 20, 30, 40],
		proj: [0, 0, 0, 0],
	},
	{
		x: [10, 20, 30, 40],
		norm: math::Sqrt(10*10 + 20*20 + 30*30 + 40*40),
		y: [10, 10, 10, 10],
		dot: 10*10 + 20*10 + 30*10 + 40*10,
		angleBetween: 0.42053433528396544,
		add: [20, 30, 40, 50],
		sub: [0, 10, 20, 30],
		proj: [25, 25, 25, 25],
	},
]

fn testVectorCS(t: &testing::T, name: str, f: fn(mut vectorCSTest): (Vector[f64], Vector[f64])) {
	for (i, mut test) in testsVectorCS {
		got, want := f(test)
		if !slices::Equal([]f64(got), []f64(want)) {
			t.Errorf("{}({}, {}) = {}, expected {}", name, test.x, test.y, got, want)
		}
	}
}

#test
fn testVectorAdd(t: &testing::T) {
	testVectorCS(t, "Add", fn|mut test| {
		mut z := make(Vector[f64], len(test.x))
		copy(z, test.x)
		z.Add(&test.x, &test.y)
		ret z, test.add
	})
}

#test
fn testVectorSub(t: &testing::T) {
	testVectorCS(t, "Sub", fn|mut test| {
		mut z := make(Vector[f64], len(test.x))
		copy(z, test.x)
		z.Sub(&test.x, &test.y)
		ret z, test.sub
	})
}

#test
fn testVectorDot(t: &testing::T) {
	for (_, mut test) in testsVectorCS {
		got := test.x.Dot(&test.y)
		if got != test.dot {
			t.Errorf("Dot({}, {}) = {}, expected {}", test.x, test.y, got, test.dot)
		}
	}
}

#test
fn testVectorNorm(t: &testing::T) {
	for (_, mut test) in testsVectorCS {
		got := test.x.Norm()
		if got != test.norm {
			t.Errorf("Norm({}, {}) = {}, expected {}", test.x, test.y, got, test.norm)
		}
	}
}

#test
fn testVectorNormalize(t: &testing::T) {
	for (_, mut test) in testsVectorCS {
		mut z := make(Vector[f64], len(test.x))
		copy(z, test.x)
		z.Normalize(&z)
		if len(z) != len(test.x) {
			t.Errorf("Normalize({}) = len({}), expected len({})", test.x, len(z), len(test.x))
			continue
		}
		mut i := 0
		for i < len(z); i++ {
			want := test.x[i] / test.norm
			if z[i] != want {
				t.Errorf("Norm({})[{}] = {}, expected {}", test.x, i, z[i], want)
				break
			}
		}
	}
}

#test
fn testVectorAngleBetween(t: &testing::T) {
	for (_, mut test) in testsVectorCS {
		got := test.x.AngleBetween(&test.y)
		if !jn::VeryClose(got, test.angleBetween) {
			t.Errorf("AngleBetween({}, {}) = {}, expected {}", test.x, test.y, got, test.angleBetween)
		}
	}
}

#test
fn testVectorScale(t: &testing::T) {
	for (_, mut test) in testsVectorCS {
		mut z := make(Vector[f64], len(test.x))
		copy(z, test.x)
		z.Scale(&z, 1/test.x.Norm())
		if len(z) != len(test.x) {
			t.Errorf("Scale({}) = len({}), expected len({})", test.x, len(z), len(test.x))
			continue
		}
		mut i := 0
		for i < len(z); i++ {
			want := test.x[i] / test.norm
			if !jn::VeryClose(z[i], want) {
				t.Errorf("Scale({})[{}] = {}, expected {}", test.x, i, z[i], want)
				break
			}
		}
	}
}

#test
fn testVectorProj(t: &testing::T) {
	testVectorCS(t, "Proj", fn|mut test| {
		mut z := make(Vector[f64], len(test.x))
		copy(z, test.x)
		z.Proj(&test.x, &test.y)
		ret z, test.proj
	})
}