// Copyright 2025 mertcandav.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/slices"
use "std/testing"

struct vectorCSTest {
	x:   Vector[f64]
	y:   Vector[f64]
	add: Vector[f64]
}

let mut testsVectorCS: []vectorCSTest = [
	{
		x: [1, 2, 3, 4],
		y: [1, 2, 3, 4],
		add: [2, 4, 6, 8],
	},
	{
		x: [10, 20, 30, 40],
		y: [0, 0, 0, 0],
		add: [10, 20, 30, 40],
	},
	{
		x: [10, 20, 30, 40],
		y: [10, 10, 10, 10],
		add: [20, 30, 40, 50],
	},
]

fn testVectorCS(t: &testing::T, name: str, f: fn(mut vectorCSTest): (Vector[f64], Vector[f64])) {
	for (_, mut test) in testsVectorCS {
		got, want := f(test)
		if !slices::Equal([]f64(got), []f64(want)) {
			t.Errorf("{}({}, {}) = {}, expected {}", name, test.x, test.y, got, want)
		}
	}
}

#test
fn testVectorAdd(t: &testing::T) {
	testVectorCS(t, "Add", fn|mut test| {
		mut z := make(Vector[f64], len(test.x))
		copy(z, test.x)
		z.Add(&test.x, &test.y)
		ret z, test.add
	})
}