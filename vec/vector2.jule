// Copyright 2025 mertcandav.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/math"

// 2D vector.
struct Vector2 {
	X: f64
	Y: f64
}

impl Vector2 {
	// Sets self to the sum x+y.
	fn Add(mut *self, &x: *Vector2, &y: *Vector2) {
		self.X, self.Y = x.X+y.X, x.Y+y.Y
	}

	// Sets self to the difference x-y.
	fn Sub(mut *self, &x: *Vector2, &y: *Vector2) {
		self.X, self.Y = x.X-y.X, x.Y-y.Y
	}

	// Returns the dot product self*y.
	fn Dot(*self, &y: *Vector2): f64 {
		ret self.X*y.X + self.Y*y.Y
	}

	// Sets self to to x scaled by k.
	fn Scale(mut *self, &x: *Vector2, k: f64) {
		self.X, self.Y = x.X*k, x.Y*k
	}

	// Returns the scalar cross product of two vectors (2D cross product).
	fn Cross(*self, &x: *Vector2): f64 {
		ret self.X*x.Y - self.Y*x.X
	}

	// Returns norm (length) of vector.
	fn Norm(*self): f64 {
		ret math::Sqrt(self.X*self.X + self.Y*self.Y)
	}

	// Sets self to the unit vector (vector with norm 1) in the same direction as x.
	// If the vector x has zero norm, it returns the zero vector (0, 0) to avoid division by zero.
	fn Normalize(mut *self, &x: *Vector2) {
		norm := x.Norm()
		if norm == 0 {
			self.X, self.Y = 0, 0
		}
		self.X, self.Y = x.X/norm, x.Y/norm
	}

	// Returns the angle in radians between self and y vectors.
	fn AngleBetween(*self, &y: *Vector2): f64 {
		normProduct := self.Norm() * y.Norm()
		if normProduct == 0 {
			ret 0
		}
		dot := self.Dot(y)
		mut cosTheta := dot / normProduct
		// Clamp to avoid NaN due to floating-point error.
		if cosTheta > 1 {
			cosTheta = 1
		} else if cosTheta < -1 {
			cosTheta = -1
		}
		ret math::Acos(cosTheta)
	}

	// Sets self to the x vector rotated by theta radians.
	fn Rotate(mut *self, &x: *Vector2, theta: f64) {
		sin, cos := math::Sincos(theta)
		self.X, self.Y = x.X*cos-x.Y*sin, x.X*sin+x.Y*cos
	}

	// Sets self to projection of vector x onto y.
	// If the vector y has zero norm, it returns the zero vector (0, 0) to avoid division by zero.
	fn Proj(mut *self, &x: *Vector2, &y: *Vector2) {
		yn := y.Norm()
		if yn == 0 {
			self.X, self.Y = 0, 0
			ret
		}
		xy := x.Dot(y)
		scale := xy / (yn * yn)
		self.Scale(y, scale)
	}
}