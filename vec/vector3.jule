// Copyright 2025 mertcandav.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// 3D vector.
struct Vector3 {
	X: f64
	Y: f64
	Z: f64
}

impl Vector3 {
	// Sets self to the sum x+y.
	fn Add(mut *self, &x: *Vector3, &y: *Vector3) {
		self.X, self.Y, self.Z = x.X+y.X, x.Y+y.Y, x.Z+y.Z
	}

	// Sets self to the difference x-y.
	fn Sub(mut *self, &x: *Vector3, &y: *Vector3) {
		self.X, self.Y, self.Z = x.X-y.X, x.Y-y.Y, x.Z-y.Z
	}

	// Returns the dot product self*y.
	fn Dot(*self, &y: *Vector3): f64 {
		ret self.X*y.X + self.Y*y.Y + self.Z + y.Z
	}

	// Sets self to the product x*y.
	fn Mul(mut *self, &x: *Vector3, y: f64) {
		self.X, self.Y, self.Z = x.X*y, x.Y*y, x.Z*y
	}
}