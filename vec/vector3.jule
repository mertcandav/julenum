// Copyright 2025 mertcandav.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "julenum/num/quat"
use "std/math"

// 3D vector.
struct Vector3 {
	X: f64
	Y: f64
	Z: f64
}

impl Vector3 {
	// Sets self to the sum x+y.
	fn Add(mut *self, &x: *Vector3, &y: *Vector3) {
		self.X, self.Y, self.Z = x.X+y.X, x.Y+y.Y, x.Z+y.Z
	}

	// Sets self to the difference x-y.
	fn Sub(mut *self, &x: *Vector3, &y: *Vector3) {
		self.X, self.Y, self.Z = x.X-y.X, x.Y-y.Y, x.Z-y.Z
	}

	// Returns the dot product self*y.
	fn Dot(*self, &y: *Vector3): f64 {
		ret self.X*y.X + self.Y*y.Y + self.Z*y.Z
	}

	// Sets self to to x scaled by k.
	fn Scale(mut *self, &x: *Vector3, k: f64) {
		self.X, self.Y, self.Z = x.X*k, x.Y*k, x.Z*k
	}

	// Sets self to the cross product x*y of two vectors (3D cross product).
	fn Cross(mut *self, &x: *Vector3, &y: *Vector3) {
		xterm := x.Y*y.Z - x.Z*y.Y
		yterm := x.Z*y.X - x.X*y.Z
		zterm := x.X*y.Y - x.Y*y.X
		self.X, self.Y, self.Z = xterm, yterm, zterm
	}

	// Returns norm (length) of vector.
	fn Norm(*self): f64 {
		ret math::Sqrt(self.X*self.X + self.Y*self.Y + self.Z*self.Z)
	}

	// Sets self to the unit vector (vector with norm 1) in the same direction as x.
	// If the vector x has zero norm, it returns the zero vector (0, 0) to avoid division by zero.
	fn Normalize(mut *self, &x: *Vector3) {
		norm := x.Norm()
		if norm == 0 {
			self.X, self.Y = 0, 0
		}
		self.X, self.Y, self.Z = x.X/norm, x.Y/norm, x.Z/norm
	}

	// Returns the angle in radians between self and y vectors.
	fn AngleBetween(*self, &y: *Vector3): f64 {
		normProduct := self.Norm() * y.Norm()
		if normProduct == 0 {
			ret 0
		}
		dot := self.Dot(y)
		mut cosTheta := dot / normProduct
		// Clamp to avoid NaN due to floating-point error.
		if cosTheta > 1 {
			cosTheta = 1
		} else if cosTheta < -1 {
			cosTheta = -1
		}
		ret math::Acos(cosTheta)
	}

	// Sets self to the x vector rotated by quaternion q.
	fn RotateQuat(mut *self, &x: *Vector3, mut q: quat::Quat) {
		// q * x * q^-1
		mut xq := quat::Quat{0, x.X, x.Y, x.Z}
		xq.Mul(&q, &xq)
		q.Conj(&q)
		xq.Mul(&xq, &q)
		self.X, self.Y, self.Z = xq.X, xq.Y, xq.Z
	}

	// Sets self to projection of vector x onto y.
	// If the vector y has zero norm, it returns the zero vector (0, 0) to avoid division by zero.
	fn Proj(mut *self, &x: *Vector3, &y: *Vector3) {
		yn := y.Norm()
		if yn == 0 {
			self.X, self.Y = 0, 0
			ret
		}
		xy := x.Dot(y)
		scale := xy / (yn * yn)
		self.Scale(y, scale)
	}
}