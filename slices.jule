// Copyright 2025 mertcandav.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/math"

// Returns the maximum value of the slice.
// If len(s) == 0, it panics.
//
// Special cases are:
//	Max(...) = NaN, if any value is NaN
#disable boundary
fn Max[T: integer | float](s: ...T): T {
	if len(s) == 0 {
		panic("Max: len(s) == 0")
	}
	mut max := s[0]
	mut i := 1
	for i < len(s); i++ {
		x := s[i]
		if max < x {
			max = x
		}
	}
	ret max
}

// Returns the minimum value of the slice.
// If len(s) == 0, it panics.
//
// Special cases are:
//	Min(...) = NaN, if any value is NaN
#disable boundary
fn Min[T: integer | float](s: ...T): T {
	if len(s) == 0 {
		panic("Min: len(s) == 0")
	}
	mut min := s[0]
	mut i := 1
	for i < len(s); i++ {
		x := s[i]
		if min > x {
			min = x
		}
	}
	ret min
}

// Returns the minimum and maximum value of the slice.
// It is faster than calling Min and Max functions separately.
// If len(s) == 0, it panics.
//
// Special cases are:
//	Min(...) = NaN, if any value is NaN
#disable boundary
fn MinMax[T: integer | float](s: ...T): (min: T, max: T) {
	if len(s) == 0 {
		panic("MinMax: len(s) == 0")
	}
	min = s[0]
	max = min
	mut i := 1
	for i < len(s); i++ {
		x := s[i]
		if min > x {
			min = x
		}
		if max < x {
			max = x
		}
	}
	ret
}

// Returns the sum of all values of the slice.
//
// Special cases are:
//	Sum(...) = 0, if len(s) == 0
//	Sum(...) = NaN, if any value is NaN
//	Sum(...) = NaN, if any (+Inf + -Inf) appears
fn Sum[T: numeric](s: ...T): T {
	let mut sum: T
	for _, x in s {
		sum += x
	}
	ret sum
}

#disable boundary
fn linspace[T: integer | float](mut start: T, stop: T, n: int): []T {
	mut r := make([]T, n)
	if start <= stop {
		step := (stop - start) / T(n-1)
		for i in r {
			r[i] = start
			start += step
		}
	} else {
		step := (start - stop) / T(n-1)
		for i in r {
			r[i] = start
			start -= step
		}
	}
	ret r
}

// Returns a slice of n evenly spaced values between start and stop, inclusive.
//
// If n is 0, it returns an empty slice. If n is 1, the slice contains only start.
// Otherwise, it returns n values starting from start and ending at stop, linearly spaced.
// It panics if n is negative.
//
// Special cases are:
//	Linspace(start, NaN, n) = [start, NaN, NaN, NaN, ...]
//	Linspace(NaN, stop, n) = [NaN, NaN, NaN, NaN, ...]
//	Linspace(NaN, NaN, n) = [NaN, NaN, NaN, NaN, ...]
//	Linspace(±Inf, stop, n) = [±Inf, NaN, NaN, NaN, ...]
//	Linspace(start, ±Inf, n) = [start, ±Inf, ±Inf, ±Inf, ...]
fn Linspace[T: integer | float](start: T, stop: T, n: int): []T {
	if n == 0 {
		ret make([]T, 0)
	}
	if n < 0 {
		panic("julenum: Linspace: n < 0")
	}
	ret linspace(start, stop, n)
}

fn logspace[T: integer | float](start: T, stop: T, n: int, base: f64): []T {
	mut r := linspace(start, stop, n)
	for i in r {
		r[i] = T(math::Pow(base, f64(r[i])))
	}
	ret r
}

// Returns a slice of n values spaced evenly on a log scale (with given base)
// between base^start and base^stop, inclusive.
// It is the exponential (base^x) of a linearly spaced range.
// It panics if n is negative.
//
// Special cases are:
//	- If start, stop or base is NaN or ±Inf, result is undefined, but panic-safe
//
// Computations are performed using 64-bit floating-point precision.
// The result is returned as type T, which may cause rounding errors or loss of precision.
// To preserve exact results, use 64-bit floating-point type.
fn Logspace[T: integer | float](start: T, stop: T, n: int, base: f64): []T {
	if n == 0 {
		ret make([]T, 0)
	}
	if n < 0 {
		panic("julenum: Logspace: n < 0")
	}
	ret logspace(start, stop, n, base)
}

// Returns a slice of n values spaced evenly on a log scale (base 10) between start and stop,
// inclusive. The output is such that each element is the geometric progression from start to stop.
// It is equivalent to Logspace(log10(start), log10(stop), n, 10) as computation.
// It panics if n is negative.
//
// Special cases are:
//	- If start or stop is zero, or if they have different signs, the result is undefined and may contain NaNs.
//	- If start or stop is NaN or ±Inf, result is undefined, but panic-safe
//
// Computations are performed using 64-bit floating-point precision.
// The result is returned as type T, which may cause rounding errors or loss of precision.
// To preserve exact results, use 64-bit floating-point type.
#disable boundary
fn Geomspace[T: integer | float](mut start: T, mut stop: T, n: int): []T {
	if n == 0 {
		ret make([]T, 0)
	}
	if n < 0 {
		panic("julenum: Geomspace: n < 0")
	}

	sign := T(math::Copysign(1, f64(start)))
	start *= sign
	stop *= sign
	logStart := T(math::Log10(f64(start)))
	logStop := T(math::Log10(f64(stop)))
	mut r := logspace(logStart, logStop, n, 10)

	// Make sure the result slice's first and last values match the start and stop arguments.
	// This is necessary because math::Exp(math::Log(x)) is not necessarily equal to x.
	if n > 0 {
		r[0] = start
		if n > 1 {
			r[len(r)-1] = stop
		}
	}

	for i in r {
		r[i] = r[i] * sign
	}

	ret r
}

// Returns a slice of evenly spaced values within a given interval.
// The sequence starts at start, increments by step, and stops before stop.
// If step is zero, the function will panic to prevent an infinite loop.
// When using a non-integer step, such as 0.1, it is often better to use Linspace.
//
// Special cases are:
//	Range(NaN, stop, step) = []
//	Range(start, NaN, step) = []
//	Range(start, stop, NaN) = []
//	Range(±Inf, stop, step) = undefined, may cause panic
//	Range(start, ±Inf, step) = undefined, may cause panic
//	Range(start, stop, ±Inf) = undefined, may cause panic
#disable boundary
fn Range[T: integer | float](mut start: T, stop: T, step: T): []T {
	if step == 0 {
		panic("julenum: Range: step == 0")
	}

	let mut r: []T
	if start < stop {
		if step < 0 {
			ret make([]T, 0)
		}
		r = make([]T, nor1(int(math::Ceil(f64((stop-start)/step)))))
	} else {
		if step > 0 {
			ret make([]T, 0)
		}
		r = make([]T, nor1(int(math::Ceil(f64((start-stop)/-step)))))
	}
	for i in r {
		r[i] = start
		start += step
	}
	ret r
}

// Makes n guaranteed to be n > 0.
fn nor1(n: int): int {
	if n > 0 {
		ret n
	}
	ret 1
}