// Copyright 2025 mertcandav.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/math/big"

struct seqFactorial {
	mut n: i64 // n!
	mut z: big::Int
}

impl Seq for seqFactorial {
	fn Reset(*self) {
		self.z = big::Int.FromI64(0)
		self.n = 0
	}

	fn Next(*self): big::Int {
		if self.n == 0 { // 0! = 1
			self.z = big::Int.FromI64(1)
		} else {
			self.z = self.z.Mul(big::Int.FromI64(self.n))
		}
		self.n++
		ret self.z
	}
}

// Returns a sequence representing factorials from 0!, then 1!, 2!, and so on.
fn Factorial(): Seq {
	ret new(seqFactorial)
}