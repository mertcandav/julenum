// Copyright 2025 mertcandav.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/math/big"

struct seqCube {
	mut n: big::Int
}

impl Seq for seqCube {
	fn Reset(*self) {
		self.n = big::Int.FromI64(1)
	}

	fn Next(*self): big::Int {
		result := self.n.Exp(big::Int.FromI64(3)) // n続
		self.n = self.n.Add(big::Int.FromI64(1))  // n++
		ret result
	}
}

// Returns a sequence representing cube numbers from 1続, then 2続, 3続, and so on.
fn Cube(): Seq {
	mut seq := new(seqCube)
	seq.Reset()
	ret seq
}