// Copyright 2025 mertcandav.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/math/big"
use "std/testing"

fn testSeq(t: &testing::T, name: str, seq: Seq, wantseq: []i64) {
	for i, want in wantseq {
		got := seq.Next()
		if got.Cmp(big::Int.FromI64(want)) != 0 {
			t.Errorf("{}: sequence value {} = {}, expected {}", name, i, got.Str(), want)
		}
	}
}

#test
fn testPowerOfTwo(t: &testing::T) {
	wantseq := []i64([1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048])
	testSeq(t, "PowerOfTwo", PowerOfTwo(), wantseq)
}

#test
fn testFactorial(t: &testing::T) {
	wantseq := []i64([1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800, 39916800, 479001600])
	testSeq(t, "Factorial", Factorial(), wantseq)
}

#test
fn testFibonacci(t: &testing::T) {
	wantseq := []i64([0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181])
	testSeq(t, "Fibonacci", Fibonacci(), wantseq)
}

#test
fn testTriangular(t: &testing::T) {
	wantseq := []i64([1, 3, 6, 10, 15, 21, 28, 36, 45, 55, 66, 78, 91, 105, 120, 136, 153, 171, 190, 210, 231])
	testSeq(t, "Triangular", Triangular(), wantseq)
}

#test
fn testCube(t: &testing::T) {
	wantseq := []i64([1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331, 1728, 2197, 2744, 3375])
	testSeq(t, "Cube", Cube(), wantseq)
}

#test
fn testSquare(t: &testing::T) {
	wantseq := []i64([1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225])
	testSeq(t, "Square", Square(), wantseq)
}