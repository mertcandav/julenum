// Copyright 2025 mertcandav.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/math/big"

struct seqCatalan {
	mut n: big::Int
}

impl Seq for seqCatalan {
	fn Reset(*self) {
		self.n = big::Int.FromI64(0)
	}

	fn Next(*self): big::Int {
		factN := factorial(self.n) // n!

		// (n+1)! = (n+1) * n!
		nPlus1 := self.n.Add(big::Int.FromI64(1))
		factNPlus1 := nPlus1.Mul(factN)

		// (2n)! = n! * (n+1) * (n+2) * ... * (2n)
		mut fact2N := factN
		mut i := nPlus1
		for i.Cmp(self.n.Mul(big::Int.FromI64(2))) <= 0; i = i.Add(big::Int.FromI64(1)) {
			fact2N = fact2N.Mul(i)
		}

		denom := factNPlus1.Mul(factN)
		catalan := fact2N.Div(denom)

		self.n = self.n.Add(big::Int.FromI64(1)) // n++

		ret catalan
	}
}

fn factorial(n: big::Int): big::Int {
	one := big::Int.FromI64(1)
	mut result := one
	mut i := n
	for i.Sign() > 0 {
		result = result.Mul(i)
		i = i.Sub(one)
	}
	ret result
}

// Returns a sequence representing catalan numbers from C₀, then C₁, C₂, and so on.
fn Catalan(): Seq {
	ret new(seqCatalan)
}