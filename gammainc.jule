// Copyright 2025 mertcandav.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// Implementation derived from the gonum.
//
// Copyright ©2016 The Gonum Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

use "std/math"

// Computes the regularized incomplete Gamma integral.
//
//	GammaIncReg(a,x) = (1/ Γ(a)) \int_0^x e^{-t} t^{a-1} dt
//
// The input argument a must be positive and x must be non-negative or it will panic.
//
// See http://mathworld.wolfram.com/IncompleteGammaFunction.html
// or https://en.wikipedia.org/wiki/Incomplete_gamma_function for more detailed
// information.
fn GammaIncReg(a: f64, x: f64): f64 {
	ret _Igam(a, x)
}

// Computes the complemented regularized incomplete Gamma integral.
//
//	GammaIncRegComp(a,x) = 1 - GammaIncReg(a,x)
//	                     = (1/ Γ(a)) \int_x^\infty e^{-t} t^{a-1} dt
//
// The input argument a must be positive and x must be non-negative or it will panic.
fn GammaIncRegComp(a: f64, x: f64): f64 {
	ret _IgamC(a, x)
}

// Computes the inverse of the regularized incomplete Gamma integral. That is,
// it returns the x such that:
//
//	GammaIncReg(a, x) = y
//
// The input argument a must be positive and y must be between 0 and 1
// inclusive or it will panic. It should return a positive
// number, but can return NaN if there is a failure to converge.
fn GammaIncRegInv(a: f64, y: f64): f64 {
	ret gammaIncRegInv(a, y)
}

// Computes the inverse of the complemented regularized incomplete Gamma
// integral. That is, it returns the x such that:
//
//	GammaIncRegComp(a, x) = y
//
// The input argument a must be positive and y must be between 0 and 1
// inclusive or it will panic. It should return a
// positive number, but can return 0 even with non-zero y due to underflow.
fn GammaIncRegCompInv(a: f64, y: f64): f64 {
	ret _IgamI(a, y)
}