import{_ as a,c as n,o as e,ah as l}from"./chunks/framework.CvtUal3J.js";const d=JSON.parse('{"title":"julenum/vec","description":"","frontmatter":{},"headers":[],"relativePath":"api/vec.md","filePath":"api/vec.md"}'),o={name:"api/vec.md"};function p(r,s,t,c,F,i){return e(),n("div",null,s[0]||(s[0]=[l(`<h1 id="julenum-vec" tabindex="-1">julenum/vec <a class="header-anchor" href="#julenum-vec" aria-label="Permalink to “julenum/vec”">​</a></h1><p>Package for vectors.</p><h2 id="index" tabindex="-1">Index <a class="header-anchor" href="#index" aria-label="Permalink to “Index”">​</a></h2><p><a href="#vector3">struct Vector3</a><br>     <a href="#add">fn Add(mut *self, &amp;x: *Vector3, &amp;y: *Vector3)</a><br>     <a href="#sub">fn Sub(mut *self, &amp;x: *Vector3, &amp;y: *Vector3)</a><br>     <a href="#dot">fn Dot(*self, &amp;y: *Vector3): f64</a><br>     <a href="#scale">fn Scale(mut *self, &amp;x: *Vector3, k: f64)</a><br>     <a href="#cross">fn Cross(mut *self, &amp;x: *Vector3, &amp;y: *Vector3)</a><br>     <a href="#norm">fn Norm(*self): f64</a><br>     <a href="#normalize">fn Normalize(mut *self, &amp;x: *Vector3)</a><br>     <a href="#anglebetween">fn AngleBetween(*self, &amp;y: *Vector3): f64</a><br>     <a href="#rotatequat">fn RotateQuat(mut *self, &amp;x: *Vector3, mut q: quat::Quat)</a><br>     <a href="#proj">fn Proj(mut *self, &amp;x: *Vector3, &amp;y: *Vector3)</a><br><a href="#vector2">struct Vector2</a><br>     <a href="#add-1">fn Add(mut *self, &amp;x: *Vector2, &amp;y: *Vector2)</a><br>     <a href="#sub-1">fn Sub(mut *self, &amp;x: *Vector2, &amp;y: *Vector2)</a><br>     <a href="#dot-1">fn Dot(*self, &amp;y: *Vector2): f64</a><br>     <a href="#scale-1">fn Scale(mut *self, &amp;x: *Vector2, k: f64)</a><br>     <a href="#cross-1">fn Cross(*self, &amp;x: *Vector2): f64</a><br>     <a href="#norm-1">fn Norm(*self): f64</a><br>     <a href="#normalize-1">fn Normalize(mut *self, &amp;x: *Vector2)</a><br>     <a href="#anglebetween-1">fn AngleBetween(*self, &amp;y: *Vector2): f64</a><br>     <a href="#rotate">fn Rotate(mut *self, &amp;x: *Vector2, theta: f64)</a><br>     <a href="#proj-1">fn Proj(mut *self, &amp;x: *Vector2, &amp;y: *Vector2)</a><br><a href="#vector">type Vector[T</a><br>     <a href="#add-2">fn Add(mut *self, &amp;x: *Vector[T], &amp;y: *Vector[T])</a><br>     <a href="#sub-2">fn Sub(mut *self, &amp;x: *Vector[T], &amp;y: *Vector[T])</a><br>     <a href="#dot-2">fn Dot(*self, &amp;y: *Vector[T]): T</a><br>     <a href="#scale-2">fn Scale(mut *self, &amp;x: *Vector[T], k: f64)</a><br>     <a href="#norm-2">fn Norm(*self): f64</a><br>     <a href="#normalize-2">fn Normalize(mut *self, &amp;x: *Vector[T])</a><br>     <a href="#anglebetween-2">fn AngleBetween(*self, &amp;y: *Vector[T]): f64</a><br>     <a href="#proj-2">fn Proj(mut *self, &amp;x: *Vector[T], &amp;y: *Vector[T])</a></p><h2 id="vector3" tabindex="-1">Vector3 <a class="header-anchor" href="#vector3" aria-label="Permalink to “Vector3”">​</a></h2><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki dracula-soft" style="background-color:#0000000;" tabindex="0"><code><span class="line"><span style="color:#F286C4;">struct</span><span style="color:#F6F6F4;"> Vector3 {</span></span>
<span class="line"><span style="color:#F6F6F4;">	X</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">f64</span></span>
<span class="line"><span style="color:#F6F6F4;">	Y</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">f64</span></span>
<span class="line"><span style="color:#F6F6F4;">	Z</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">f64</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>3D vector.</p><h3 id="add" tabindex="-1">Add <a class="header-anchor" href="#add" aria-label="Permalink to “Add”">​</a></h3><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki dracula-soft" style="background-color:#0000000;" tabindex="0"><code><span class="line"><span style="color:#F286C4;">fn</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Add</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">mut</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">*self</span><span style="color:#F6F6F4;">, </span><span style="color:#F286C4;">&amp;</span><span style="color:#F6F6F4;">x</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;">Vector3, </span><span style="color:#F286C4;">&amp;</span><span style="color:#F6F6F4;">y</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;">Vector3)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Sets self to the sum x+y.</p><h3 id="sub" tabindex="-1">Sub <a class="header-anchor" href="#sub" aria-label="Permalink to “Sub”">​</a></h3><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki dracula-soft" style="background-color:#0000000;" tabindex="0"><code><span class="line"><span style="color:#F286C4;">fn</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Sub</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">mut</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">*self</span><span style="color:#F6F6F4;">, </span><span style="color:#F286C4;">&amp;</span><span style="color:#F6F6F4;">x</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;">Vector3, </span><span style="color:#F286C4;">&amp;</span><span style="color:#F6F6F4;">y</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;">Vector3)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Sets self to the difference x-y.</p><h3 id="dot" tabindex="-1">Dot <a class="header-anchor" href="#dot" aria-label="Permalink to “Dot”">​</a></h3><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki dracula-soft" style="background-color:#0000000;" tabindex="0"><code><span class="line"><span style="color:#F286C4;">fn</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Dot</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">*self</span><span style="color:#F6F6F4;">, </span><span style="color:#F286C4;">&amp;</span><span style="color:#F6F6F4;">y</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;">Vector3)</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">f64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the dot product self*y.</p><h3 id="scale" tabindex="-1">Scale <a class="header-anchor" href="#scale" aria-label="Permalink to “Scale”">​</a></h3><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki dracula-soft" style="background-color:#0000000;" tabindex="0"><code><span class="line"><span style="color:#F286C4;">fn</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Scale</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">mut</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">*self</span><span style="color:#F6F6F4;">, </span><span style="color:#F286C4;">&amp;</span><span style="color:#F6F6F4;">x</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;">Vector3, k</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">f64</span><span style="color:#F6F6F4;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Sets self to to x scaled by k.</p><h3 id="cross" tabindex="-1">Cross <a class="header-anchor" href="#cross" aria-label="Permalink to “Cross”">​</a></h3><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki dracula-soft" style="background-color:#0000000;" tabindex="0"><code><span class="line"><span style="color:#F286C4;">fn</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Cross</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">mut</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">*self</span><span style="color:#F6F6F4;">, </span><span style="color:#F286C4;">&amp;</span><span style="color:#F6F6F4;">x</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;">Vector3, </span><span style="color:#F286C4;">&amp;</span><span style="color:#F6F6F4;">y</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;">Vector3)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Sets self to the cross product x*y of two vectors (3D cross product).</p><h3 id="norm" tabindex="-1">Norm <a class="header-anchor" href="#norm" aria-label="Permalink to “Norm”">​</a></h3><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki dracula-soft" style="background-color:#0000000;" tabindex="0"><code><span class="line"><span style="color:#F286C4;">fn</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Norm</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">*self</span><span style="color:#F6F6F4;">)</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">f64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns norm (length) of vector.</p><h3 id="normalize" tabindex="-1">Normalize <a class="header-anchor" href="#normalize" aria-label="Permalink to “Normalize”">​</a></h3><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki dracula-soft" style="background-color:#0000000;" tabindex="0"><code><span class="line"><span style="color:#F286C4;">fn</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Normalize</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">mut</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">*self</span><span style="color:#F6F6F4;">, </span><span style="color:#F286C4;">&amp;</span><span style="color:#F6F6F4;">x</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;">Vector3)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Sets self to the unit vector (vector with norm 1) in the same direction as x. If the vector x has zero norm, it returns the zero vector (0, 0, 0) to avoid division by zero.</p><h3 id="anglebetween" tabindex="-1">AngleBetween <a class="header-anchor" href="#anglebetween" aria-label="Permalink to “AngleBetween”">​</a></h3><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki dracula-soft" style="background-color:#0000000;" tabindex="0"><code><span class="line"><span style="color:#F286C4;">fn</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">AngleBetween</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">*self</span><span style="color:#F6F6F4;">, </span><span style="color:#F286C4;">&amp;</span><span style="color:#F6F6F4;">y</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;">Vector3)</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">f64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the angle in radians between self and y vectors.</p><h3 id="rotatequat" tabindex="-1">RotateQuat <a class="header-anchor" href="#rotatequat" aria-label="Permalink to “RotateQuat”">​</a></h3><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki dracula-soft" style="background-color:#0000000;" tabindex="0"><code><span class="line"><span style="color:#F286C4;">fn</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">RotateQuat</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">mut</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">*self</span><span style="color:#F6F6F4;">, </span><span style="color:#F286C4;">&amp;</span><span style="color:#F6F6F4;">x</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;">Vector3, </span><span style="color:#F286C4;">mut</span><span style="color:#F6F6F4;"> q</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> quat</span><span style="color:#F286C4;">::</span><span style="color:#F6F6F4;">Quat)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Sets self to the x vector rotated by quaternion q.</p><h3 id="proj" tabindex="-1">Proj <a class="header-anchor" href="#proj" aria-label="Permalink to “Proj”">​</a></h3><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki dracula-soft" style="background-color:#0000000;" tabindex="0"><code><span class="line"><span style="color:#F286C4;">fn</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Proj</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">mut</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">*self</span><span style="color:#F6F6F4;">, </span><span style="color:#F286C4;">&amp;</span><span style="color:#F6F6F4;">x</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;">Vector3, </span><span style="color:#F286C4;">&amp;</span><span style="color:#F6F6F4;">y</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;">Vector3)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Sets self to projection of vector x onto y. If the vector y has zero norm, it returns the zero vector (0, 0, 0) to avoid division by zero.</p><h2 id="vector2" tabindex="-1">Vector2 <a class="header-anchor" href="#vector2" aria-label="Permalink to “Vector2”">​</a></h2><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki dracula-soft" style="background-color:#0000000;" tabindex="0"><code><span class="line"><span style="color:#F286C4;">struct</span><span style="color:#F6F6F4;"> Vector2 {</span></span>
<span class="line"><span style="color:#F6F6F4;">	X</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">f64</span></span>
<span class="line"><span style="color:#F6F6F4;">	Y</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">f64</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>2D vector.</p><h3 id="add-1" tabindex="-1">Add <a class="header-anchor" href="#add-1" aria-label="Permalink to “Add”">​</a></h3><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki dracula-soft" style="background-color:#0000000;" tabindex="0"><code><span class="line"><span style="color:#F286C4;">fn</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Add</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">mut</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">*self</span><span style="color:#F6F6F4;">, </span><span style="color:#F286C4;">&amp;</span><span style="color:#F6F6F4;">x</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;">Vector2, </span><span style="color:#F286C4;">&amp;</span><span style="color:#F6F6F4;">y</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;">Vector2)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Sets self to the sum x+y.</p><h3 id="sub-1" tabindex="-1">Sub <a class="header-anchor" href="#sub-1" aria-label="Permalink to “Sub”">​</a></h3><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki dracula-soft" style="background-color:#0000000;" tabindex="0"><code><span class="line"><span style="color:#F286C4;">fn</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Sub</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">mut</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">*self</span><span style="color:#F6F6F4;">, </span><span style="color:#F286C4;">&amp;</span><span style="color:#F6F6F4;">x</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;">Vector2, </span><span style="color:#F286C4;">&amp;</span><span style="color:#F6F6F4;">y</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;">Vector2)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Sets self to the difference x-y.</p><h3 id="dot-1" tabindex="-1">Dot <a class="header-anchor" href="#dot-1" aria-label="Permalink to “Dot”">​</a></h3><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki dracula-soft" style="background-color:#0000000;" tabindex="0"><code><span class="line"><span style="color:#F286C4;">fn</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Dot</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">*self</span><span style="color:#F6F6F4;">, </span><span style="color:#F286C4;">&amp;</span><span style="color:#F6F6F4;">y</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;">Vector2)</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">f64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the dot product self*y.</p><h3 id="scale-1" tabindex="-1">Scale <a class="header-anchor" href="#scale-1" aria-label="Permalink to “Scale”">​</a></h3><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki dracula-soft" style="background-color:#0000000;" tabindex="0"><code><span class="line"><span style="color:#F286C4;">fn</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Scale</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">mut</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">*self</span><span style="color:#F6F6F4;">, </span><span style="color:#F286C4;">&amp;</span><span style="color:#F6F6F4;">x</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;">Vector2, k</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">f64</span><span style="color:#F6F6F4;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Sets self to to x scaled by k.</p><h3 id="cross-1" tabindex="-1">Cross <a class="header-anchor" href="#cross-1" aria-label="Permalink to “Cross”">​</a></h3><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki dracula-soft" style="background-color:#0000000;" tabindex="0"><code><span class="line"><span style="color:#F286C4;">fn</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Cross</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">*self</span><span style="color:#F6F6F4;">, </span><span style="color:#F286C4;">&amp;</span><span style="color:#F6F6F4;">x</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;">Vector2)</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">f64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the scalar cross product of two vectors (2D cross product).</p><h3 id="norm-1" tabindex="-1">Norm <a class="header-anchor" href="#norm-1" aria-label="Permalink to “Norm”">​</a></h3><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki dracula-soft" style="background-color:#0000000;" tabindex="0"><code><span class="line"><span style="color:#F286C4;">fn</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Norm</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">*self</span><span style="color:#F6F6F4;">)</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">f64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns norm (length) of vector.</p><h3 id="normalize-1" tabindex="-1">Normalize <a class="header-anchor" href="#normalize-1" aria-label="Permalink to “Normalize”">​</a></h3><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki dracula-soft" style="background-color:#0000000;" tabindex="0"><code><span class="line"><span style="color:#F286C4;">fn</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Normalize</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">mut</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">*self</span><span style="color:#F6F6F4;">, </span><span style="color:#F286C4;">&amp;</span><span style="color:#F6F6F4;">x</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;">Vector2)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Sets self to the unit vector (vector with norm 1) in the same direction as x. If the vector x has zero norm, it returns the zero vector (0, 0) to avoid division by zero.</p><h3 id="anglebetween-1" tabindex="-1">AngleBetween <a class="header-anchor" href="#anglebetween-1" aria-label="Permalink to “AngleBetween”">​</a></h3><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki dracula-soft" style="background-color:#0000000;" tabindex="0"><code><span class="line"><span style="color:#F286C4;">fn</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">AngleBetween</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">*self</span><span style="color:#F6F6F4;">, </span><span style="color:#F286C4;">&amp;</span><span style="color:#F6F6F4;">y</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;">Vector2)</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">f64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the angle in radians between self and y vectors.</p><h3 id="rotate" tabindex="-1">Rotate <a class="header-anchor" href="#rotate" aria-label="Permalink to “Rotate”">​</a></h3><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki dracula-soft" style="background-color:#0000000;" tabindex="0"><code><span class="line"><span style="color:#F286C4;">fn</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Rotate</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">mut</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">*self</span><span style="color:#F6F6F4;">, </span><span style="color:#F286C4;">&amp;</span><span style="color:#F6F6F4;">x</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;">Vector2, theta</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">f64</span><span style="color:#F6F6F4;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Sets self to the x vector rotated by theta radians.</p><h3 id="proj-1" tabindex="-1">Proj <a class="header-anchor" href="#proj-1" aria-label="Permalink to “Proj”">​</a></h3><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki dracula-soft" style="background-color:#0000000;" tabindex="0"><code><span class="line"><span style="color:#F286C4;">fn</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Proj</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">mut</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">*self</span><span style="color:#F6F6F4;">, </span><span style="color:#F286C4;">&amp;</span><span style="color:#F6F6F4;">x</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;">Vector2, </span><span style="color:#F286C4;">&amp;</span><span style="color:#F6F6F4;">y</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;">Vector2)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Sets self to projection of vector x onto y. If the vector y has zero norm, it returns the zero vector (0, 0) to avoid division by zero.</p><h2 id="vector" tabindex="-1">Vector <a class="header-anchor" href="#vector" aria-label="Permalink to “Vector”">​</a></h2><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki dracula-soft" style="background-color:#0000000;" tabindex="0"><code><span class="line"><span style="color:#F286C4;">type</span><span style="color:#F6F6F4;"> Vector[T</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> integer </span><span style="color:#F286C4;">|</span><span style="color:#F6F6F4;"> float]</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> []T</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>General vector type for type T.</p><h3 id="add-2" tabindex="-1">Add <a class="header-anchor" href="#add-2" aria-label="Permalink to “Add”">​</a></h3><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki dracula-soft" style="background-color:#0000000;" tabindex="0"><code><span class="line"><span style="color:#BF9EEE;">#disable</span><span style="color:#F6F6F4;"> boundary</span></span>
<span class="line"><span style="color:#F286C4;">fn</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Add</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">mut</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">*self</span><span style="color:#F6F6F4;">, </span><span style="color:#F286C4;">&amp;</span><span style="color:#F6F6F4;">x</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;">Vector[T], </span><span style="color:#F286C4;">&amp;</span><span style="color:#F6F6F4;">y</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;">Vector[T])</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Sets self to the sum x+y. x any y must have same length.</p><p>If self have enough capacity, Add will use it to avoid making allocation. If length is zero, self will be zero-length. But keeps internal allocation.</p><h3 id="sub-2" tabindex="-1">Sub <a class="header-anchor" href="#sub-2" aria-label="Permalink to “Sub”">​</a></h3><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki dracula-soft" style="background-color:#0000000;" tabindex="0"><code><span class="line"><span style="color:#BF9EEE;">#disable</span><span style="color:#F6F6F4;"> boundary</span></span>
<span class="line"><span style="color:#F286C4;">fn</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Sub</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">mut</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">*self</span><span style="color:#F6F6F4;">, </span><span style="color:#F286C4;">&amp;</span><span style="color:#F6F6F4;">x</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;">Vector[T], </span><span style="color:#F286C4;">&amp;</span><span style="color:#F6F6F4;">y</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;">Vector[T])</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Sets self to the difference x-y. x any y must have same length.</p><p>If self have enough capacity, Sub will use it to avoid making allocation. If length is zero, self will be zero-length. But keeps internal allocation.</p><h3 id="dot-2" tabindex="-1">Dot <a class="header-anchor" href="#dot-2" aria-label="Permalink to “Dot”">​</a></h3><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki dracula-soft" style="background-color:#0000000;" tabindex="0"><code><span class="line"><span style="color:#F286C4;">fn</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Dot</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">*self</span><span style="color:#F6F6F4;">, </span><span style="color:#F286C4;">&amp;</span><span style="color:#F6F6F4;">y</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;">Vector[T])</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> T</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the dot product self*y. self any y must have same length. Returns zero if length is zero.</p><h3 id="scale-2" tabindex="-1">Scale <a class="header-anchor" href="#scale-2" aria-label="Permalink to “Scale”">​</a></h3><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki dracula-soft" style="background-color:#0000000;" tabindex="0"><code><span class="line"><span style="color:#BF9EEE;">#disable</span><span style="color:#F6F6F4;"> boundary</span></span>
<span class="line"><span style="color:#F286C4;">fn</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Scale</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">mut</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">*self</span><span style="color:#F6F6F4;">, </span><span style="color:#F286C4;">&amp;</span><span style="color:#F6F6F4;">x</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;">Vector[T], k</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">f64</span><span style="color:#F6F6F4;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Sets self to to x scaled by k.</p><p>If self have enough capacity, Normalize will use it to avoid making allocation. If length is zero, self will be zero-length. But keeps internal allocation.</p><h3 id="norm-2" tabindex="-1">Norm <a class="header-anchor" href="#norm-2" aria-label="Permalink to “Norm”">​</a></h3><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki dracula-soft" style="background-color:#0000000;" tabindex="0"><code><span class="line"><span style="color:#F286C4;">fn</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Norm</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">*self</span><span style="color:#F6F6F4;">)</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">f64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns norm (length) of vector.</p><h3 id="normalize-2" tabindex="-1">Normalize <a class="header-anchor" href="#normalize-2" aria-label="Permalink to “Normalize”">​</a></h3><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki dracula-soft" style="background-color:#0000000;" tabindex="0"><code><span class="line"><span style="color:#BF9EEE;">#disable</span><span style="color:#F6F6F4;"> boundary</span></span>
<span class="line"><span style="color:#F286C4;">fn</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Normalize</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">mut</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">*self</span><span style="color:#F6F6F4;">, </span><span style="color:#F286C4;">&amp;</span><span style="color:#F6F6F4;">x</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;">Vector[T])</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Sets self to the unit vector (vector with norm 1) in the same direction as x. If the vector x has zero norm, it returns the zero vector (x₁=0, x₂=0, ..., xₙ=0) to avoid division by zero.</p><p>If self have enough capacity, Normalize will use it to avoid making allocation. If length is zero, self will be zero-length. But keeps internal allocation.</p><h3 id="anglebetween-2" tabindex="-1">AngleBetween <a class="header-anchor" href="#anglebetween-2" aria-label="Permalink to “AngleBetween”">​</a></h3><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki dracula-soft" style="background-color:#0000000;" tabindex="0"><code><span class="line"><span style="color:#F286C4;">fn</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">AngleBetween</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">*self</span><span style="color:#F6F6F4;">, </span><span style="color:#F286C4;">&amp;</span><span style="color:#F6F6F4;">y</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;">Vector[T])</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">f64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Returns the angle in radians between self and y vectors. self any y must have same length.</p><h3 id="proj-2" tabindex="-1">Proj <a class="header-anchor" href="#proj-2" aria-label="Permalink to “Proj”">​</a></h3><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki dracula-soft" style="background-color:#0000000;" tabindex="0"><code><span class="line"><span style="color:#BF9EEE;">#disable</span><span style="color:#F6F6F4;"> boundary</span></span>
<span class="line"><span style="color:#F286C4;">fn</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Proj</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">mut</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">*self</span><span style="color:#F6F6F4;">, </span><span style="color:#F286C4;">&amp;</span><span style="color:#F6F6F4;">x</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;">Vector[T], </span><span style="color:#F286C4;">&amp;</span><span style="color:#F6F6F4;">y</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;">Vector[T])</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Sets self to projection of vector x onto y. x any y must have same length. If the vector y has zero norm, it returns the zero vector (x₁=0, x₂=0, ..., xₙ=0) to avoid division by zero.</p><p>If self have enough capacity, Normalize will use it to avoid making allocation. If length is zero, self will be zero-length. But keeps internal allocation.</p>`,102)]))}const u=a(o,[["render",p]]);export{d as __pageData,u as default};
