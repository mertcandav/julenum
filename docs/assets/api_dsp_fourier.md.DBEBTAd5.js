import{_ as s,c as a,o as n,ah as l}from"./chunks/framework._fWrWIYU.js";const d=JSON.parse('{"title":"julenum/dsp/fourier","description":"","frontmatter":{},"headers":[],"relativePath":"api/dsp/fourier.md","filePath":"api/dsp/fourier.md"}'),o={name:"api/dsp/fourier.md"};function r(t,e,p,i,c,F){return n(),a("div",null,e[0]||(e[0]=[l('<h1 id="julenum-dsp-fourier" tabindex="-1">julenum/dsp/fourier <a class="header-anchor" href="#julenum-dsp-fourier" aria-label="Permalink to “julenum/dsp/fourier”">​</a></h1><p>Package for Discrete Fourier Transform (DFT).</p><h2 id="index" tabindex="-1">Index <a class="header-anchor" href="#index" aria-label="Permalink to “Index”">​</a></h2><p><a href="#fft">fn FFT(mut a: []cmplx128, invert: bool)</a><br><a href="#fusefft">fn FuseFFT(mut a: []cmplx128, mut b: []cmplx128, invert: bool)</a></p><h2 id="fft" tabindex="-1">FFT <a class="header-anchor" href="#fft" aria-label="Permalink to “FFT”">​</a></h2><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki dracula-soft" style="background-color:#0000000;" tabindex="0"><code><span class="line"><span style="color:#F286C4;">fn</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">FFT</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">mut</span><span style="color:#F6F6F4;"> a</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> []</span><span style="color:#F286C4;">cmplx128</span><span style="color:#F6F6F4;">, invert</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">bool</span><span style="color:#F6F6F4;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Computes the discrete Fourier transform (DFT) of the given complex-valued slice using the in-place Cooley–Tukey radix-2 algorithm.</p><p>If invert is true, it computes the inverse FFT (IFFT) instead. The input length must be a power of two; otherwise, the behavior is undefined.</p><p>This function modifies the input slice in-place. For inverse FFT, results are scaled by 1/len.</p><h2 id="fusefft" tabindex="-1">FuseFFT <a class="header-anchor" href="#fusefft" aria-label="Permalink to “FuseFFT”">​</a></h2><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki dracula-soft" style="background-color:#0000000;" tabindex="0"><code><span class="line"><span style="color:#F286C4;">fn</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">FuseFFT</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">mut</span><span style="color:#F6F6F4;"> a</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> []</span><span style="color:#F286C4;">cmplx128</span><span style="color:#F6F6F4;">, </span><span style="color:#F286C4;">mut</span><span style="color:#F6F6F4;"> b</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> []</span><span style="color:#F286C4;">cmplx128</span><span style="color:#F6F6F4;">, invert</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">bool</span><span style="color:#F6F6F4;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Computes the discrete Fourier transform (DFT) of the given complex-valued slices using the in-place Cooley–Tukey radix-2 algorithm.</p><p>Computes FFT for a and b, this is efficient than calling FFT for a and b separately;<br></p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft" style="background-color:#0000000;" tabindex="0"><code><span class="line"><span style="color:#f6f6f4;">{ FFT(a, invert); FFT(b, invert) } == FuseFFT(a, b, invert)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>If invert is true, it computes the inverse FFT (IFFT) instead. Length of the input slices must be equal and a power of two; otherwise, the behavior is undefined.</p><p>This function modifies the input slices in-place. For inverse FFT, results are scaled by 1/len.</p>',16)]))}const f=s(o,[["render",r]]);export{d as __pageData,f as default};
