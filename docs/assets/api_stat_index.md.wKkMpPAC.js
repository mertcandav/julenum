import{_ as a,c as e,o as n,ah as l}from"./chunks/framework.CvtUal3J.js";const u=JSON.parse('{"title":"julenum/stat","description":"","frontmatter":{},"headers":[],"relativePath":"api/stat/index.md","filePath":"api/stat/index.md"}'),o={name:"api/stat/index.md"};function p(t,s,r,i,c,d){return n(),e("div",null,s[0]||(s[0]=[l(`<h1 id="julenum-stat" tabindex="-1">julenum/stat <a class="header-anchor" href="#julenum-stat" aria-label="Permalink to “julenum/stat”">​</a></h1><p>Package for statistics.</p><h2 id="index" tabindex="-1">Index <a class="header-anchor" href="#index" aria-label="Permalink to “Index”">​</a></h2><p><a href="#chisquare">fn ChiSquare[T: float](obs: []T, exp: []T): f64</a><br><a href="#chisquaredistance">fn ChiSquareDistance[T: float](x: []T, y: []T): f64</a><br><a href="#mean">fn Mean[T: integer | float](x: []T, weights: []T): f64</a><br><a href="#geometricmean">fn GeometricMean[T: integer | float](x: []T, weights: []T): f64</a><br><a href="#harmonicmean">fn HarmonicMean[T: integer | float](x: []T, weights: []T): f64</a><br><a href="#rootmeansquare">fn RootMeanSquare[T: integer | float](x: []T, weights: []T): f64</a><br><a href="#circularmean">fn CircularMean[T: integer | float](x: []T, weights: []T): f64</a><br><a href="#median">fn Median[T: integer | float](x: []T): f64</a><br><a href="#medianinplace">fn MedianInPlace[T: integer | float](mut x: []T): f64</a><br><a href="#correlation">fn Correlation[T: integer | float](x: []T, y: []T, weights: []T): f64</a><br><a href="#meanvariance">fn MeanVariance[T: integer | float](x: []T, weights: []T): (f64, f64)</a><br><a href="#variance">fn Variance[T: integer | float](x: []T, weights: []T): f64</a><br><a href="#covariance">fn Covariance[T: integer | float](x: []T, y: []T, weights: []T): f64</a><br><a href="#entropy">fn Entropy[T: integer | float](p: []T): f64</a><br><a href="#crossentropy">fn CrossEntropy[T: integer | float](p: []T, q: []T): f64</a><br><a href="#euclideandistance">fn EuclideanDistance[T: integer | float](p1: []T, p2: []T): f64</a><br><a href="#sigmoid">fn Sigmoid[T: integer | float](x: T): f64</a><br><a href="#linearregression">fn LinearRegression[T: integer | float](x: []T, y: []T, weights: []T, origin: bool): (alpha: f64, beta: f64)</a><br><a href="#stddev">fn StdDev[T: integer | float](x: []T, weights: []T): f64</a><br><a href="#stderr">fn StdErr(stdDev: f64, sampleSize: f64): f64</a><br><a href="#stdscore">fn StdScore(x: f64, mean: f64, stdDev: f64): f64</a><br><a href="#mode">fn Mode[T: integer | float](x: []T, weights: []T): (val: f64, count: f64)</a><br><a href="#bayes">fn Bayes[T: float](prior: T, likelihood: T, evidence: T): T</a></p><h2 id="chisquare" tabindex="-1">ChiSquare <a class="header-anchor" href="#chisquare" aria-label="Permalink to “ChiSquare”">​</a></h2><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki dracula-soft" style="background-color:#0000000;" tabindex="0"><code><span class="line"><span style="color:#BF9EEE;">#disable</span><span style="color:#F6F6F4;"> boundary</span></span>
<span class="line"><span style="color:#F286C4;">fn</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">ChiSquare</span><span style="color:#F6F6F4;">[T</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> float](obs</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> []T, exp</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> []T)</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">f64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Computes the chi-square statistic between two vectors: observed and expected. The lengths of obs and exp must be equal, otherwise it panics.</p><p>Mathematically, the chi-square statistic is defined as:<br></p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft" style="background-color:#0000000;" tabindex="0"><code><span class="line"><span style="color:#f6f6f4;">χ² = Σᵢ [ (Oᵢ - Eᵢ)² / Eᵢ ]</span></span>
<span class="line"><span style="color:#f6f6f4;">where:</span></span>
<span class="line"><span style="color:#f6f6f4;">	Oᵢ = observed value at index i,</span></span>
<span class="line"><span style="color:#f6f6f4;">	Eᵢ = expected value at index i,</span></span>
<span class="line"><span style="color:#f6f6f4;">	and the summation is over all elements.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Computations are performed using 64-bit floating-point precision and result is in the same precision, casting to proper type is responsibility of the developer.</p><h2 id="chisquaredistance" tabindex="-1">ChiSquareDistance <a class="header-anchor" href="#chisquaredistance" aria-label="Permalink to “ChiSquareDistance”">​</a></h2><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki dracula-soft" style="background-color:#0000000;" tabindex="0"><code><span class="line"><span style="color:#BF9EEE;">#disable</span><span style="color:#F6F6F4;"> boundary</span></span>
<span class="line"><span style="color:#F286C4;">fn</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">ChiSquareDistance</span><span style="color:#F6F6F4;">[T</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> float](x</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> []T, y</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> []T)</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">f64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Computes the chi-square distance between two vectors: x and y. The lengths of x and y must be equal, otherwise it panics.</p><p>Mathematically, the chi-square distance is defined as:<br></p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft" style="background-color:#0000000;" tabindex="0"><code><span class="line"><span style="color:#f6f6f4;">χ² = 1/2 * Σᵢ [ (xᵢ - yᵢ)² / (xᵢ + yᵢ) ]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Computations are performed using 64-bit floating-point precision and result is in the same precision, casting to proper type is responsibility of the developer.</p><h2 id="mean" tabindex="-1">Mean <a class="header-anchor" href="#mean" aria-label="Permalink to “Mean”">​</a></h2><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki dracula-soft" style="background-color:#0000000;" tabindex="0"><code><span class="line"><span style="color:#BF9EEE;">#disable</span><span style="color:#F6F6F4;"> boundary</span></span>
<span class="line"><span style="color:#F286C4;">fn</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Mean</span><span style="color:#F6F6F4;">[T</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> integer </span><span style="color:#F286C4;">|</span><span style="color:#F6F6F4;"> float](x</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> []T, weights</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> []T)</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">f64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Computes the weighted mean of the data set x.</p><p>Mathematically, the weighted mean is defined as:<br></p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft" style="background-color:#0000000;" tabindex="0"><code><span class="line"><span style="color:#f6f6f4;">Mean = Σᵢ [ wᵢ * xᵢ ] / Σᵢ [ wᵢ ]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>If len(weights) == 0, then all of the weights are 1. Otherwise len(weights) must be equal to len(x).</p><p>Computations are performed using 64-bit floating-point precision and result is in the same precision, casting to proper type is responsibility of the developer.</p><h2 id="geometricmean" tabindex="-1">GeometricMean <a class="header-anchor" href="#geometricmean" aria-label="Permalink to “GeometricMean”">​</a></h2><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki dracula-soft" style="background-color:#0000000;" tabindex="0"><code><span class="line"><span style="color:#BF9EEE;">#disable</span><span style="color:#F6F6F4;"> boundary</span></span>
<span class="line"><span style="color:#F286C4;">fn</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">GeometricMean</span><span style="color:#F6F6F4;">[T</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> integer </span><span style="color:#F286C4;">|</span><span style="color:#F6F6F4;"> float](x</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> []T, weights</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> []T)</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">f64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Computes the weighted geometric mean of the data set x.</p><p>Mathematically, the weighted geometric mean is defined as:<br></p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft" style="background-color:#0000000;" tabindex="0"><code><span class="line"><span style="color:#f6f6f4;">G = (x₁^w₁ * x₂^w₂ * ... * xₙ^wₙ)^(1 / Σᵢ [ wᵢ ])</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>If len(weights) == 0, then all of the weights are 1. Otherwise len(weights) must be equal to len(x).</p><p>Computations are performed using 64-bit floating-point precision and result is in the same precision, casting to proper type is responsibility of the developer.</p><h2 id="harmonicmean" tabindex="-1">HarmonicMean <a class="header-anchor" href="#harmonicmean" aria-label="Permalink to “HarmonicMean”">​</a></h2><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki dracula-soft" style="background-color:#0000000;" tabindex="0"><code><span class="line"><span style="color:#BF9EEE;">#disable</span><span style="color:#F6F6F4;"> boundary</span></span>
<span class="line"><span style="color:#F286C4;">fn</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">HarmonicMean</span><span style="color:#F6F6F4;">[T</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> integer </span><span style="color:#F286C4;">|</span><span style="color:#F6F6F4;"> float](x</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> []T, weights</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> []T)</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">f64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Computes the weighted harmonic mean of the data set x.</p><p>Mathematically, the weighted harmonic mean is defined as:<br></p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft" style="background-color:#0000000;" tabindex="0"><code><span class="line"><span style="color:#f6f6f4;">H = Σᵢ [ wᵢ ] / Σᵢ [ wᵢ/xᵢ ]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>If len(weights) == 0, then all of the weights are 1. Otherwise len(weights) must be equal to len(x).</p><p>Computations are performed using 64-bit floating-point precision and result is in the same precision, casting to proper type is responsibility of the developer.</p><h2 id="rootmeansquare" tabindex="-1">RootMeanSquare <a class="header-anchor" href="#rootmeansquare" aria-label="Permalink to “RootMeanSquare”">​</a></h2><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki dracula-soft" style="background-color:#0000000;" tabindex="0"><code><span class="line"><span style="color:#BF9EEE;">#disable</span><span style="color:#F6F6F4;"> boundary</span></span>
<span class="line"><span style="color:#F286C4;">fn</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">RootMeanSquare</span><span style="color:#F6F6F4;">[T</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> integer </span><span style="color:#F286C4;">|</span><span style="color:#F6F6F4;"> float](x</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> []T, weights</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> []T)</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">f64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Computes the weighted root mean square of the data set x.</p><p>Mathematically, the weighted root mean square is defined as:<br></p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft" style="background-color:#0000000;" tabindex="0"><code><span class="line"><span style="color:#f6f6f4;">RMS = √(Σᵢ [ wᵢ * xᵢ² ] / Σᵢ [ wᵢ ])</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>If len(weights) == 0, then all of the weights are 1. Otherwise len(weights) must be equal to len(x).</p><p>Computations are performed using 64-bit floating-point precision and result is in the same precision, casting to proper type is responsibility of the developer.</p><h2 id="circularmean" tabindex="-1">CircularMean <a class="header-anchor" href="#circularmean" aria-label="Permalink to “CircularMean”">​</a></h2><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki dracula-soft" style="background-color:#0000000;" tabindex="0"><code><span class="line"><span style="color:#BF9EEE;">#disable</span><span style="color:#F6F6F4;"> boundary</span></span>
<span class="line"><span style="color:#F286C4;">fn</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">CircularMean</span><span style="color:#F6F6F4;">[T</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> integer </span><span style="color:#F286C4;">|</span><span style="color:#F6F6F4;"> float](x</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> []T, weights</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> []T)</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">f64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Computes the weighted circular mean of the data set x.</p><p>Mathematically, the weighted circular mean is defined as:<br></p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft" style="background-color:#0000000;" tabindex="0"><code><span class="line"><span style="color:#f6f6f4;">C = atan2(Σᵢ [ wᵢ * sin(xᵢ) ], Σᵢ [ wᵢ * cos(xᵢ) ])</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>If len(weights) == 0, then all of the weights are 1. Otherwise len(weights) must be equal to len(x).</p><p>Computations are performed using 64-bit floating-point precision and result is in the same precision, casting to proper type is responsibility of the developer.</p><h2 id="median" tabindex="-1">Median <a class="header-anchor" href="#median" aria-label="Permalink to “Median”">​</a></h2><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki dracula-soft" style="background-color:#0000000;" tabindex="0"><code><span class="line"><span style="color:#BF9EEE;">#disable</span><span style="color:#F6F6F4;"> boundary</span></span>
<span class="line"><span style="color:#F286C4;">fn</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Median</span><span style="color:#F6F6F4;">[T</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> integer </span><span style="color:#F286C4;">|</span><span style="color:#F6F6F4;"> float](x</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> []T)</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">f64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Computes the median of the data set x. This function allocates a new copy of x to avoid modifying the original data. If preserving the original data is not necessary or x won&#39;t be used afterward, consider using MedianInPlace for better performance and zero allocation.</p><p>Computations are performed using 64-bit floating-point precision and result is in the same precision, casting to proper type is responsibility of the developer.</p><h2 id="medianinplace" tabindex="-1">MedianInPlace <a class="header-anchor" href="#medianinplace" aria-label="Permalink to “MedianInPlace”">​</a></h2><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki dracula-soft" style="background-color:#0000000;" tabindex="0"><code><span class="line"><span style="color:#F286C4;">fn</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">MedianInPlace</span><span style="color:#F6F6F4;">[T</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> integer </span><span style="color:#F286C4;">|</span><span style="color:#F6F6F4;"> float](</span><span style="color:#F286C4;">mut</span><span style="color:#F6F6F4;"> x</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> []T)</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">f64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Computes the median of the data set x in-place (modifies x). This function mutates the input slice, and its final ordering is undefined. Designed for zero-allocation, memory-efficient use cases. If the original data must be preserved or x will be used afterward, use Median instead.</p><p>Computations are performed using 64-bit floating-point precision and result is in the same precision, casting to proper type is responsibility of the developer.</p><h2 id="correlation" tabindex="-1">Correlation <a class="header-anchor" href="#correlation" aria-label="Permalink to “Correlation”">​</a></h2><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki dracula-soft" style="background-color:#0000000;" tabindex="0"><code><span class="line"><span style="color:#BF9EEE;">#disable</span><span style="color:#F6F6F4;"> boundary</span></span>
<span class="line"><span style="color:#F286C4;">fn</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Correlation</span><span style="color:#F6F6F4;">[T</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> integer </span><span style="color:#F286C4;">|</span><span style="color:#F6F6F4;"> float](x</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> []T, y</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> []T, weights</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> []T)</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">f64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Computes the weighted Pearson correlation coefficient between two data sets x and y. Length of data sets must be equal. Returns 0 if lenghts are zero.</p><p>Mathematically, the weighted Pearson correlation coefficient is defined as:<br></p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft" style="background-color:#0000000;" tabindex="0"><code><span class="line"><span style="color:#f6f6f4;">r_w = Σᵢ [ wᵢ * (xᵢ - x̄_w)(yᵢ - ȳ_w) ] / √(Σᵢ [ wᵢ * (xᵢ - x̄_w)² ]) * √(Σᵢ [ wᵢ * (yᵢ - ȳ_w)² ])</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>If len(weights) == 0, then all of the weights are 1. Otherwise len(weights) must be equal to the data sets lengths.</p><p>Computations are performed using 64-bit floating-point precision and result is in the same precision, casting to proper type is responsibility of the developer.</p><h2 id="meanvariance" tabindex="-1">MeanVariance <a class="header-anchor" href="#meanvariance" aria-label="Permalink to “MeanVariance”">​</a></h2><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki dracula-soft" style="background-color:#0000000;" tabindex="0"><code><span class="line"><span style="color:#F286C4;">fn</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">MeanVariance</span><span style="color:#F6F6F4;">[T</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> integer </span><span style="color:#F286C4;">|</span><span style="color:#F6F6F4;"> float](x</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> []T, weights</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> []T)</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">f64</span><span style="color:#F6F6F4;">, </span><span style="color:#F286C4;">f64</span><span style="color:#F6F6F4;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Computes the weighted mean and the weighted unbiased sample variance of the data set x. This is faster than calling Mean and Variance functions separately.</p><p>Mathematically, the weighted mean is defined as:<br></p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft" style="background-color:#0000000;" tabindex="0"><code><span class="line"><span style="color:#f6f6f4;">Mean = Σᵢ [ wᵢ * xᵢ ] / Σᵢ [ wᵢ ]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Mathematically, the weighted unbiased sample variance is defined as:<br></p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft" style="background-color:#0000000;" tabindex="0"><code><span class="line"><span style="color:#f6f6f4;">var(x) = Σᵢ [ wᵢ * (xᵢ - x̄)² ] / (Σᵢ [ wᵢ ] - 1)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>If len(weights) == 0, then all of the weights are 1. Otherwise len(weights) must be equal to len(x).</p><p>Computations are performed using 64-bit floating-point precision and result is in the same precision, casting to proper type is responsibility of the developer.</p><h2 id="variance" tabindex="-1">Variance <a class="header-anchor" href="#variance" aria-label="Permalink to “Variance”">​</a></h2><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki dracula-soft" style="background-color:#0000000;" tabindex="0"><code><span class="line"><span style="color:#F286C4;">fn</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Variance</span><span style="color:#F6F6F4;">[T</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> integer </span><span style="color:#F286C4;">|</span><span style="color:#F6F6F4;"> float](x</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> []T, weights</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> []T)</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">f64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Computes the weighted unbiased sample variance of the data set x.</p><p>Mathematically, the weighted unbiased sample variance is defined as:<br></p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft" style="background-color:#0000000;" tabindex="0"><code><span class="line"><span style="color:#f6f6f4;">var(x) = Σᵢ [ wᵢ * (xᵢ - x̄)² ] / (Σᵢ [ wᵢ ] - 1)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>If len(weights) == 0, then all of the weights are 1. Otherwise len(weights) must be equal to len(x).</p><p>Computations are performed using 64-bit floating-point precision and result is in the same precision, casting to proper type is responsibility of the developer.</p><h2 id="covariance" tabindex="-1">Covariance <a class="header-anchor" href="#covariance" aria-label="Permalink to “Covariance”">​</a></h2><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki dracula-soft" style="background-color:#0000000;" tabindex="0"><code><span class="line"><span style="color:#F286C4;">fn</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Covariance</span><span style="color:#F6F6F4;">[T</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> integer </span><span style="color:#F286C4;">|</span><span style="color:#F6F6F4;"> float](x</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> []T, y</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> []T, weights</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> []T)</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">f64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Computes the weighted unbiased sample covariance of the data sets x and y. Length of data sets must be equal.</p><p>Mathematically, the weighted unbiased sample covariance is defined as:<br></p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft" style="background-color:#0000000;" tabindex="0"><code><span class="line"><span style="color:#f6f6f4;">cov_w(x, y) = Σᵢ [ wᵢ * (xᵢ - x̄)(yᵢ - ȳ) ] / (Σᵢ [ wᵢ ] - (Σᵢ [ wᵢ² ] / Σᵢ [ wᵢ ]))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>If len(weights) == 0, then all of the weights are 1. Otherwise len(weights) must be equal to the data sets lengths.</p><p>Computations are performed using 64-bit floating-point precision and result is in the same precision, casting to proper type is responsibility of the developer.</p><h2 id="entropy" tabindex="-1">Entropy <a class="header-anchor" href="#entropy" aria-label="Permalink to “Entropy”">​</a></h2><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki dracula-soft" style="background-color:#0000000;" tabindex="0"><code><span class="line"><span style="color:#F286C4;">fn</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Entropy</span><span style="color:#F6F6F4;">[T</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> integer </span><span style="color:#F286C4;">|</span><span style="color:#F6F6F4;"> float](p</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> []T)</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">f64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Computes the Shannon entropy of a distribution or the distance between two distributions using natural logarithm. Returns zero for empty slice.</p><p>Mathematically, the Shannon entropy is defined as:<br></p><ul><li>Σᵢ [ pᵢ * logₑ(pᵢ) ]</li></ul><p>Computations are performed using 64-bit floating-point precision and result is in the same precision, casting to proper type is responsibility of the developer.</p><h2 id="crossentropy" tabindex="-1">CrossEntropy <a class="header-anchor" href="#crossentropy" aria-label="Permalink to “CrossEntropy”">​</a></h2><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki dracula-soft" style="background-color:#0000000;" tabindex="0"><code><span class="line"><span style="color:#BF9EEE;">#disable</span><span style="color:#F6F6F4;"> boundary</span></span>
<span class="line"><span style="color:#F286C4;">fn</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">CrossEntropy</span><span style="color:#F6F6F4;">[T</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> integer </span><span style="color:#F286C4;">|</span><span style="color:#F6F6F4;"> float](p</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> []T, q</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> []T)</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">f64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Computes the cross Shannon entropy between the two distributions specified in p and q using natural logarithm. Returns zero for empty slice. Length of p and q must be equal.</p><p>Mathematically, the cross Shannon entropy is defined as:<br></p><ul><li>Σᵢ [ pᵢ * logₑ(qᵢ) ]</li></ul><p>Computations are performed using 64-bit floating-point precision and result is in the same precision, casting to proper type is responsibility of the developer.</p><h2 id="euclideandistance" tabindex="-1">EuclideanDistance <a class="header-anchor" href="#euclideandistance" aria-label="Permalink to “EuclideanDistance”">​</a></h2><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki dracula-soft" style="background-color:#0000000;" tabindex="0"><code><span class="line"><span style="color:#BF9EEE;">#disable</span><span style="color:#F6F6F4;"> boundary</span></span>
<span class="line"><span style="color:#F286C4;">fn</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">EuclideanDistance</span><span style="color:#F6F6F4;">[T</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> integer </span><span style="color:#F286C4;">|</span><span style="color:#F6F6F4;"> float](p1</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> []T, p2</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> []T)</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">f64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Computes the Euclidean Distance between two points p1 and p2. Length of p1 and p2 must be equal. Returns zero for empty input.</p><p>Mathematically, the Euclidean Distance is defined as:<br></p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft" style="background-color:#0000000;" tabindex="0"><code><span class="line"><span style="color:#f6f6f4;">d(p1, p2) = √(Σᵢ [ (p1ᵢ - p2ᵢ)² ])</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Computations are performed using 64-bit floating-point precision and result is in the same precision, casting to proper type is responsibility of the developer.</p><h2 id="sigmoid" tabindex="-1">Sigmoid <a class="header-anchor" href="#sigmoid" aria-label="Permalink to “Sigmoid”">​</a></h2><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki dracula-soft" style="background-color:#0000000;" tabindex="0"><code><span class="line"><span style="color:#F286C4;">fn</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Sigmoid</span><span style="color:#F6F6F4;">[T</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> integer </span><span style="color:#F286C4;">|</span><span style="color:#F6F6F4;"> float](x</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> T)</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">f64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Computes the Sigmoid function.</p><p>Mathematically, the Sigmoid function is defined as:<br></p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft" style="background-color:#0000000;" tabindex="0"><code><span class="line"><span style="color:#f6f6f4;">1 / (1 + exp(-x))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Computations are performed using 64-bit floating-point precision and result is in the same precision, casting to proper type is responsibility of the developer.</p><h2 id="linearregression" tabindex="-1">LinearRegression <a class="header-anchor" href="#linearregression" aria-label="Permalink to “LinearRegression”">​</a></h2><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki dracula-soft" style="background-color:#0000000;" tabindex="0"><code><span class="line"><span style="color:#BF9EEE;">#disable</span><span style="color:#F6F6F4;"> boundary</span></span>
<span class="line"><span style="color:#F286C4;">fn</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">LinearRegression</span><span style="color:#F6F6F4;">[T</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> integer </span><span style="color:#F286C4;">|</span><span style="color:#F6F6F4;"> float](x</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> []T, y</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> []T, weights</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> []T, origin</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">bool</span><span style="color:#F6F6F4;">)</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> (alpha</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">f64</span><span style="color:#F6F6F4;">, beta</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">f64</span><span style="color:#F6F6F4;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Computes the weighted best-fit line</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft" style="background-color:#0000000;" tabindex="0"><code><span class="line"><span style="color:#f6f6f4;">y = alpha + beta*x</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>to the data in x and y. If origin is true, the regression is forced to pass through the origin. Length of x and y must be equal.</p><p>Specifically, computes the values of alpha and beta such that the total residual</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft" style="background-color:#0000000;" tabindex="0"><code><span class="line"><span style="color:#f6f6f4;">Σᵢ [ wᵢ * (yᵢ - alpha - beta*xᵢ)² ]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>is minimized. If origin is true, then alpha is forced to be zero.</p><p>If len(weights) == 0, then all of the weights are 1. Otherwise len(weights) must be equal to len(x).</p><p>Computations are performed using 64-bit floating-point precision and result is in the same precision, casting to proper type is responsibility of the developer.</p><h2 id="stddev" tabindex="-1">StdDev <a class="header-anchor" href="#stddev" aria-label="Permalink to “StdDev”">​</a></h2><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki dracula-soft" style="background-color:#0000000;" tabindex="0"><code><span class="line"><span style="color:#F286C4;">fn</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">StdDev</span><span style="color:#F6F6F4;">[T</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> integer </span><span style="color:#F286C4;">|</span><span style="color:#F6F6F4;"> float](x</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> []T, weights</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> []T)</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">f64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Computes the weighted sample standard deviation.</p><p>If len(weights) == 0, then all of the weights are 1. Otherwise len(weights) must be equal to len(x).</p><p>Computations are performed using 64-bit floating-point precision and result is in the same precision, casting to proper type is responsibility of the developer.</p><h2 id="stderr" tabindex="-1">StdErr <a class="header-anchor" href="#stderr" aria-label="Permalink to “StdErr”">​</a></h2><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki dracula-soft" style="background-color:#0000000;" tabindex="0"><code><span class="line"><span style="color:#F286C4;">fn</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">StdErr</span><span style="color:#F6F6F4;">(stdDev</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">f64</span><span style="color:#F6F6F4;">, sampleSize</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">f64</span><span style="color:#F6F6F4;">)</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">f64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Computes the standard error in the mean with the given values.</p><h2 id="stdscore" tabindex="-1">StdScore <a class="header-anchor" href="#stdscore" aria-label="Permalink to “StdScore”">​</a></h2><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki dracula-soft" style="background-color:#0000000;" tabindex="0"><code><span class="line"><span style="color:#F286C4;">fn</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">StdScore</span><span style="color:#F6F6F4;">(x</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">f64</span><span style="color:#F6F6F4;">, mean</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">f64</span><span style="color:#F6F6F4;">, stdDev</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">f64</span><span style="color:#F6F6F4;">)</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">f64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Computes the standard score (a.k.a. z-score, z-value) for the value x with the given mean and standard deviation, i.e.</p><p>Mathematically, the standard score is defined as:<br></p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft" style="background-color:#0000000;" tabindex="0"><code><span class="line"><span style="color:#f6f6f4;">(x - mean) / stdDev</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="mode" tabindex="-1">Mode <a class="header-anchor" href="#mode" aria-label="Permalink to “Mode”">​</a></h2><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki dracula-soft" style="background-color:#0000000;" tabindex="0"><code><span class="line"><span style="color:#BF9EEE;">#disable</span><span style="color:#F6F6F4;"> boundary</span></span>
<span class="line"><span style="color:#F286C4;">fn</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Mode</span><span style="color:#F6F6F4;">[T</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> integer </span><span style="color:#F286C4;">|</span><span style="color:#F6F6F4;"> float](x</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> []T, weights</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> []T)</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> (val</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">f64</span><span style="color:#F6F6F4;">, count</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">f64</span><span style="color:#F6F6F4;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Computes the most common value in the data set x and the given weights. Strict equality is used when comparing values, so users should take caution. If several values are the mode, any of them may be returned.</p><p>If len(weights) == 0, then all of the weights are 1. Otherwise len(weights) must be equal to len(x).</p><p>Computations are performed using 64-bit floating-point precision and result is in the same precision, casting to proper type is responsibility of the developer.</p><h2 id="bayes" tabindex="-1">Bayes <a class="header-anchor" href="#bayes" aria-label="Permalink to “Bayes”">​</a></h2><div class="language-jule line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jule</span><pre class="shiki dracula-soft" style="background-color:#0000000;" tabindex="0"><code><span class="line"><span style="color:#F286C4;">fn</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Bayes</span><span style="color:#F6F6F4;">[T</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> float](prior</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> T, likelihood</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> T, evidence</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> T)</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> T</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Computes the posterior probability P(A|B) using Bayes&#39; Theorem:<br></p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft" style="background-color:#0000000;" tabindex="0"><code><span class="line"><span style="color:#f6f6f4;">P(A|B) = P(B|A) * P(A) / P(B)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div>`,145)]))}const y=a(o,[["render",p]]);export{u as __pageData,y as default};
