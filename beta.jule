// Copyright 2025 mertcandav.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// Implementation derived from the gonum.
//
// Copyright ©2016 The Gonum Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

use "std/math"

// Returns the value of the complete beta function B(a, b). It is defined as
//
//	Γ(a)Γ(b) / Γ(a+b)
//
// Special cases are:
//	B(a,b) = NaN, if a or b is Inf
//	B(a,b) = NaN, if a and b are 0
//	B(a,b) = NaN, if a or b is NaN
//	B(a,b) = NaN, if a or b is < 0
//	B(a,b) = +Inf, if a xor b is 0.
//
// See http://mathworld.wolfram.com/BetaFunction.html for more detailed information.
fn Beta(a: f64, b: f64): f64 {
	ret math::Exp(Lbeta(a, b))
}

// Returns the natural logarithm of the complete beta function B(a,b).
// Lbeta is defined as:
//
//	Ln(Γ(a)Γ(b)/Γ(a+b))
//
// Special cases are:
//	Lbeta(a,b) = NaN, if a or b is Inf
//	Lbeta(a,b) = NaN, if a and b are 0
//	Lbeta(a,b) = NaN, if a or b is NaN
//	Lbeta(a,b) = NaN, if a or b is < 0
//	Lbeta(a,b) = +Inf, if a xor b is 0.
fn Lbeta(a: f64, b: f64): f64 {
	match {
	| math::IsInf(a, +1) || math::IsInf(b, +1):
		ret math::NaN()
	| a == 0 && b == 0:
		ret math::NaN()
	| a < 0 || b < 0:
		ret math::NaN()
	| math::IsNaN(a) || math::IsNaN(b):
		ret math::NaN()
	| a == 0 || b == 0:
		ret math::Inf(+1)
	}

	la, _ := math::Lgamma(a)
	lb, _ := math::Lgamma(b)
	lab, _ := math::Lgamma(a + b)
	ret la + lb - lab
}