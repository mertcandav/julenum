// Copyright 2025 mertcandav.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/math/bits"

// Reports whether x is prime.
// It is 100% accurate for all inputs.
fn Prime(x: u64): bool {
	// records the primes < 64.
	const primeBitMask = 1<<2 | 1<<3 | 1<<5 | 1<<7 |
		1<<11 | 1<<13 | 1<<17 | 1<<19 | 1<<23 | 1<<29 | 1<<31 |
		1<<37 | 1<<41 | 1<<43 | 1<<47 | 1<<53 | 1<<59 | 1<<61

	if x < 64 {
		ret primeBitMask&(1<<x) != 0
	}

	if x&1 == 0 {
		ret false // number is even
	}

	const primesA = 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 37
	const primesB = 29 * 31 * 41 * 43 * 47 * 53

	r := x % (primesA * primesB)
	rA := u32(r % primesA)
	rB := u32(r % primesB)

	if rA%3 == 0 || rA%5 == 0 || rA%7 == 0 || rA%11 == 0 || rA%13 == 0 || rA%17 == 0 || rA%19 == 0 || rA%23 == 0 || rA%37 == 0 ||
		rB%29 == 0 || rB%31 == 0 || rB%41 == 0 || rB%43 == 0 || rB%47 == 0 || rB%53 == 0 {
		ret false
	}

	ret millerRabin(x)
}

fn millerRabin(n: u64): bool {
	// Deterministic bases for 64-bit according to Jaeschke & Pomerance.
	let bases: [...]u64 = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]
	mut d := n - 1
	mut s := 0
	for d&1 == 0 {
		d >>= 1
		s++
	}
	for _, a in bases {
		if a >= n {
			break
		}
		mut x := expmod(a, d, n)
		if x == 1 || x == n-1 {
			continue
		}
		mut cont := false
		mut r := 1
		for r < s; r++ {
			x = mulmod(x, x, n)
			if x == n-1 {
				cont = true
				break
			}
		}
		if !cont {
			ret false
		}
	}
	ret true
}

// a^d % n
fn expmod(mut a: u64, mut d: u64, n: u64): (res: u64) {
	res = 1
	a = a % n
	for d > 0 {
		if d&1 == 1 {
			res = mulmod(res, a, n)
		}
		a = mulmod(a, a, n)
		d >>= 1
	}
	ret res
}

// a*b % mod
fn mulmod(a: u64, b: u64, mod: u64): u64 {
	// Compute with full 128-bit product to avoid overflow.
	hi, lo := bits::Mul64(a, b)
	ret bits::Rem64(hi, lo, mod)
}