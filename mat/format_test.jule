// Copyright 2025 mertcandav.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/testing"

struct matrixFormatTest {
	data: []f64
	m:    int
	n:    int
	wsn:  int
	out:  str
}

let mut testsMatrixFormat: []matrixFormatTest = [
	{
		data: [],
		m: 0, n: 0,
		wsn: 0,
		out: "[]",
	},
	{
		data: [1, 2, 3, 4],
		m: 1, n: 4,
		wsn: 0,
		out: "[1234]",
	},
	{
		data: [1, 2, 3, 4],
		m: 1, n: 4,
		wsn: 1,
		out: "[1 2 3 4]",
	},
	{
		data: [1, 2, 3, 4],
		m: 1, n: 4,
		wsn: 3,
		out: "[1   2   3   4]",
	},
	{
		data: [1, 2, 3, 4],
		m: 2, n: 2,
		wsn: 0,
		out: "⌈13⌉\n⌊24⌋",
	},
	{
		data: [1, 2, 3, 4],
		m: 2, n: 2,
		wsn: 1,
		out: "⌈1 3⌉\n⌊2 4⌋",
	},
	{
		data: [1, 2, 3, 4],
		m: 2, n: 2,
		wsn: 3,
		out: "⌈1   3⌉\n⌊2   4⌋",
	},
	{
		data: [1.24, 2, 3.55555, 4],
		m: 2, n: 2,
		wsn: 1,
		out: "⌈1.24 3.55555⌉\n⌊2    4      ⌋",
	},
	{
		data: [1.2456, 2.55555, 3, 4],
		m: 2, n: 2,
		wsn: 1,
		out: "⌈1.2456  3⌉\n⌊2.55555 4⌋",
	},
	{
		data: [1, 2, 3, 4],
		m: 4, n: 1,
		wsn: 1,
		out: "⌈1⌉\n|2|\n|3|\n⌊4⌋",
	},
	{
		data: [1, 2, 3, 4, 5, 6],
		m: 3, n: 2,
		wsn: 1,
		out: "⌈1 4⌉\n|2 5|\n⌊3 6⌋",
	},
]

#test
fn testMatrixFormat(t: &testing::T) {
	for (i, mut test) in testsMatrixFormat {
		let mut mat: Matrix[f64]
		mat.data, mat.m, mat.n = test.data, test.m, test.n
		got := mat.Format(test.wsn)
		if got != test.out {
			t.Errorf("#{} failed", i)
		}
	}
}