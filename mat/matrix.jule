// Copyright 2025 mertcandav.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// A matrix for type T.
struct Matrix[T: numeric] {
	// Dimensions (m x n).
	m: int
	n: int

	// Data array, column-major.
	data: []T
}

impl Matrix {
	// Returns dimensions of the Matrix.
	fn Dims(*self): (m: int, n: int) {
		ret self.m, self.n
	}

	// Reports whether the all values of Matrix are zero.
	//
	// Special cases:
	//	IsZero() = true, if Dims() == (0, 0)
	fn IsZero(*self): bool {
		for _, x in self.data {
			if x != 0 {
				ret false
			}
		}
		ret true
	}

	// Returns value of the specified (i x j) position.
	// Position index starts from zero for column and row.
	//
	// Implementation will not check for boundaries, invalid position may cause panic.
	// To provide fast computation, it will not check whether the (i x j) is valid (column x row).
	fn Get(*self, i: int, j: int): T {
		ret self.data[i+j*self.m] // column-major
	}
}

// Returns new (m x n) matrix for type T.
//
// Constraints:
//	m >= 0
//	n >= 0
fn New[T](m: int, n: int): Matrix[T] {
	if m < 0 || n < 0 {
		panic("mat: New: m < 0 || n < 0")
	}
	let mut mat: Matrix[T]
	mat.m, mat.n = m, n
	mat.data = make([]T, m*n)
	ret mat
}