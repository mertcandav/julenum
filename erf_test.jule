// Copyright 2025 mertcandav.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/math"
use "std/testing"

#test
fn testNormalQuantile(t: &testing::T) {
	// Values from https://www.johndcook.com/blog/normal_cdf_inverse/
	p := [
		0.0000001,
		0.00001,
		0.001,
		0.05,
		0.15,
		0.25,
		0.35,
		0.45,
		0.55,
		0.65,
		0.75,
		0.85,
		0.95,
		0.999,
		0.99999,
		0.9999999,
	]
	ans := [
		-5.199337582187471,
		-4.264890793922602,
		-3.090232306167813,
		-1.6448536269514729,
		-1.0364333894937896,
		-0.6744897501960817,
		-0.38532046640756773,
		-0.12566134685507402,
		0.12566134685507402,
		0.38532046640756773,
		0.6744897501960817,
		1.0364333894937896,
		1.6448536269514729,
		3.090232306167813,
		4.264890793922602,
		5.199337582187471,
	]
	for i, v in p {
		got := NormalQuantile(v)
		if !Tolerance(got, ans[i], 1e-10) {
			t.Errorf("Quantile mismatch. Case {}, want: {}, got: {}", i, ans[i], got)
		}
	}
}