// Copyright 2025 mertcandav.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/testing"

struct formatTest {
	p:    Polynomial
	want: str
}

let mut testsFormat: []formatTest = [
	{
		p: [],
		want: "0",
	},
	{
		p: [{0, 0}],
		want: "0",
	},
	{
		p: [{3, 2}, {-4, 1}, {1, 0}],
		want: "3x^2 - 4x + 1",
	},
	{
		p: [{1, 3}, {-1, 1}],
		want: "x^3 - x",
	},
	{
		p: [{-1, 0}],
		want: "-1",
	},
	{
		p: [{1, 0}],
		want: "1",
	},
	{
		p: [{-1, 2}],
		want: "-x^2",
	},
	{
		p: [{1, 2}, {3, 1}, {2, 0}],
		want: "x^2 + 3x + 2",
	},
	{
		p: [{3, 3}, {-2, 1}, {1, 0}],
		want: "3x^3 - 2x + 1",
	},
	{
		p: [{2, 4}, {3, 3}, {-1, 2}, {5, 1}, {-8, 0}],
		want: "2x^4 + 3x^3 - x^2 + 5x - 8",
	},
]

#test
fn testMatrixFormat(t: &testing::T) {
	for (i, mut test) in testsFormat {
		got := test.p.Str()
		if got != test.want {
			t.Errorf("#{} failed, Str({}) = {}, expected {}", i, []Term(test.p), got, test.want)
		}
	}
}