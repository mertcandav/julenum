// Copyright 2025 mertcandav.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use jn "julenum"
use "julenum/internal/fourier"
use "julenum/internal/ibits"
use "julenum/internal/imem"
use "std/math"
use "std/math/cmplx"
use "std/slices"

// Represents a single term (monomial) of a polynomial.
// It has a coefficient and an exponent (degree).
//
// Mathematically, a term is expressed as:
//	coef * x^exp
//
// where:
// - coef ∈ ℝ (coefficient, a real number)
// - exp ∈ ℕ₀ (non-negative integer exponent)
//
// For example:
//	the term 3x² is represented as Term{Coef: 3, Exp: 2}.
//	the term x is represented as Term{Coef: 1, Exp: 1}.
//	the term 2x is represented as Term{Coef: 2, Exp: 1}.
//	the term 1 is represented as Term{Coef: 1, Exp: 0}
struct Term {
	Coef: f64
	Exp:  int
}

// Represents a polynomial as a slice of Terms.
//
// A polynomial P(x) is a finite sum of terms:
//	P(x) = Σᵢ [ Coefᵢ * x^Expᵢ ]
//
// where each Term is stored as an element of the Terms slice.
//
// Terms are expected to be stored in descending order of exponent (Exp),
// i.e., Terms[0].Exp > Terms[1].Exp > ... > Terms[n-1].Exp,
// which simplifies polynomial operations like addition and multiplication.
// Any corruption in this order is undefined behavior.
//
// Capacity of underlying slices is never changed for values; i.e. that there are
// no 3-operand slice expressions. Any corruption of this rule is undefined behavior.
type Polynomial: []Term

impl Polynomial {
	// Returns new Polynomial buffer enough to store at least n values.
	fn make(mut *self, n: int): Polynomial {
		// Reuse self capacity, if there is enough space.
		if n <= cap(*self) {
			ret (*self)[:n]
		}
		ret make(Polynomial, n)
	}

	// Returns the leading coefficient of the polynomial.
	// Panics if polynomial is zero.
	fn LeadingCoef(*self): f64 {
		if len(*self) == 0 {
			panic("poly: LeadingCoef called on zero polynomial")
		}
		ret (*self)[0].Coef
	}

	// Reports whether polynomial is zero within tolerance.
	fn Zero(*self, tol: f64): bool {
		for _, term in *self {
			if !jn::Tolerance(term.Coef, 0, tol) {
				ret false
			}
		}
		ret true
	}

	// Returns the degree of the polynomial (highest exponent).
	// Returns -1 for the zero polynomial.
	fn Degree(*self): int {
		if len(*self) == 0 {
			ret -1
		}
		ret (*self)[0].Exp
	}

	// Sets self to negated coefficients of the polynomial x.
	// For example, (3x^2 - 4x + 1) becomes (-3x^2 + 4x - 1).
	//
	// If self have enough capacity, Negate will use it to avoid making allocation.
	// If length is zero, self will be zero-length. But keeps internal allocation.
	#disable boundary
	fn Negate(mut *self, &x: *Polynomial) {
		*self = self.make(len(*x))
		for i in *x {
			(*self)[i] = Term{Coef: -(*x)[i].Coef, Exp: (*x)[i].Exp}
		}
	}

	// Copies polynomial x to self.
	//
	// If self have enough capacity, Negate will use it to avoid making allocation.
	// If length is zero, self will be zero-length. But keeps internal allocation.
	fn Copy(mut *self, &x: *Polynomial) {
		// self is an x for self, return immediately.
		if self == x {
			ret
		}
		*self = self.make(len(*x))
		copy(*self, *x)
	}

	// Sets self to simplified form of the polynomial p.
	// IT merges like terms and removes zero coefficients with tolerance.
	//
	// Result is sorted by decreasing exponent.
	// If the Polynomial manually modified, this function may help to follow internal
	// polynomial representation rules as described in Polynomial type.
	//
	// If self have enough capacity, Simplify will use it to avoid making allocation.
	// If length is zero, self will be zero-length. But keeps internal allocation.
	#disable boundary
	fn Simplify(mut *self, &p: *Polynomial, tol: f64) {
		if len(*p) <= 1 {
			ret // Already simplified.
		}

		// Group terms by exponent using a map.
		mut m := map[int]f64{}
		for _, term in *p {
			if !jn::Tolerance(term.Coef, 0, tol) {
				m[term.Exp] += term.Coef
			}
		}

		*self = self.make(len(m))
		mut k := 0
		for exp, coef in m {
			if !jn::Tolerance(coef, 0, tol) {
				(*self)[k] = Term{Coef: coef, Exp: exp}
				k++
			}
		}

		// Trim to actual length.
		// Zero coefficients ignored, so final length may be different.
		*self = (*self)[:k]

		sortByExp(self)
	}

	// Sets self to sum x+y.
	//
	// If self have enough capacity, Add will use it to avoid making allocation.
	// If length is zero, self will be zero-length. But keeps internal allocation.
	#disable boundary
	fn Add(mut *self, &x: *Polynomial, &y: *Polynomial, tol: f64) {
		// If y is empty, just copy x.
		if len(*y) == 0 {
			// self is an x for self, return immediately.
			if self == x {
				ret
			}
			*self = self.make(len(*x))
			copy(*self, *x)
			ret
		}
		// If x is empty, just copy y.
		if len(*x) == 0 {
			// self is an alias for y, return immediately.
			if self == y {
				ret
			}
			*self = self.make(len(*y))
			copy(*self, *y)
			ret
		}

		// Allocate result Polynomial.
		let mut r: Polynomial
		if self == x || self == y || alias(self, x) || alias(self, y) {
			// self is an alias for x or y - cannot reuse.
			// We have to allocate new Polynomial to compute properly.
			r = make(Polynomial, len(*x)+len(*y))
		} else {
			r = self.make(len(*x) + len(*y))
		}
		// compute x+y

		mut i, mut j, mut k := 0, 0, 0
		for i < len(*x) && j < len(*y) {
			xi, yj := (*x)[i], (*y)[j]
			if xi.Exp == yj.Exp {
				sumCoef := xi.Coef + yj.Coef
				if !jn::Tolerance(sumCoef, 0, tol) {
					r[k] = Term{Coef: sumCoef, Exp: xi.Exp}
					k++
				}
				i++
				j++
			} else if xi.Exp > yj.Exp {
				r[k] = xi
				k++
				i++
			} else {
				r[k] = yj
				k++
				j++
			}
		}
		// Append remaining terms.
		for i < len(*x); i, k = i+1, k+1 {
			r[k] = (*x)[i]
		}
		for j < len(*y); j, k = j+1, k+1 {
			r[k] = (*y)[j]
		}

		// Trim to actual length.
		// Zero coefficients ignored, so final length may be different.
		*self = r[:k]
	}

	// Sets self to difference x-y.
	//
	// If self have enough capacity, Sub will use it to avoid making allocation.
	// If length is zero, self will be zero-length. But keeps internal allocation.
	#disable boundary
	fn Sub(mut *self, &x: *Polynomial, &y: *Polynomial, tol: f64) {
		// If y is empty, just copy x.
		if len(*y) == 0 {
			// self is an x for self, return immediately.
			if self == x {
				ret
			}
			*self = self.make(len(*x))
			copy(*self, *x)
			ret
		}
		// If x is empty, just copy y.
		if len(*x) == 0 {
			*self = self.make(len(*y))
			for (i, mut p) in *y {
				p.Coef = -p.Coef
				(*self)[i] = p
			}
			ret
		}

		// Allocate result Polynomial.
		let mut r: Polynomial
		if self == x || self == y || alias(self, x) || alias(self, y) {
			// self is an alias for x or y - cannot reuse.
			// We have to allocate new Polynomial to compute properly.
			r = make(Polynomial, len(*x)+len(*y))
		} else {
			r = self.make(len(*x) + len(*y))
		}
		// compute x-y

		mut i, mut j, mut k := 0, 0, 0
		for i < len(*x) && j < len(*y) {
			xi, mut yj := (*x)[i], (*y)[j]
			if xi.Exp == yj.Exp {
				diffCoef := xi.Coef - yj.Coef
				if !jn::Tolerance(diffCoef, 0, tol) {
					r[k] = Term{Coef: diffCoef, Exp: xi.Exp}
					k++
				}
				i++
				j++
			} else if xi.Exp > yj.Exp {
				r[k] = xi
				k++
				i++
			} else {
				yj.Coef = -yj.Coef
				r[k] = yj
				k++
				j++
			}
		}
		// Append remaining terms.
		for i < len(*x); i, k = i+1, k+1 {
			r[k] = (*x)[i]
		}
		for j < len(*y); j, k = j+1, k+1 {
			r[k] = Term{Coef: -(*y)[j].Coef, Exp: (*y)[j].Exp}
		}

		// Trim to actual length.
		// Zero coefficients ignored, so final length may be different.
		*self = r[:k]
	}

	// Sets self to scaled coefficients of x by scalar k.
	// For example, if k = 2, (3x^2 - x) becomes (6x^2 - 2x).
	//
	// If self have enough capacity, Scale will use it to avoid making allocation.
	// If length is zero, self will be zero-length. But keeps internal allocation.
	#disable boundary
	fn Scale(mut *self, &x: *Polynomial, k: f64, tol: f64) {
		if len(*x) == 0 || k == 1 {
			// self is an alias for x, return immediately.
			if self == x {
				ret
			}
			*self = self.make(len(*x))
			copy(*self, *x)
			ret
		}
		if k == 0 {
			*self = (*self)[:0]
			ret
		}
		*self = self.make(len(*x))
		mut i := 0
		for _, term in *x {
			coef := term.Coef * k
			if !jn::Tolerance(coef, 0, tol) {
				(*self)[i] = Term{
					Coef: coef,
					Exp: term.Exp,
				}
				i++
			}
		}

		// Trim to actual length.
		// Zero coefficients ignored, so final length may be different.
		*self = (*self)[:i]
	}

	// Sets self to product x*y.
	//
	// It is equals to MulTol(x, y, tol), but determines tolerance dynamically.
	// Dynamic tolerance value might not be suitable for some cases.
	// Use MulTol with custom tolerance when needed, especially for precise
	// and small coefficients like 1e-14. However, small coefficients might be removed
	// due to rounding errors during computation with custom tolerance.
	//
	// For minimum rounding-errors, use MulNaive to force native algorithms.
	// Naive algorithm is slower than FFT, but it is more accurate.
	//
	// If self have enough capacity, Mul will use it to avoid making allocation.
	// If length is zero, self will be zero-length. But keeps internal allocation.
	#disable boundary
	fn Mul(mut *self, &x: *Polynomial, &y: *Polynomial) {
		n := len(*x) * len(*y)

		// Early return: x or y is zero.
		if n == 0 {
			*self = (*self)[:0]
			ret
		}

		if n < fftThreshold {
			basicMul(self, x, y)
		} else {
			size := fftSize(x, y)
			tol := dynamicTolerance(x, y, size)
			fftMul(self, x, y, size, tol)
		}
	}

	// Sets self to product x*y.
	//
	// Like Mul but forces to naive algorithm and never uses FFT.
	// Provides more accurate results, but slower for large polynomials.
	//
	// If self have enough capacity, MulNaive will use it to avoid making allocation.
	// If length is zero, self will be zero-length. But keeps internal allocation.
	#disable boundary
	fn MulNaive(mut *self, &x: *Polynomial, &y: *Polynomial) {
		// Early return: x or y is zero.
		if len(*x)*len(*y) == 0 {
			*self = (*self)[:0]
			ret
		}
		basicMul(self, x, y)
	}

	// Sets self to product x*y.
	//
	// Unlike Mul, this function takes custom tolerance and it uses for FFT.
	// If FFT algorithm will not be used, tolerance will not be used.
	//
	// Algorithm will select naive algorithm of FFT to compute,
	// which one is efficient for the case.
	//
	// If self have enough capacity, MulTol will use it to avoid making allocation.
	// If length is zero, self will be zero-length. But keeps internal allocation.
	fn MulTol(mut *self, &x: *Polynomial, &y: *Polynomial, tol: f64) {
		n := len(*x) * len(*y)

		// Early return: x or y is zero.
		if n == 0 {
			*self = (*self)[:0]
			ret
		}

		if n < fftThreshold {
			basicMul(self, x, y)
		} else {
			size := fftSize(x, y)
			fftMul(self, x, y, size, tol)
		}
	}

	// Sets self to product x*y.
	//
	// Like MulTol but forces to FFT and never uses naive algorithm.
	// Provides faster computations for large polynomaisl, but less accurate.
	//
	// If self have enough capacity, MulFFT will use it to avoid making allocation.
	// If length is zero, self will be zero-length. But keeps internal allocation.
	fn MulFFT(mut *self, &x: *Polynomial, &y: *Polynomial, tol: f64) {
		n := len(*x) * len(*y)

		// Early return: x or y is zero.
		if n == 0 {
			*self = (*self)[:0]
			ret
		}

		size := fftSize(x, y)
		fftMul(self, x, y, size, tol)
	}

	// Sets self to quotient x/y, sets rem to remainder x/y if it is not nil.
	// Panics for divide by zero.
	//
	// It uses naive division for small inputs, FFT division for larger inputs.
	// When FFT division used, accuracy decreased due to floating-point rounding.
	// Especiall remainder is less accurate compared to naive division.
	//
	// For minimum rounding-errors, use DivModNaive to force native division.
	// Naive algorithm is slower than FFT, but it is more accurate.
	//
	// If self and rem have enough capacity, DivMod will use it to avoid making allocation.
	// If length is zero, self will be zero-length. But keeps internal allocation.
	fn DivMod(mut *self, &x: *Polynomial, &y: *Polynomial, mut &rem: *Polynomial) {
		if len(*y) == 0 {
			panic("poly: division by zero")
		}

		n := len(*x) * len(*y)
		if rem != nil {
			if n < fftThreshold {
				basicDivMod(self, x, y, rem)
			} else {
				fftDivMod(self, x, y, rem)
			}
		} else {
			let mut _rem: Polynomial
			if n < fftThreshold {
				basicDivMod(self, x, y, &_rem)
			} else {
				fftDivMod(self, x, y, &_rem)
			}
		}
	}

	// Sets self to quotient x/y, sets rem to remainder x/y if it is not nil.
	// Panics for divide by zero.
	//
	// Like DivMod but forces to naive algorithm and never uses FFT.
	// Provides more accurate results, but slower for large polynomials.
	//
	// If self and rem have enough capacity, DivMod will use it to avoid making allocation.
	// If length is zero, self will be zero-length. But keeps internal allocation.
	fn DivModNaive(mut *self, &x: *Polynomial, &y: *Polynomial, mut &rem: *Polynomial) {
		if len(*y) == 0 {
			panic("poly: division by zero")
		}

		if rem != nil {
			basicDivMod(self, x, y, rem)
		} else {
			let mut _rem: Polynomial
			basicDivMod(self, x, y, &_rem)
		}
	}

	// Sets self to the first derivative of polynomial x.
	//
	// If x = ∑ᵢ [ aᵢ * xⁱ ], then self = ∑ᵢ [ (i*aᵢ)·xⁱ⁻¹ ] for i ≥ 1.
	// Constant terms (exp = 0) are omitted.
	//
	// If self have enough capacity, Derivative will use it to avoid making allocation.
	// If length is zero, self will be zero-length. But keeps internal allocation.
	#disable boundary
	fn Derivative(mut *self, &x: *Polynomial) {
		*self = self.make(len(*x))

		mut k := 0
		for _, term in *x {
			if term.Exp != 0 {
				(*self)[k] = Term{
					Coef: term.Coef * f64(term.Exp),
					Exp: term.Exp - 1,
				}
				k++
			}
		}

		// Trim to actual length.
		// Zero coefficients ignored, so final length may be different.
		*self = (*self)[:k]
	}

	// Sets self to the indefinite integral of polynomial x with constant term C.
	// That is, integrates each term and appends a constant term.
	//
	// If self have enough capacity, Integral will use it to avoid making allocation.
	// If length is zero, self will be zero-length. But keeps internal allocation.
	#disable boundary
	fn Integral(mut *self, &x: *Polynomial, C: f64) {
		n := len(*x)
		*self = self.make(n + 1)

		mut i := 0
		for i < n; i++ {
			exp := (*x)[i].Exp + 1
			(*self)[i].Exp = exp
			(*self)[i].Coef = (*x)[i].Coef / f64(exp)
		}

		// Constant term
		if C != 0 {
			(*self)[i] = Term{Coef: C, Exp: 0}
		} else {
			*self = (*self)[:i] // remove trailing zero if C=0
		}
	}

	// Evaluates the polynomial at a given x.
	fn Eval(*self, x: f64): f64 {
		match len(*self) {
		| 0:
			ret 0
		| 1:
			t := (*self)[0]
			if t.Exp == 0 {
				ret t.Coef
			}
			ret t.Coef * math::Pow(x, f64(t.Exp))
		}

		// For general case: cache powers of x on the fly.
		let mut result: f64
		mut powCache := map[int]f64{}
		for _, term in *self {
			if term.Exp == 0 {
				result += term.Coef
				continue
			}
			mut px, ok := powCache[term.Exp]
			if !ok {
				px = math::Pow(x, f64(term.Exp))
				powCache[term.Exp] = px
			}
			result += term.Coef * px
		}
		ret result
	}

	// Sets self to the greatest common divisor of two polynomials x and y.
	// Leading coefficient is normalized to 1 (if not zero).
	//
	// If self have enough capacity, GCD will use it to avoid making allocation.
	// If length is zero, self will be zero-length. But keeps internal allocation.
	fn GCD(mut *self, &x: *Polynomial, &y: *Polynomial, tol: f64) {
		let mut X: Polynomial
		let mut Y: Polynomial
		let mut R: Polynomial
		let mut Q: Polynomial
		X.Copy(x)
		Y.Copy(y)

		for !Y.Zero(tol) && !jn::Tolerance(Y.LeadingCoef(), 0, tol) {
			Q.DivMod(&X, &Y, &R)
			X.Copy(&Y)
			Y.Copy(&R)
		}

		// Normalize leading coefficient to 1
		if !X.Zero(tol) {
			lc := X.LeadingCoef()
			if jn::Tolerance(lc, 0, tol) {
				*self = (*self)[:0]
				ret
			}

			self.Scale(&X, 1/lc, tol)
		} else {
			*self = (*self)[:0]
		}
	}

	// Sets self to the least common multiple of two polynomials x and y.
	// Leading coefficient is normalized to 1 (if not zero).
	//
	// If self have enough capacity, LCM will use it to avoid making allocation.
	// If length is zero, self will be zero-length. But keeps internal allocation.
	fn LCM(mut *self, &x: *Polynomial, &y: *Polynomial, tol: f64) {
		if x.Zero(tol) || y.Zero(tol) {
			*self = (*self)[:0]
			ret
		}

		let mut product: Polynomial
		product.MulTol(x, y, tol)
		let mut gcd: Polynomial
		gcd.GCD(x, y, tol)
		self.DivMod(&product, &gcd, nil)

		// Normalize leading coefficient to 1
		if !self.Zero(tol) {
			lc := self.LeadingCoef()
			if !jn::Tolerance(lc, 0, tol) {
				self.Scale(self, 1/lc, tol)
			}
		} else {
			*self = (*self)[:0]
		}
	}

	// Sets self to product x^n.
	// Condition n >= 0 must be true.
	//
	// If self have enough capacity, Pow will use it to avoid making allocation.
	// If length is zero, self will be zero-length. But keeps internal allocation.
	#disable boundary
	fn Pow(mut *self, &x: *Polynomial, mut n: int) {
		if n < 0 {
			panic("poly: negative exponent not supported")
		}
		if n == 0 {
			// p^0 = 1
			*self = self.make(1)
			(*self)[0].Coef = 1
			(*self)[0].Exp = 0
			ret
		}
		if n == 1 {
			// self is an alias for x, return immediately.
			if self == x {
				ret
			}
			*self = self.make(len(*x))
			copy(*self, *x)
			ret
		}

		let mut base: Polynomial
		base = make(Polynomial, len(*x))
		copy(base, *x)

		// *self = 1
		*self = self.make(1)
		(*self)[0].Coef = 1
		(*self)[0].Exp = 0

		for n > 0; n >>= 1 {
			if n&1 == 1 {
				self.Mul(self, &base)
			}
			base.Mul(&base, &base)
		}
	}

	// Sets self to rescaled polynomial x, so that its leading coefficient is 1.
	// If the polynomial is zero or leading coefficient is very small, output length is zero.
	//
	// If self have enough capacity, Normalize will use it to avoid making allocation.
	// If length is zero, self will be zero-length. But keeps internal allocation.
	#disable boundary
	fn Normalize(mut *self, &x: *Polynomial, tol: f64) {
		if len(*x) == 0 {
			*self = (*self)[:0]
			ret // zero polynomial, do nothing
		}

		lc := (*x)[0].Coef
		if jn::Tolerance(lc, 0, tol) {
			*self = (*self)[:0]
			ret // avoid division by near-zero
		}

		*self = self.make(len(*x))
		for i in *x {
			(*self)[i].Coef = (*x)[i].Coef / lc
			(*self)[i].Exp = (*x)[i].Exp
		}
	}

	// Sets self to the unique linear polynomial that passes through points (x0, y0) and (x1, y1).
	//
	// If self have enough capacity, InterpolateLinear will use it to avoid making allocation.
	#disable boundary
	fn InterpolateLinear(mut *self, x0: f64, y0: f64, x1: f64, y1: f64) {
		if x0 == x1 {
			panic("poly: InterpolateLinear: x0 and x1 must be distinct")
		}
		// Compute slope and intercept.
		slope := (y1 - y0) / (x1 - x0) // m
		intercept := y0 - slope*x0     // b
		*self = self.make(2)
		(*self)[0] = Term{Coef: slope, Exp: 1}     // m * x
		(*self)[1] = Term{Coef: intercept, Exp: 0} // b
	}

	// Sets self to the unique degree-(n-1) polynomial that passes through the
	// given points using the Lagrange interpolation formula.
	// Panics if input lengths differ or have duplicate x values.
	//
	// If self have enough capacity, InterpolateLagrance will use it to avoid making allocation.
	// If length is zero, self will be zero-length. But keeps internal allocation.
	#disable boundary
	fn InterpolateLagrange(mut *self, xs: []f64, ys: []f64, tol: f64) {
		if len(xs) != len(ys) {
			panic("poly: InterpolateLagrange: xs and ys must be the same length")
		}
		n := len(xs)
		if n == 0 {
			*self = (*self)[:0]
			ret
		}

		mut i := 0
		for i < n; i++ {
			// Start with constant polynomial 1
			mut basis := Polynomial([{1, 0}])
			mut denom := 1.0

			mut j := 0
			for j < n; j++ {
				if i == j {
					continue
				}
				if math::Abs(xs[i]-xs[j]) < tol {
					panic("poly: InterpolateLagrange: duplicate x values")
				}
				// Multiply by (x - xj)
				mut tmp := Polynomial([{1, 1}, {-xs[j], 0}])
				basis.MulTol(&basis, &tmp, tol)

				// Denominator: (xi - xj)
				denom *= xs[i] - xs[j]
			}

			basis.Scale(&basis, ys[i]/denom, tol) // Scale basis polynomial by yi / denom
			self.Add(self, &basis, tol)
		}
	}
}

#disable boundary
fn dynamicTolerance(&x: *Polynomial, &y: *Polynomial, size: int): f64 {
	const (
		machineEpsilon = 2.22e-16
		safetyFactor   = 10000000.0 // Increase to be stricter, for large sizes.
		smallThreshold = 200
	)

	if size < smallThreshold {
		mut maxCoef := 0.0
		for _, term in *x {
			absCoef := math::Abs(term.Coef)
			if absCoef > maxCoef {
				maxCoef = absCoef
			}
		}
		for _, term in *y {
			absCoef := math::Abs(term.Coef)
			if absCoef > maxCoef {
				maxCoef = absCoef
			}
		}

		if maxCoef == 0 {
			ret 0
		}

		basicTol := machineEpsilon * f64(size) * maxCoef
		relativeTol := 1e-14 * maxCoef
		absoluteTol := 1e-16
		ret math::Max(basicTol, math::Max(relativeTol, absoluteTol))
	} else {
		ret machineEpsilon * f64(size) * math::Log2(f64(size)) * safetyFactor
	}
}

// z = x*y
#disable boundary
fn basicMul(mut &z: *Polynomial, &x: *Polynomial, &y: *Polynomial) {
	// Temporary map to sum coefficients of matching exponents.
	mut temp := map[int]f64{}

	for _, a in *x {
		if a.Coef == 0 {
			continue
		}
		for _, b in *y {
			if b.Coef == 0 {
				continue
			}
			exp := a.Exp + b.Exp
			temp[exp] += a.Coef * b.Coef
		}
	}

	// Convert map to slice and eliminate zeroes.
	*z = z.make(len(temp))
	mut k := 0
	for exp, coef in temp {
		if coef != 0 {
			(*z)[k] = Term{Coef: coef, Exp: exp}
			k++
		}
	}

	// Trim to actual length.
	// Zero coefficients ignored, so final length may be different.
	*z = (*z)[:k]

	// Sort terms by decreasing exponent.
	if len(*z) > 1 {
		sortByExp(z)
	}
}

// quot = quotient x/y
// rem = remainder x/y
#disable boundary
fn basicDivMod(mut &quot: *Polynomial, &x: *Polynomial, &y: *Polynomial, mut &rem: *Polynomial) {
	if len(*x) == 0 {
		*quot = (*quot)[:0]
		if rem != nil {
			*rem = rem.make(len(*y))
			copy(*rem, *y)
		}
		ret
	}

	degDiv := (*y)[0].Exp
	coefDiv := (*y)[0].Coef
	if coefDiv == 0 {
		panic("poly: leading coefficient of divisor is zero")
	}

	degX := (*x)[0].Exp
	degY := (*y)[0].Exp

	if rem != x {
		*rem = rem.make(len(*x))
		copy(*rem, *x)
	}

	if degX < degY {
		*quot = (*quot)[:0]
		ret
	}

	k := degX - degY + 1

	let mut zquot: Polynomial

	if quot == y || alias(quot, y) {
		// self is an alias y - cannot reuse.
		// We have to allocate new Polynomial to compute properly.
		zquot = make(Polynomial, k)
	} else {
		zquot = quot.make(k)
	}

	mut k := 0
	mut subtrahend := make(Polynomial, len(*y))
	for len(*rem) > 0 && (*rem)[0].Exp >= degDiv; k++ {
		leadRem := (*rem)[0]
		expDiff := leadRem.Exp - degDiv
		coefQuot := leadRem.Coef / coefDiv
		zquot[k] = Term{Coef: coefQuot, Exp: expDiff}
		for i, dterm in *y {
			subtrahend[i] = Term{
				Coef: dterm.Coef * coefQuot,
				Exp: dterm.Exp + expDiff,
			}
		}
		rem.Sub(rem, &subtrahend, 0)
	}

	// Trim to actual length.
	// Zero coefficients ignored, so final length may be different.
	*quot = zquot[:k]
}

// p(x) -> x^degree * p(1/x)
#disable boundary
fn reverse(mut &rev: *Polynomial, &p: *Polynomial, degree: int) {
	*rev = rev.make(len(*p))
	for i, term in *p {
		(*rev)[i] = Term{Coef: term.Coef, Exp: degree - term.Exp}
	}
	sortByExp(rev)
}

// (mod x^k)
#disable boundary
fn truncate(mut &x: *Polynomial, k: int) {
	mut i := 0
	for _, term in *x {
		if term.Exp < k {
			(*x)[i] = term
			i++
		}
	}
	*x = (*x)[:i]
}

// d(x), c(x)d(x) = 1 (mod x^k)
fn inverse(mut &inv: *Polynomial, &c: *Polynomial, k: int) {
	if k == 0 {
		*inv = (*inv)[:0]
		ret
	}
	if k == 1 {
		let mut c0: f64
		for _, term in *c {
			if term.Exp == 0 {
				c0 = term.Coef
				break
			}
		}
		if math::Abs(c0) == 0 {
			panic("poly: constant zero term is illegal for inverse")
		}
		*inv = make(Polynomial, 1)
		(*inv)[0] = Term{Coef: 1.0 / c0, Exp: 0}
		ret
	}

	k_half := (k + 1) / 2
	let mut d_prev: Polynomial
	inverse(&d_prev, c, k_half)

	let mut temp: Polynomial
	temp.Mul(c, &d_prev)
	truncate(&temp, k)

	two := Polynomial([{Coef: 2, Exp: 0}])
	temp.Sub(&two, &temp, 0)

	inv.Mul(&d_prev, &temp)
	truncate(inv, k)
}

fn fftDivMod(mut &q: *Polynomial, &a: *Polynomial, &b: *Polynomial, mut &r: *Polynomial) {
	if len(*b) == 0 || ((*b)[0].Exp == 0 && math::Abs((*b)[0].Coef) == 0) {
		panic("poly: division by zero")
	}

	if len(*a) == 0 {
		*q = (*q)[:0]
		if r != nil {
			*r = r.make(len(*b))
			copy(*r, *b)
		}
		ret
	}

	degA := (*a)[0].Exp
	degB := (*b)[0].Exp

	if degA < degB {
		*q = (*q)[:0]
		if r != nil {
			*r = r.make(len(*a))
			copy(*r, *a)
		}
		ret
	}

	k := degA - degB + 1

	let mut aRev: Polynomial
	reverse(&aRev, a, degA)
	let mut bRev: Polynomial
	reverse(&bRev, b, degB)

	// (mod x^k)
	let mut invB: Polynomial
	inverse(&invB, &bRev, k)

	// 3. qRev = aRev * invB mod x^k
	let mut qRev: Polynomial
	basicMul(&qRev, &aRev, &invB)

	truncate(&qRev, k)

	// q = reverse(qRev)
	reverse(q, &qRev, k-1)

	// qb = q * b
	let mut qb: Polynomial
	basicMul(&qb, q, b)

	// r = a - qb
	r.Sub(a, &qb, 0)

	truncate(r, degB)
}

#disable boundary
fn polyToCoeffs(mut &z: *[]cmplx128, &p: *Polynomial) {
	for i in *p {
		(*z)[(*p)[i].Exp] = cmplx((*p)[i].Coef, 0)
	}
}

#disable boundary
fn coeffsToPoly(mut &z: *Polynomial, coeffs: []cmplx128, tol: f64) {
	*z = z.make(len(coeffs))
	mut k := 0
	for exp in coeffs {
		coef := real(coeffs[exp])
		if !jn::Tolerance(coef, 0, tol) {
			(*z)[k] = Term{Coef: coef, Exp: exp}
			k++
		}
	}

	// Trim to actual length.
	// Zero coefficients ignored, so final length may be different.
	*z = (*z)[:k]

	sortByExp(z)
}

// Threshold for switching to basic multiplication.
// This value is crucial for performance, FFT algorithm is inefficient for small polynomials.
const fftThreshold = 128

#disable boundary
fn fftSize(&x: *Polynomial, &y: *Polynomial): int {
	mut maxExpX, mut maxExpY := 0, 0
	if len(*x) > 0 {
		maxExpX = (*x)[0].Exp
	}
	if len(*y) > 0 {
		maxExpY = (*y)[0].Exp
	}
	maxExpX = ibits::Max(maxExpX, len(*x))
	maxExpY = ibits::Max(maxExpY, len(*y))
	ret ibits::NextPowerOfTwo(maxExpX + maxExpY + 1)
}

// z = x*y, using FFT.
#disable boundary
fn fftMul(mut &z: *Polynomial, &x: *Polynomial, &y: *Polynomial, size: int, tol: f64) {
	// Allocate temporary slices with single allocation.
	// size² should enough to store all coefficients for fa and fb.
	// size/2 is the total size of a single slice.
	mut workspace := make([]cmplx128, size<<1)
	mut fa, mut fb := workspace[:size], workspace[size:]

	// Convert to coeff arrays.
	polyToCoeffs(&fa, x)
	polyToCoeffs(&fb, y)

	// Forward FFT.
	fourier::FuseFFT(fa, fb, false)

	// Point-wise multiply.
	for i in fa {
		fa[i] *= fb[i]
	}

	// Inverse FFT.
	fourier::FFT(fa, true)

	// Convert to Polynomial and assign to z.
	coeffsToPoly(z, fa, tol)
}

// Sort terms of the polynomial p by decreasing exponent.
fn sortByExp(mut &p: *Polynomial) {
	slices::SortFunc([]Term(*p), fn|i, j| {
		match {
		| i.Exp == j.Exp:
			ret 0
		| i.Exp > j.Exp:
			ret -1
		|:
			ret +1
		}
	})
}

// Reports whether x and y share the same base array.
//
// Note: alias assumes that the capacity of underlying arrays
// is never changed for values; i.e. that there are
// no 3-operand slice expressions in this code (or worse,
// reflect-based operations to the same effect).
fn alias(&x: *Polynomial, &y: *Polynomial): bool {
	ret imem::Alias([]Term(*x), []Term(*y))
}