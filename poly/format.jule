// Copyright 2025 mertcandav.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use jn "julenum"
use "std/conv"
use "std/unsafe"

fn appendFormatPolynomial(&p: *Polynomial, mut buf: []byte): []byte {
	mut wr := false
	for i, term in *p {
		mut coef := term.Coef
		exp := term.Exp

		// Skip zero coefficients (safety).
		if jn::Close(coef, 0) {
			continue
		}

		// Handle sign
		mut sign := byte('+')
		if coef < 0 {
			sign = '-'
			coef = -coef
		}

		// Write sign for all except first term
		if i == 0 {
			if sign == '-' {
				wr = true
				buf = append(buf, sign)
			}
		} else {
			wr = true
			buf = append(buf, ' ', sign, ' ')
		}

		// Write coefficient
		mut writeCoef := true
		if exp != 0 && jn::Close(coef-1, 0) {
			// coef=1 for non-constant term: omit coefficient
			writeCoef = false
		}

		if writeCoef {
			wr = true
			buf = conv::AppendFloat(buf, coef, 'g', -1, 64)
		}

		// Write variable part
		if exp > 0 {
			wr = true
			buf = append(buf, 'x')
			if exp > 1 {
				buf = append(buf, '^')
				buf = conv::AppendInt(buf, i64(exp), 10)
			}
		}
	}

	if !wr {
		buf = append(buf, '0')
	}

	ret buf
}

impl Polynomial {
	// Appends a human-readable string representation of the polynomial to buf and returns.
	fn AppendFormat(*self, mut buf: []byte): []byte {
		ret appendFormatPolynomial(self, buf)
	}

	// Returns a human-readable string representation of the polynomial.
	fn Str(*self): str {
		ret unsafe::StrFromBytes(appendFormatPolynomial(self, nil))
	}
}