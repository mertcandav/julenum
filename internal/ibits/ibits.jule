// Copyright 2025 mertcandav.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// Size of a uint in bits.
const UintSize = 32 << (^uint(0) >> 63) // 32 or 64

// Returns the minimum value, x or y.
fn Min(x: int, y: int): int {
	if x < y {
		ret x
	}
	ret y
}

// Returns the maximum value, x or y.
fn Max(x: int, y: int): int {
	if x > y {
		ret x
	}
	ret y
}

// Returns the absolute value.
fn Abs(a: int): int {
	ret int(u64(a & ^(1 << 63)))
}

// https://graphics.stanford.edu/~seander/bithacks.html#DetermineIfPowerOf2
fn IsPowerOfTwo(n: int): bool {
	ret n&(n-1) == 0
}

// https://graphics.stanford.edu/~seander/bithacks.html#RoundUpPowerOf2
fn NextPowerOfTwo(mut n: int): int {
	if n <= 1 {
		ret 1
	}
	if IsPowerOfTwo(n) {
		ret n
	}
	n--
	n |= n >> 1
	n |= n >> 2
	n |= n >> 4
	n |= n >> 8
	n |= n >> 16
	if UintSize == 64 { // 64-bit architecture
		n |= n >> 32
	}
	ret n + 1
}