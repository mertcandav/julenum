// Copyright 2025 mertcandav.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/testing"

struct testInterp {
	x:    f64
	xp:   []f64
	fp:   []f64
	want: f64
}

let testsLinear: []testInterp = [
	// Basic linear interpolation
	{x: 1.5, xp: [0, 1, 2], fp: [0, 10, 20], want: 15},
	{x: 0.5, xp: [0, 1], fp: [0, 10], want: 5},
	{x: 2.5, xp: [2, 3], fp: [20, 30], want: 25},

	// Clipping behavior
	{x: -1, xp: [0, 1, 2], fp: [0, 10, 20], want: 0},
	{x: 3, xp: [0, 1, 2], fp: [0, 10, 20], want: 20},

	// Edge points
	{x: 0, xp: [0, 1, 2], fp: [0, 10, 20], want: 0},
	{x: 2, xp: [0, 1, 2], fp: [0, 10, 20], want: 20},

	// Two-point interpolation
	{x: 0.25, xp: [0, 1], fp: [0, 100], want: 25},
	{x: 1.75, xp: [1, 2], fp: [20, 40], want: 35},

	// Non-zero starting xp
	{x: 3.5, xp: [3, 4, 5], fp: [30, 40, 50], want: 35},

	// Flat function
	{x: 1.2, xp: [0, 2], fp: [7, 7], want: 7},

	// Precision and rounding
	{x: 0.3333, xp: [0, 1], fp: [0, 1], want: 0.3333},

	// Single point (constant return)
	{x: 999, xp: [42], fp: [17], want: 17},
]

#test
fn testLinear(t: &testing::T) {
	for _, test in testsLinear {
		got := Linear(test.x, test.xp, test.fp)
		if got != test.want {
			t.Errorf("Linear({}, {}, {}) = {}, expected {}", test.x, test.xp, test.fp, got, test.want)
		}
	}
}

let testsLagrange: []testInterp = [
	// Basic quadratic function points (xÂ²)
	{x: 3, xp: [1, 2, 4], fp: [1, 4, 16], want: 9},

	// Linear points
	{x: 1.5, xp: [1, 2], fp: [3, 5], want: 4},

	// Interpolation at known points (should return exact fp)
	{x: 1, xp: [1, 2, 3], fp: [10, 20, 30], want: 10},
	{x: 3, xp: [1, 2, 3], fp: [10, 20, 30], want: 30},

	// Outside known points (extrapolation)
	{x: 0, xp: [1, 2, 3], fp: [10, 20, 30], want: 0},

	// Constant function
	{x: 2, xp: [0, 1, 2], fp: [5, 5, 5], want: 5},

	// Single point (constant)
	{x: 100, xp: [50], fp: [25], want: 25},
]

#test
fn testLagrange(t: &testing::T) {
	for _, test in testsLagrange {
		got := Lagrange(test.x, test.xp, test.fp)
		if got != test.want {
			t.Errorf("Lagrange({}, {}, {}) = {}, expected {}", test.x, test.xp, test.fp, got, test.want)
		}
	}
}

#test
fn testNewton(t: &testing::T) {
	for _, test in testsLagrange {
		got := Newton(test.x, test.xp, test.fp)
		if got != test.want {
			t.Errorf("Newton({}, {}, {}) = {}, expected {}", test.x, test.xp, test.fp, got, test.want)
		}
	}
}