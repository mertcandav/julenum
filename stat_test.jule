// Copyright 2025 mertcandav.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/math"
use "std/testing"

struct chiSquareTest {
	obs:  []f64
	exp:  []f64
	want: f64
}

let testsChiSquare: []chiSquareTest = [
	{
		obs: [10, 12, 8],
		exp: [10, 10, 10],
		want: 0.8,
	},
	{
		obs: [3, 4, 5],
		exp: [3, 4, 5],
		want: 0,
	},
	{
		obs: [0, 3, 0],
		exp: [0, 3, 1],
		want: 1,
	},
]

#test
fn testChiSquare(t: &testing::T) {
	for _, test in testsChiSquare {
		got := ChiSquare(test.obs, test.exp)
		if got != test.want {
			t.Errorf("ChiSquare({}, {}) = {}, expected {}", test.obs, test.exp, got, test.want)
		}
	}
}

let testsChiSquareDistance: []chiSquareTest = [
	{
		obs: [1, 2, 13, 5, 45, 23],
		exp: [67, 90, 18, 79, 24, 98],
		want: 133.55428601494035,
	},
	{
		obs: [91, 900, 78, 30, 602, 813],
		exp: [57, 49, 36, 759, 234, 928],
		want: 814.776999405035,
	},
	{
		obs: [0, 3, 0],
		exp: [0, 3, 0],
		want: 0,
	},
]

#test
fn testChiSquareDistance(t: &testing::T) {
	for _, test in testsChiSquareDistance {
		got := ChiSquareDistance(test.obs, test.exp)
		if got != test.want {
			t.Errorf("ChiSquareDistance({}, {}) = {}, expected {}", test.obs, test.exp, got, test.want)
		}
	}
}

struct meanTest {
	x:    []f64
	want: f64
}

let testsMean: []meanTest = [
	{x: [], want: 0},
	{x: [0, 0, 0], want: 0},
	{x: [1, 2, 3], want: 2},
	{x: [1, 2, 3], want: 2},
	{x: [-34, 34, 0, 4, 834, -34, 74], want: 125.42857142857143},
]

#test
fn testMean(t: &testing::T) {
	for _, test in testsMean {
		got := Mean(test.x)
		if got != test.want {
			t.Errorf("Mean({}) = {}, expected {}", test.x, got, test.want)
		}
	}
}

#test
fn testMeanWeight(t: &testing::T) {
	for _, test in testsMean {
		mut got := MeanWeight(test.x, nil)
		if got != test.want {
			t.Errorf("MeanWeight({}, nil) = {}, expected {}", test.x, got, test.want)
		}
		mut ones := make([]f64, len(test.x))
		for i in ones {
			ones[i] = 1
		}
		got = MeanWeight(test.x, ones)
		if got != test.want {
			t.Errorf("MeanWeight({}, ones) = {}, expected {}", test.x, got, test.want)
		}
	}
}

let testsGeometricMean: []meanTest = [
	{x: [], want: 0},
	{x: [2, 4, 6, 8, 10], want: 5.210342169394704},
	{x: [60, 90, 120], want: 86.53497421844448},
	{x: [0.5, 1.5, 2.5, 3.5], want: 1.6005429364718398},
	{x: [5, 5, 5, 10], want: 5.946035575013605},
]

#test
fn testGeometricMean(t: &testing::T) {
	for _, test in testsGeometricMean {
		got := GeometricMean(test.x)
		if !VeryClose(got, test.want) {
			t.Errorf("GeometricMean({}) = {}, expected {}", test.x, got, test.want)
		}
	}
}

#test
fn testGeometricMeanWeight(t: &testing::T) {
	for _, test in testsGeometricMean {
		mut got := GeometricMeanWeight(test.x, nil)
		if !VeryClose(got, test.want) {
			t.Errorf("GeometricMeanWeight({}, nil) = {}, expected {}", test.x, got, test.want)
		}
		mut ones := make([]f64, len(test.x))
		for i in ones {
			ones[i] = 1
		}
		got = GeometricMeanWeight(test.x, ones)
		if !VeryClose(got, test.want) {
			t.Errorf("GeometricMeanWeight({}, ones) = {}, expected {}", test.x, got, test.want)
		}
	}
}

let testsHarmonicMean: []meanTest = [
	{x: [], want: 0},
	{x: [2, 4, 6, 8, 10], want: 4.37956204379562},
	{x: [60, 90, 120], want: 83.076923076923087},
	{x: [0.5, 1.5, 2.5, 3.5], want: 1.1931818181818183},
	{x: [5, 5, 5, 10], want: 5.7142857142857135},
]

#test
fn testHarmonicMean(t: &testing::T) {
	for _, test in testsHarmonicMean {
		got := HarmonicMean(test.x)
		if !VeryClose(got, test.want) {
			t.Errorf("HarmonicMean({}) = {}, expected {}", test.x, got, test.want)
		}
	}
}

#test
fn testHarmonicMeanWeight(t: &testing::T) {
	for _, test in testsHarmonicMean {
		mut got := HarmonicMeanWeight(test.x, nil)
		if !VeryClose(got, test.want) {
			t.Errorf("HarmonicMeanWeight({}, nil) = {}, expected {}", test.x, got, test.want)
		}
		mut ones := make([]f64, len(test.x))
		for i in ones {
			ones[i] = 1
		}
		got = HarmonicMeanWeight(test.x, ones)
		if !VeryClose(got, test.want) {
			t.Errorf("HarmonicMeanWeight({}, ones) = {}, expected {}", test.x, got, test.want)
		}
	}
}

let testsRootMeanSquare: []meanTest = [
	{x: [], want: 0},
	{x: [3, 4], want: 3.5355339059327378},
	{x: [1, 2, 3, 4, 5], want: 3.3166247903554},
	{x: [-1, -2, -3, -4, -5], want: 3.3166247903554},
	{x: [10, 10, 10, 10], want: 10},
	{x: [0, 10], want: 7.0710678118654755},
	{x: [0.1, 0.2, 0.3], want: 0.21602468994692867},
	{x: [-3, 4], want: 3.5355339059327378},
	{x: [6, 8], want: 7.0710678118654755},
]

#test
fn testRootMeanSquare(t: &testing::T) {
	for _, test in testsRootMeanSquare {
		got := RootMeanSquare(test.x)
		if !VeryClose(got, test.want) {
			t.Errorf("RootMeanSquare({}) = {}, expected {}", test.x, got, test.want)
		}
	}
}

#test
fn testRootMeanSquareWeight(t: &testing::T) {
	for _, test in testsRootMeanSquare {
		mut got := RootMeanSquareWeight(test.x, nil)
		if !VeryClose(got, test.want) {
			t.Errorf("RootMeanSquareWeight({}, nil) = {}, expected {}", test.x, got, test.want)
		}
		mut ones := make([]f64, len(test.x))
		for i in ones {
			ones[i] = 1
		}
		got = RootMeanSquareWeight(test.x, ones)
		if !VeryClose(got, test.want) {
			t.Errorf("RootMeanSquareWeight({}, ones) = {}, expected {}", test.x, got, test.want)
		}
	}
}

let testsCircularMean: []meanTest = [
	{x: [], want: 0},
	{x: [3, 4], want: -2.7831853071795867},
	{x: [1, 2, 3, 4, 5], want: 3},
	{x: [-1, -2, -3, -4, -5], want: -3},
	{x: [10, 10, 10, 10], want: -2.566370614359173},
	{x: [0, 10], want: -1.2831853071795865},
	{x: [0.1, 0.2, 0.3], want: 0.19999999999999996},
	{x: [-3, 4], want: -2.641592653589793},
	{x: [6, 8], want: 0.7168146928204135},
]

#test
fn testCircularMean(t: &testing::T) {
	for _, test in testsCircularMean {
		got := CircularMean(test.x)
		if !VeryClose(got, test.want) {
			t.Errorf("CircularMean({}) = {}, expected {}", test.x, got, test.want)
		}
	}
}

#test
fn testCircularMeanWeight(t: &testing::T) {
	for _, test in testsCircularMean {
		mut got := CircularMeanWeight(test.x, nil)
		if !VeryClose(got, test.want) {
			t.Errorf("CircularMeanWeight({}, nil) = {}, expected {}", test.x, got, test.want)
		}
		mut ones := make([]f64, len(test.x))
		for i in ones {
			ones[i] = 1
		}
		got = CircularMeanWeight(test.x, ones)
		if !VeryClose(got, test.want) {
			t.Errorf("CircularMeanWeight({}, ones) = {}, expected {}", test.x, got, test.want)
		}
	}
}

let testsMedian: []meanTest = [
	{x: [1, 2, 3.3, 4], want: 2.65},
	{x: [1, 2, 3, 4], want: 2.5},
	{x: [1, 2, 3, 4, 5], want: 3},
	{x: [-2, -1, 0, 1, 2], want: 0},
	{x: [-2, -1, 1, 2], want: 0},
	{x: [-2, -1, 2, 2], want: 0.5},
	{x: [-100, 1], want: -49.5},
]

#test
fn testMedian(t: &testing::T) {
	for _, test in testsMedian {
		got := Median(test.x)
		if !VeryClose(got, test.want) {
			t.Errorf("Median({}) = {}, expected {}", test.x, got, test.want)
		}
	}
}

struct correlationTest {
	x:       []f64
	y:       []f64
	weights: []f64
	want:    f64
}

let testsCorrelation: []correlationTest = [
	{
		x: [],
		y: [],
		want: 0,
	},
	{
		x: [1, 2, 3, 4, 5, 6],
		y: [1, 2, 3, 4, 5, 6],
		want: 1,
	},
	{
		x: [1.1, 2.2, 3.3, 4.4, 5.5, 6.6],
		y: [1, 2, 3, 4, 5, 6],
		want: 1,
	},
	{
		x: [-1, -2, -3, -4, -5, -6],
		y: [1, 2, 3, 4, 5, 6],
		want: -1,
	},
	{
		x: [-1, -2, -3, -4, -5, -6],
		y: [1, 2, 3, 4, 5, 6],
		weights: [1, 1, 1, 1, 1, 1],
		want: -1,
	},
	{
		x: [1, 2, 334, 4, 5, 6],
		y: [1, 2, 333, 4, 52, 6],
		want: 0.9897970931668703,
	},
	{
		x: [1, 2, 334, 4, 5, 6],
		y: [1, 2, 333, 4, 52, 6],
		want: 0.9897970931668703,
	},
	{
		x: [8, -3, 7, 8, -4],
		y: [10, 15, 4, 5, -1],
		want: 0.009333466076905933,
	},
	{
		x: [8, 3, 7, 8, -4],
		y: [-10, -15, -4, -5, -1],
		want: -0.3089443513476705,
	},
	{
		x: [8, 3, 7, 8, -4],
		y: [-10, -15, -4, -5, -1],
		weights: [1, 4, 5, 10, 4],
		want: -0.15071708335614534,
	},
	{
		x: [8, -3, 7, 8, -4],
		y: [10, 15, 4, 5, -1],
		weights: [1, 3, 1, 2, 2],
		want: -0.13966633352688942,
	},
]

#test
fn testCorrelation(t: &testing::T) {
	for _, test in testsCorrelation {
		if len(test.weights) != 0 {
			continue
		}
		got := Correlation(test.x, test.y)
		if got != test.want {
			t.Errorf("Correlation({}, {}) = {}, expected {}", test.x, test.y, got, test.want)
		}
	}
}

#test
fn testCorrelationWeight(t: &testing::T) {
	for _, test in testsCorrelation {
		got := CorrelationWeight(test.x, test.y, test.weights)
		if got != test.want {
			t.Errorf("CorrelationWeight({}, {}, {}) = {}, expected {}", test.x, test.y, test.weights, got, test.want)
		}
	}
}

let testsVariance: []correlationTest = [
	{
		x: [8, -3, 7, 8, -4],
		want: 37.7,
	},
	{
		x: [1, 2, 3, 4, 5, 6],
		want: 3.5,
	},
	{
		x: [8, 3, 7, 8, 4],
		weights: [2, 1, 2, 1, 1],
		want: 4.2857142857142865,
	},
	{
		x: [1, 4, 9],
		weights: [1, 1.5, 1],
		want: 13.142857142857146,
	},
	{
		x: [1, 2, 3],
		weights: [1, 1.5, 1],
		want: 0.8,
	},
]

#test
fn testVariance(t: &testing::T) {
	for _, test in testsVariance {
		if len(test.weights) != 0 {
			continue
		}
		got := Variance(test.x)
		if !VeryClose(got, test.want) {
			t.Errorf("Variance({}) = {}, expected {}", test.x, got, test.want)
		}
	}
}

#test
fn testVarianceWeight(t: &testing::T) {
	for _, test in testsVariance {
		got := VarianceWeight(test.x, test.weights)
		if !VeryClose(got, test.want) {
			t.Errorf("VarianceWeight({}, {}) = {}, expected {}", test.x, test.weights, got, test.want)
		}
	}
}

let testsCovariance: []correlationTest = [
	{
		x: [1, 2, 3],
		y: [4, 5, 6],
		want: 1,
	},
	{
		x: [1, 2, 3],
		y: [6, 5, 4],
		want: -1,
	},
	{
		x: [1, 1, 1],
		y: [2, 2, 2],
		want: 0,
	},
	{
		x: [1, 2, 3, 4],
		y: [1, 3, 2, 4],
		want: 1.3333333333333333,
	},
	{
		x: [2, 4, 6],
		y: [1, 3, 5],
		want: 4,
	},
	{
		x: [1, 2, 3, 4],
		y: [4, 3, 2, 1],
		want: -1.6666666666666667,
	},
	{
		x: [1, 1, 1],
		y: [2, 3, 4],
		want: 0,
	},
	{
		x: [1, 2, 3],
		y: [1, 2, 3],
		want: 1,
	},
	{
		x: [2, 4, 6],
		y: [1, 3, 5],
		weights: [1, 1, 1],
		want: 4,
	},
	{
		x: [2, 4, 6],
		y: [1, 3, 5],
		weights: [1, 2, 1],
		want: 3.2,
	},
	{
		x: [1, 1, 1],
		y: [2, 3, 4],
		weights: [1, 2, 1],
		want: 0,
	},
	{
		x: [1, 2, 3, 4, 5, 6],
		y: [1, 2, 3, 4, 5, 6],
		want: 3.5,
	},
	{
		x: [0.75, 0.1, 0.05],
		y: [0.5, 0.25, 0.25],
		want: 0.05625,
	},
	{
		x: [1, 2, 3],
		y: [2, 4, 6],
		want: 2,
	},
	{
		x: [1, 2, 3],
		y: [1, 4, 9],
		want: 4,
	},
	{
		x: [1, 2, 3],
		y: [2, 4, 9],
		want: 3.5,
	},
	{
		x: [1, 2, 3],
		y: [1, 4, 9],
		weights: [1, 1.5, 1],
		want: 3.5,
	},
	{
		x: [1, 4, 9],
		y: [1, 4, 9],
		weights: [1, 1.5, 1],
		want: 14.375,
	},
]

#test
fn testCovariance(t: &testing::T) {
	for _, test in testsCovariance {
		if len(test.weights) > 0 {
			continue
		}
		got := Covariance(test.x, test.y)
		if !VeryClose(got, test.want) {
			t.Errorf("Covariance({}, {}) = {}, expected {}", test.x, test.y, got, test.want)
		}
	}
}

#test
fn testCovarianceWeight(t: &testing::T) {
	for _, test in testsCovariance {
		got := CovarianceWeight(test.x, test.y, test.weights)
		if !VeryClose(got, test.want) {
			t.Errorf("CovarianceWeight({}, {}, {}) = {}, expected {}", test.x, test.y, test.weights, got, test.want)
		}
	}
}

let testsEntropy: []correlationTest = [
	{x: [], want: 0},
	{x: [1], want: 0},
	{x: [0.5, 0.5], want: 0.6931471805599453},
	{x: [0.1, 0.2, 0.7], want: 0.8018185525433373},
	{x: [0.25, 0.25, 0.25, 0.25], want: 1.3862943611198906},
]

#test
fn testEntropy(t: &testing::T) {
	for _, test in testsEntropy {
		got := Entropy(test.x)
		if !VeryClose(got, test.want) {
			t.Errorf("Entropy({}) = {}, expected {}", test.x, got, test.want)
		}
	}
}

let testsCrossEntropy: []correlationTest = [
	{x: [], y: [], want: 0},
	{x: [0.5, 0.5], y: [0.5, 0.5], want: 0.6931471805599453},
	{x: [1, 0], y: [0.1, 0.9], want: 2.302585092994046},
	{x: [0.2, 0.3, 0.5], y: [0.7, 0.1, 0.2], want: 1.5668294729030103},
	{x: [0.75, 0.1, 0.05, 0, 0, 0], y: [0.5, 0.25, 0.25, 0, 0, 0], want: 0.7278045395879426},
	{x: [1], y: [0], want: math::Inf(1)},
	{x: [1], y: [-0.1], want: math::NaN()},
]

#test
fn testCrossEntropy(t: &testing::T) {
	for _, test in testsCrossEntropy {
		got := CrossEntropy(test.x, test.y)
		if !Equal(got, test.want) && !VeryClose(got, test.want) {
			t.Errorf("CrossEntropy({}, {}) = {}, expected {}", test.x, test.y, got, test.want)
		}
	}
}

let testsEuclideanDistance: []correlationTest = [
	{x: [], y: [], want: 0},
	{x: [0, 0], y: [0, 0], want: 0},
	{x: [1, 1], y: [4, 5], want: 5},
	{x: [-1, -1], y: [-4, -5], want: 5},
	{x: [0, 0], y: [3, 4], want: 5},
	{x: [1, 2, 3], y: [4, 6, 15], want: 13},
	{x: [5, 5, 5], y: [5, 5, 5], want: 0},
	{x: [10], y: [20], want: 10},
	{x: [7], y: [7], want: 0},
	{x: [1000, 2000], y: [1000, 2000], want: 0},
	{x: [1e+10, 1e+10], y: [2e+10, 2e+10], want: 1.4142135623730951e+10},
]

#test
fn testEuclideanDistance(t: &testing::T) {
	for _, test in testsEuclideanDistance {
		got := EuclideanDistance(test.x, test.y)
		if !Equal(got, test.want) && !VeryClose(got, test.want) {
			t.Errorf("EuclideanDistance({}, {}) = {}, expected {}", test.x, test.y, got, test.want)
		}
	}
}

struct testFaithful {
	waiting:   []f64
	eruptions: []f64
}

let faithful = testFaithful{
	waiting: [
		79, 54, 74, 62, 85, 55, 88, 85,
		51, 85, 54, 84, 78, 47, 83, 52,
		62, 84, 52, 79, 51, 47, 78, 69,
		74, 83, 55, 76, 78, 79, 73, 77,
		66, 80, 74, 52, 48, 80, 59, 90,
		80, 58, 84, 58, 73, 83, 64, 53,
		82, 59, 75, 90, 54, 80, 54, 83,
		71, 64, 77, 81, 59, 84, 48, 82,
		60, 92, 78, 78, 65, 73, 82, 56,
		79, 71, 62, 76, 60, 78, 76, 83,
		75, 82, 70, 65, 73, 88, 76, 80,
		48, 86, 60, 90, 50, 78, 63, 72,
		84, 75, 51, 82, 62, 88, 49, 83,
		81, 47, 84, 52, 86, 81, 75, 59,
		89, 79, 59, 81, 50, 85, 59, 87,
		53, 69, 77, 56, 88, 81, 45, 82,
		55, 90, 45, 83, 56, 89, 46, 82,
		51, 86, 53, 79, 81, 60, 82, 77,
		76, 59, 80, 49, 96, 53, 77, 77,
		65, 81, 71, 70, 81, 93, 53, 89,
		45, 86, 58, 78, 66, 76, 63, 88,
		52, 93, 49, 57, 77, 68, 81, 81,
		73, 50, 85, 74, 55, 77, 83, 83,
		51, 78, 84, 46, 83, 55, 81, 57,
		76, 84, 77, 81, 87, 77, 51, 78,
		60, 82, 91, 53, 78, 46, 77, 84,
		49, 83, 71, 80, 49, 75, 64, 76,
		53, 94, 55, 76, 50, 82, 54, 75,
		78, 79, 78, 78, 70, 79, 70, 54,
		86, 50, 90, 54, 54, 77, 79, 64,
		75, 47, 86, 63, 85, 82, 57, 82,
		67, 74, 54, 83, 73, 73, 88, 80,
		71, 83, 56, 79, 78, 84, 58, 83,
		43, 60, 75, 81, 46, 90, 46, 74,
	],
	eruptions: [
		3.600, 1.800, 3.333, 2.283, 4.533, 2.883, 4.700, 3.600,
		1.950, 4.350, 1.833, 3.917, 4.200, 1.750, 4.700, 2.167,
		1.750, 4.800, 1.600, 4.250, 1.800, 1.750, 3.450, 3.067,
		4.533, 3.600, 1.967, 4.083, 3.850, 4.433, 4.300, 4.467,
		3.367, 4.033, 3.833, 2.017, 1.867, 4.833, 1.833, 4.783,
		4.350, 1.883, 4.567, 1.750, 4.533, 3.317, 3.833, 2.100,
		4.633, 2.000, 4.800, 4.716, 1.833, 4.833, 1.733, 4.883,
		3.717, 1.667, 4.567, 4.317, 2.233, 4.500, 1.750, 4.800,
		1.817, 4.400, 4.167, 4.700, 2.067, 4.700, 4.033, 1.967,
		4.500, 4.000, 1.983, 5.067, 2.017, 4.567, 3.883, 3.600,
		4.133, 4.333, 4.100, 2.633, 4.067, 4.933, 3.950, 4.517,
		2.167, 4.000, 2.200, 4.333, 1.867, 4.817, 1.833, 4.300,
		4.667, 3.750, 1.867, 4.900, 2.483, 4.367, 2.100, 4.500,
		4.050, 1.867, 4.700, 1.783, 4.850, 3.683, 4.733, 2.300,
		4.900, 4.417, 1.700, 4.633, 2.317, 4.600, 1.817, 4.417,
		2.617, 4.067, 4.250, 1.967, 4.600, 3.767, 1.917, 4.500,
		2.267, 4.650, 1.867, 4.167, 2.800, 4.333, 1.833, 4.383,
		1.883, 4.933, 2.033, 3.733, 4.233, 2.233, 4.533, 4.817,
		4.333, 1.983, 4.633, 2.017, 5.100, 1.800, 5.033, 4.000,
		2.400, 4.600, 3.567, 4.000, 4.500, 4.083, 1.800, 3.967,
		2.200, 4.150, 2.000, 3.833, 3.500, 4.583, 2.367, 5.000,
		1.933, 4.617, 1.917, 2.083, 4.583, 3.333, 4.167, 4.333,
		4.500, 2.417, 4.000, 4.167, 1.883, 4.583, 4.250, 3.767,
		2.033, 4.433, 4.083, 1.833, 4.417, 2.183, 4.800, 1.833,
		4.800, 4.100, 3.966, 4.233, 3.500, 4.366, 2.250, 4.667,
		2.100, 4.350, 4.133, 1.867, 4.600, 1.783, 4.367, 3.850,
		1.933, 4.500, 2.383, 4.700, 1.867, 3.833, 3.417, 4.233,
		2.400, 4.800, 2.000, 4.150, 1.867, 4.267, 1.750, 4.483,
		4.000, 4.117, 4.083, 4.267, 3.917, 4.550, 4.083, 2.417,
		4.183, 2.217, 4.450, 1.883, 1.850, 4.283, 3.950, 2.333,
		4.150, 2.350, 4.933, 2.900, 4.583, 3.833, 2.083, 4.367,
		2.133, 4.350, 2.200, 4.450, 3.567, 4.500, 4.150, 3.817,
		3.917, 4.450, 2.000, 4.283, 4.767, 4.533, 1.850, 4.250,
		1.983, 2.250, 4.750, 4.117, 2.150, 4.417, 1.817, 4.467,
	],
}

struct linearRegressionTest {
	x:       []f64
	y:       []f64
	weights: []f64
	origin:  bool
	alpha:   f64
	beta:    f64
}

let testsLinearRegression: []linearRegressionTest = [
	{
		x: faithful.waiting,
		y: faithful.eruptions,
		origin: false,
		alpha: -1.8740159864107384,
		beta: 0.07562794795186273,
	},
	{
		x: faithful.waiting,
		y: faithful.eruptions,
		origin: true,
		alpha: 0,
		beta: 0.0501291888749183,
	},
	{
		x: faithful.waiting,
		y: faithful.eruptions,
		weights: fn(): []f64 {
			mut w := make([]f64, len(faithful.eruptions))
			for i in w {
				w[i] = 1
			}
			ret w
		}(),
		alpha: -1.8740159864107384,
		beta: 0.07562794795186273,
	},
	{
		x: faithful.waiting,
		y: faithful.eruptions,
		weights: faithful.waiting, // Just an arbitrary set of non-uniform weights.
		alpha: -1.792678393763112,
		beta: 0.07452122970940375,
	},
	{
		x: [1, 2, 3, 4, 5],
		y: [2, 4, 5, 4, 5],
		alpha: 2.2,
		beta: 0.6,
	},
	{
		x: [1, 2, 3, 4, 5],
		y: [2, 4, 5, 4, 5],
		weights: [1, 1, 10, 1, 1],
		alpha: 2.8428571428571434,
		beta: 0.6,
	},
	{
		x: [1, 2, 3, 4, 5],
		y: [2, 4, 5, 4, 5],
		origin: true,
		alpha: 0,
		beta: 1.2,
	},
]

#test
fn testLinearRegression(t: &testing::T) {
	for _, test in testsLinearRegression {
		if len(test.weights) > 0 {
			continue
		}
		alpha, beta := LinearRegression(test.x, test.y, test.origin)
		if !Equal(alpha, test.alpha) && !VeryClose(alpha, test.alpha) ||
			!Equal(beta, test.beta) && !VeryClose(beta, test.beta) {
			t.Errorf("LinearRegression({}, {}, {}) = {}, {}, expected {}, {}", test.x, test.y, test.origin, alpha, beta, test.alpha, test.beta)
		}
	}
}

#test
fn testLinearRegressionWeight(t: &testing::T) {
	for _, test in testsLinearRegression {
		alpha, beta := LinearRegressionWeight(test.x, test.y, test.weights, test.origin)
		if !Equal(alpha, test.alpha) && !VeryClose(alpha, test.alpha) ||
			!Equal(beta, test.beta) && !VeryClose(beta, test.beta) {
			t.Errorf("LinearRegressionWeight({}, {}, {}, {}) = {}, {}, expected {}, {}", test.x, test.y, test.weights, test.origin, alpha, beta, test.alpha, test.beta)
		}
	}
}

struct modeTest {
	x:       []f64
	weights: []f64
	val:     f64
	count:   f64
}

let testsMode: []modeTest = [
	{
		x: [1, 6, 1, 9, -2],
		val: 1,
		count: 2,
	},
	{
		x: [1, 6, 1, 9, -2],
		weights: [1, 7, 3, 5, 0],
		val: 6,
		count: 7,
	},
]

#test
fn testMode(t: &testing::T) {
	for _, test in testsMode {
		val, count := Mode(test.x, test.weights)
		if val != test.val || count != test.count {
			t.Errorf("Mode({}, {}) = {}, {}, expected {}, {}", test.x, test.weights, val, count, test.val, test.count)
		}
	}
}