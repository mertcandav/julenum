// Copyright 2025 mertcandav.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// Implementation derived from the gonum.
//
// Copyright ©2018 The Gonum Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

use "std/math"

impl Dual {
	// Sets self to the product d**p, the base-x exponential of p.
	//
	// Special cases are (in order):
	//	PowReal(NaN+xϵ, ±0) = 1+NaNϵ for any x
	//	PowReal(x, ±0) = 1 for any x
	//	PowReal(1+xϵ, y) = 1+xyϵ for any y
	//	PowReal(x, 1) = x for any x
	//	PowReal(NaN+xϵ, y) = NaN+NaNϵ
	//	PowReal(x, NaN) = NaN+NaNϵ
	//	PowReal(±0, y) = ±Inf for y an odd integer < 0
	//	PowReal(±0, -Inf) = +Inf
	//	PowReal(±0, +Inf) = +0
	//	PowReal(±0, y) = +Inf for finite y < 0 and not an odd integer
	//	PowReal(±0, y) = ±0 for y an odd integer > 0
	//	PowReal(±0, y) = +0 for finite y > 0 and not an odd integer
	//	PowReal(-1, ±Inf) = 1
	//	PowReal(x+0ϵ, +Inf) = +Inf+NaNϵ for |x| > 1
	//	PowReal(x+yϵ, +Inf) = +Inf for |x| > 1
	//	PowReal(x, -Inf) = +0+NaNϵ for |x| > 1
	//	PowReal(x, +Inf) = +0+NaNϵ for |x| < 1
	//	PowReal(x+0ϵ, -Inf) = +Inf+NaNϵ for |x| < 1
	//	PowReal(x, -Inf) = +Inf-Infϵ for |x| < 1
	//	PowReal(+Inf, y) = +Inf for y > 0
	//	PowReal(+Inf, y) = +0 for y < 0
	//	PowReal(-Inf, y) = Pow(-0, -y)
	//	PowReal(x, y) = NaN+NaNϵ for finite x < 0 and finite non-integer y
	fn PowReal(mut *self, &d: *Dual, p: f64) {
		const tol = 1e-15

		mut x := d.X
		if math::Abs(x) < tol {
			if x >= 0 {
				x = tol
			}
			if x < 0 {
				x = -tol
			}
		}
		deriv := p * math::Pow(x, p-1)
		self.X, self.Y = math::Pow(d.X, p), d.Y*deriv
	}

	// Sets self to the product d**r, the base-d exponential of r.
	fn Pow(mut *self, &d: *Dual, &p: *Dual) {
		mut log := *d
		log.Log(&log)
		self.Mul(p, &log)
		self.Exp(self)
	}

	// Sets self to the square root of d.
	//
	// Special cases are:
	//	Sqrt(+Inf) = +Inf
	//	Sqrt(±0) = (±0+Infϵ)
	//	Sqrt(x < 0) = NaN
	//	Sqrt(NaN) = NaN
	fn Sqrt(mut *self, &d: *Dual) {
		if d.X <= 0 {
			if d.X == 0 {
				self.X, self.Y = d.X, math::Inf(1)
			} else {
				self.X, self.Y = math::NaN(), math::NaN()
			}
			ret
		}
		self.PowReal(d, 0.5)
	}

	// Sets self to the product d**q, the base-e exponential of d.
	//
	// Special cases are:
	//	Exp(+Inf) = +Inf
	//	Exp(NaN) = NaN
	//
	// Very large values overflow to 0 or +Inf.
	// Very small values underflow to 1.
	fn Exp(mut *self, &d: *Dual) {
		fnDeriv := math::Exp(d.X)
		self.X, self.Y = fnDeriv, fnDeriv*d.Y
	}

	// Sets self to the natural logarithm of d.
	//
	// Special cases are:
	//	Log(+Inf) = (+Inf+0ϵ)
	//	Log(0) = (-Inf±Infϵ)
	//	Log(x < 0) = NaN
	//	Log(NaN) = NaN
	fn Log(mut *self, &d: *Dual) {
		match d.X {
		| 0:
			self.X, self.Y = math::Log(d.X), math::Copysign(math::Inf(1), d.X)
			ret
		| math::Inf(1):
			self.X, self.Y = math::Log(d.X), 0
			ret
		}
		if d.X < 0 {
			self.X, self.Y = math::NaN(), math::NaN()
			ret
		}
		self.X, self.Y = math::Log(d.X), d.Y/d.X
	}

	// Sets self to the sine of d.
	//
	// Special cases are:
	//	Sin(±0) = (±0+Nϵ)
	//	Sin(±Inf) = NaN
	//	Sin(NaN) = NaN
	fn Sin(mut *self, &d: *Dual) {
		if d.X == 0 {
			self.X, self.Y = d.X, d.Y
			ret
		}
		self.X, self.Y = math::Sin(d.X), math::Cos(d.X)*d.Y
	}

	// Sets self to the cosine of d.
	//
	// Special cases are:
	//	Cos(±Inf) = NaN
	//	Cos(NaN) = NaN
	fn Cos(mut *self, &d: *Dual) {
		self.X, self.Y = math::Cos(d.X), -math::Sin(d.X)*d.Y
	}

	// Sets self to the tangent of d.
	//
	// Special cases are:
	//	Tan(±0) = (±0+Nϵ)
	//	Tan(±Inf) = NaN
	//	Tan(NaN) = NaN
	fn Tan(mut *self, &d: *Dual) {
		if d.X == 0 {
			self.X, self.Y = d.X, d.Y
			ret
		}
		f := math::Tan(d.X)
		self.X, self.Y = f, (1+f*f)*d.Y
	}

	// Sets self to the inverse sine of d.
	//
	// Special cases are:
	//	Asin(±0) = (±0+Nϵ)
	//	Asin(±1) = (±Inf+Infϵ)
	//	Asin(x) = NaN if x < -1 or x > 1
	fn Asin(mut *self, &d: *Dual) {
		if d.X == 0 {
			self.X, self.Y = d.X, d.Y
			ret
		}
		m := math::Abs(d.X)
		if m >= 1 {
			if m == 1 {
				self.X, self.Y = math::Asin(d.X), math::Inf(1)
			} else {
				self.X, self.Y = math::NaN(), math::NaN()
			}
			ret
		}
		self.X, self.Y = math::Asin(d.X), (1/math::Sqrt(1-d.X*d.X))*d.Y
	}

	// Sets self to the inverse cosine of d.
	//
	// Special cases are:
	//	Acos(-1) = (Pi-Infϵ)
	//	Acos(1) = (0-Infϵ)
	//	Acos(x) = NaN if x < -1 or x > 1
	fn Acos(mut *self, &d: *Dual) {
		m := math::Abs(d.X)
		if m >= 1 {
			if m == 1 {
				self.X, self.Y = math::Acos(d.X), math::Inf(-1)
			} else {
				self.X, self.Y = math::NaN(), math::NaN()
			}
			ret
		}
		self.X, self.Y = math::Acos(d.X), (-1/math::Sqrt(1-d.X*d.X))*d.Y
	}
}