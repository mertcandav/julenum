// Copyright 2025 mertcandav.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "julenum"
use "std/math"
use "std/testing"

fn dSin(x: f64): f64 { ret math::Cos(x) }
fn dCos(x: f64): f64 { ret -math::Sin(x) }
fn dTan(x: f64): f64 { ret sec(x) * sec(x) }
fn dAsin(x: f64): f64 { ret 1 / math::Sqrt(1-x*x) }
fn dAcos(x: f64): f64 { ret -1 / math::Sqrt(1-x*x) }
fn dAtan(x: f64): f64 { ret 1 / (1 + x*x) }

fn dSinh(x: f64): f64 { ret math::Cosh(x) }
fn dCosh(x: f64): f64 { ret math::Sinh(x) }
fn dTanh(x: f64): f64 { ret sech(x) * sech(x) }
fn dAsinh(x: f64): f64 { ret 1 / math::Sqrt(x*x+1) }
fn dAcosh(x: f64): f64 { ret 1 / (math::Sqrt(x-1) * math::Sqrt(x+1)) }
fn dAtanh(x: f64): f64 {
	match {
	| math::Abs(x) == 1:
		ret math::NaN()
	| math::IsInf(x, 0):
		ret negZero
	}
	ret 1 / (1 - x*x)
}

fn dExp(x: f64): f64 { ret math::Exp(x) }
fn dLog(x: f64): f64 {
	if x < 0 {
		ret math::NaN()
	}
	ret 1 / x
}
fn dSqrt(x: f64): f64 {
	// For whatever reason, math::Sqrt(-0) returns -0.
	// In this case, that is clearly a wrong approach.
	if x == 0 {
		ret math::Inf(1)
	}
	ret 0.5 / math::Sqrt(x)
}
fn dInv(x: f64): f64 { ret -1 / (x * x) }

fn sec(x: f64): f64 { ret 1 / math::Cos(x) }
fn sech(x: f64): f64 { ret 1 / math::Cosh(x) }

let negZero = math::F64frombits(1 << 63)

struct dualTest {
	name:   str
	x:      []f64
	fnDual: fn(mut &x: *Dual)
	f:      fn(x: f64): f64
	dFn:    fn(x: f64): f64
}

let testsDual: []dualTest = [
	{
		name: "sin",
		x: [math::NaN(), math::Inf(-1), -3, -2, -1, -0.5, negZero, 0, 0.5, 1, 2, 3, math::Inf(1)],
		fnDual: fn|mut d| d.Sin(d),
		f: math::Sin,
		dFn: dSin,
	},
	{
		name: "cos",
		x: [math::NaN(), math::Inf(-1), -3, -2, -1, -0.5, negZero, 0, 0.5, 1, 2, 3, math::Inf(1)],
		fnDual: fn|mut d| d.Cos(d),
		f: math::Cos,
		dFn: dCos,
	},
	{
		name: "tan",
		x: [math::NaN(), math::Inf(-1), -3, -2, -1, -0.5, negZero, 0, 0.5, 1, 2, 3, math::Inf(1)],
		fnDual: fn|mut d| d.Tan(d),
		f: math::Tan,
		dFn: dTan,
	},
	{
		name: "sinh",
		x: [math::NaN(), math::Inf(-1), -3, -2, -1, -0.5, negZero, 0, 0.5, 1, 2, 3, math::Inf(1)],
		fnDual: fn|mut d| d.Sinh(d),
		f: math::Sinh,
		dFn: dSinh,
	},
	{
		name: "cosh",
		x: [math::NaN(), math::Inf(-1), -3, -2, -1, -0.5, negZero, 0, 0.5, 1, 2, 3, math::Inf(1)],
		fnDual: fn|mut d| d.Cosh(d),
		f: math::Cosh,
		dFn: dCosh,
	},
	{
		name: "tanh",
		x: [math::NaN(), math::Inf(-1), -3, -2, -1, -0.5, negZero, 0, 0.5, 1, 2, 3, math::Inf(1)],
		fnDual: fn|mut d| d.Tanh(d),
		f: math::Tanh,
		dFn: dTanh,
	},
	{
		name: "asinh",
		x: [math::NaN(), math::Inf(-1), -3, -2, -1, -0.5, negZero, 0, 0.5, 1, 2, 3, math::Inf(1)],
		fnDual: fn|mut d| d.Asinh(d),
		f: math::Asinh,
		dFn: dAsinh,
	},
	{
		name: "asin",
		x: [math::NaN(), math::Inf(-1), -3, -2, -1, -0.5, negZero, 0, 0.5, 1, 2, 3, math::Inf(1)],
		fnDual: fn|mut d| d.Asin(d),
		f: math::Asin,
		dFn: dAsin,
	},
	{
		name: "acos",
		x: [math::NaN(), math::Inf(-1), -3, -2, -1, -0.5, negZero, 0, 0.5, 1, 2, 3, math::Inf(1)],
		fnDual: fn|mut d| d.Acos(d),
		f: math::Acos,
		dFn: dAcos,
	},
	{
		name: "acosh",
		x: [math::NaN(), math::Inf(-1), -3, -2, -1, -0.5, negZero, 0, 0.5, 1, 2, 3, math::Inf(1)],
		fnDual: fn|mut d| d.Acosh(d),
		f: math::Acosh,
		dFn: dAcosh,
	},
	{
		name: "atan",
		x: [math::NaN(), math::Inf(-1), -3, -2, -1, -0.5, negZero, 0, 0.5, 1, 2, 3, math::Inf(1)],
		fnDual: fn|mut d| d.Atan(d),
		f: math::Atan,
		dFn: dAtan,
	},
	{
		name: "exp",
		x: [math::NaN(), math::Inf(-1), -3, -2, -1, -0.5, negZero, 0, 0.5, 1, 2, 3, math::Inf(1)],
		fnDual: fn|mut d| d.Exp(d),
		f: math::Exp,
		dFn: dExp,
	},
	{
		name: "log",
		x: [math::NaN(), math::Inf(-1), -3, -2, -1, -0.5, negZero, 0, 0.5, 1, 2, 3, math::Inf(1)],
		fnDual: fn|mut d| d.Log(d),
		f: math::Log,
		dFn: dLog,
	},
	{
		name: "inv",
		x: [math::NaN(), math::Inf(-1), -3, -2, -1, -0.5, negZero, 0, 0.5, 1, 2, 3, math::Inf(1)],
		fnDual: fn|mut d| d.Inv(d),
		f: fn|x| 1 / x,
		dFn: dInv,
	},
	{
		name: "sqrt",
		x: [math::NaN(), math::Inf(-1), -3, -2, -1, -0.5, negZero, 0, 0.5, 1, 2, 3, math::Inf(1)],
		fnDual: fn|mut d| d.Sqrt(d),
		f: math::Sqrt,
		dFn: dSqrt,
	},
]

#test
fn testDual(t: &testing::T) {
	const tol = 1e-14
	for _, test in testsDual {
		for _, x in test.x {
			mut fxDual := Dual{x, 1}
			test.fnDual(&fxDual)
			fx := test.f(x)
			dFx := test.dFn(x)
			if !same(fxDual.X, fx, tol) {
				t.Errorf("unexpected {}({}): got:{} want:{}", test.name, x, fxDual.X, fx)
			}
			if !same(fxDual.Y, dFx, tol) {
				t.Errorf("unexpected {}'({}): got:{} want:{}", test.name, x, fxDual.Y, dFx)
			}
		}
	}
}

struct dfTest {
	d: Dual
	f: f64
	r: Dual
}

let testsPowReal: []dfTest = [
	// PowReal(NaN+xϵ, ±0) = 1+NaNϵ for any x
	{d: {X: math::NaN(), Y: 0}, f: 0, r: {X: 1, Y: math::NaN()}},
	{d: {X: math::NaN(), Y: 0}, f: negZero, r: {X: 1, Y: math::NaN()}},
	{d: {X: math::NaN(), Y: 1}, f: 0, r: {X: 1, Y: math::NaN()}},
	{d: {X: math::NaN(), Y: 2}, f: negZero, r: {X: 1, Y: math::NaN()}},
	{d: {X: math::NaN(), Y: 3}, f: 0, r: {X: 1, Y: math::NaN()}},
	{d: {X: math::NaN(), Y: 1}, f: negZero, r: {X: 1, Y: math::NaN()}},
	{d: {X: math::NaN(), Y: 2}, f: 0, r: {X: 1, Y: math::NaN()}},
	{d: {X: math::NaN(), Y: 3}, f: negZero, r: {X: 1, Y: math::NaN()}},

	// PowReal(x, ±0) = 1 for any x
	{d: {X: 0, Y: 0}, f: 0, r: {X: 1, Y: 0}},
	{d: {X: negZero, Y: 0}, f: negZero, r: {X: 1, Y: 0}},
	{d: {X: math::Inf(1), Y: 0}, f: 0, r: {X: 1, Y: 0}},
	{d: {X: math::Inf(-1), Y: 0}, f: negZero, r: {X: 1, Y: 0}},
	{d: {X: 0, Y: 1}, f: 0, r: {X: 1, Y: 0}},
	{d: {X: negZero, Y: 1}, f: negZero, r: {X: 1, Y: 0}},
	{d: {X: math::Inf(1), Y: 1}, f: 0, r: {X: 1, Y: 0}},
	{d: {X: math::Inf(-1), Y: 1}, f: negZero, r: {X: 1, Y: 0}},

	// PowReal(1+xϵ, y) = (1+xyϵ) for any y
	{d: {X: 1, Y: 0}, f: 0, r: {X: 1, Y: 0}},
	{d: {X: 1, Y: 0}, f: 1, r: {X: 1, Y: 0}},
	{d: {X: 1, Y: 0}, f: 2, r: {X: 1, Y: 0}},
	{d: {X: 1, Y: 0}, f: 3, r: {X: 1, Y: 0}},
	{d: {X: 1, Y: 1}, f: 0, r: {X: 1, Y: 0}},
	{d: {X: 1, Y: 1}, f: 1, r: {X: 1, Y: 1}},
	{d: {X: 1, Y: 1}, f: 2, r: {X: 1, Y: 2}},
	{d: {X: 1, Y: 1}, f: 3, r: {X: 1, Y: 3}},
	{d: {X: 1, Y: 2}, f: 0, r: {X: 1, Y: 0}},
	{d: {X: 1, Y: 2}, f: 1, r: {X: 1, Y: 2}},
	{d: {X: 1, Y: 2}, f: 2, r: {X: 1, Y: 4}},
	{d: {X: 1, Y: 2}, f: 3, r: {X: 1, Y: 6}},

	// PowReal(x, 1) = x for any x
	{d: {X: 0, Y: 0}, f: 1, r: {X: 0, Y: 0}},
	{d: {X: negZero, Y: 0}, f: 1, r: {X: negZero, Y: 0}},
	{d: {X: 0, Y: 1}, f: 1, r: {X: 0, Y: 1}},
	{d: {X: negZero, Y: 1}, f: 1, r: {X: negZero, Y: 1}},
	{d: {X: math::NaN(), Y: 0}, f: 1, r: {X: math::NaN(), Y: 0}},
	{d: {X: math::NaN(), Y: 1}, f: 1, r: {X: math::NaN(), Y: 1}},
	{d: {X: math::NaN(), Y: 2}, f: 1, r: {X: math::NaN(), Y: 2}},

	// PowReal(NaN+xϵ, y) = NaN+NaNϵ
	{d: {X: math::NaN(), Y: 0}, f: 2, r: {X: math::NaN(), Y: math::NaN()}},
	{d: {X: math::NaN(), Y: 0}, f: 3, r: {X: math::NaN(), Y: math::NaN()}},
	{d: {X: math::NaN(), Y: 1}, f: 2, r: {X: math::NaN(), Y: math::NaN()}},
	{d: {X: math::NaN(), Y: 1}, f: 3, r: {X: math::NaN(), Y: math::NaN()}},
	{d: {X: math::NaN(), Y: 2}, f: 2, r: {X: math::NaN(), Y: math::NaN()}},
	{d: {X: math::NaN(), Y: 2}, f: 3, r: {X: math::NaN(), Y: math::NaN()}},

	// PowReal(x, NaN) = NaN+NaNϵ
	{d: {X: 0, Y: 0}, f: math::NaN(), r: {X: math::NaN(), Y: math::NaN()}},
	{d: {X: 2, Y: 0}, f: math::NaN(), r: {X: math::NaN(), Y: math::NaN()}},
	{d: {X: 3, Y: 0}, f: math::NaN(), r: {X: math::NaN(), Y: math::NaN()}},
	{d: {X: 0, Y: 1}, f: math::NaN(), r: {X: math::NaN(), Y: math::NaN()}},
	{d: {X: 2, Y: 1}, f: math::NaN(), r: {X: math::NaN(), Y: math::NaN()}},
	{d: {X: 3, Y: 1}, f: math::NaN(), r: {X: math::NaN(), Y: math::NaN()}},
	{d: {X: 0, Y: 2}, f: math::NaN(), r: {X: math::NaN(), Y: math::NaN()}},
	{d: {X: 2, Y: 2}, f: math::NaN(), r: {X: math::NaN(), Y: math::NaN()}},
	{d: {X: 3, Y: 2}, f: math::NaN(), r: {X: math::NaN(), Y: math::NaN()}},

	// Handled by math.Pow tests:
	//
	// Pow(±0, y) = ±Inf for y an odd integer < 0
	// Pow(±0, -Inf) = +Inf
	// Pow(±0, +Inf) = +0
	// Pow(±0, y) = +Inf for finite y < 0 and not an odd integer
	// Pow(±0, y) = ±0 for y an odd integer > 0
	// Pow(±0, y) = +0 for finite y > 0 and not an odd integer
	// Pow(-1, ±Inf) = 1

	// PowReal(x+0ϵ, +Inf) = +Inf+NaNϵ for |x| > 1
	{d: {X: 2, Y: 0}, f: math::Inf(1), r: {X: math::Inf(1), Y: math::NaN()}},
	{d: {X: 3, Y: 0}, f: math::Inf(1), r: {X: math::Inf(1), Y: math::NaN()}},

	// PowReal(x+yϵ, +Inf) = +Inf for |x| > 1
	{d: {X: 2, Y: 1}, f: math::Inf(1), r: {X: math::Inf(1), Y: math::Inf(1)}},
	{d: {X: 3, Y: 1}, f: math::Inf(1), r: {X: math::Inf(1), Y: math::Inf(1)}},
	{d: {X: 2, Y: 2}, f: math::Inf(1), r: {X: math::Inf(1), Y: math::Inf(1)}},
	{d: {X: 3, Y: 2}, f: math::Inf(1), r: {X: math::Inf(1), Y: math::Inf(1)}},

	// PowReal(x, -Inf) = +0+NaNϵ for |x| > 1
	{d: {X: 2, Y: 0}, f: math::Inf(-1), r: {X: 0, Y: math::NaN()}},
	{d: {X: 3, Y: 0}, f: math::Inf(-1), r: {X: 0, Y: math::NaN()}},
	{d: {X: 2, Y: 1}, f: math::Inf(-1), r: {X: 0, Y: math::NaN()}},
	{d: {X: 3, Y: 1}, f: math::Inf(-1), r: {X: 0, Y: math::NaN()}},
	{d: {X: 2, Y: 2}, f: math::Inf(-1), r: {X: 0, Y: math::NaN()}},
	{d: {X: 3, Y: 2}, f: math::Inf(-1), r: {X: 0, Y: math::NaN()}},

	// PowReal(x+yϵ, +Inf) = +0+NaNϵ for |x| < 1
	{d: {X: 0.1, Y: 0}, f: math::Inf(1), r: {X: 0, Y: math::NaN()}},
	{d: {X: 0.1, Y: 0.1}, f: math::Inf(1), r: {X: 0, Y: math::NaN()}},
	{d: {X: 0.2, Y: 0.2}, f: math::Inf(1), r: {X: 0, Y: math::NaN()}},
	{d: {X: 0.5, Y: 0.5}, f: math::Inf(1), r: {X: 0, Y: math::NaN()}},

	// PowReal(x+0ϵ, -Inf) = +Inf+NaNϵ for |x| < 1
	{d: {X: 0.1, Y: 0}, f: math::Inf(-1), r: {X: math::Inf(1), Y: math::NaN()}},
	{d: {X: 0.2, Y: 0}, f: math::Inf(-1), r: {X: math::Inf(1), Y: math::NaN()}},

	// PowReal(x, -Inf) = +Inf-Infϵ for |x| < 1
	{d: {X: 0.1, Y: 0.1}, f: math::Inf(-1), r: {X: math::Inf(1), Y: math::Inf(-1)}},
	{d: {X: 0.2, Y: 0.1}, f: math::Inf(-1), r: {X: math::Inf(1), Y: math::Inf(-1)}},
	{d: {X: 0.1, Y: 0.2}, f: math::Inf(-1), r: {X: math::Inf(1), Y: math::Inf(-1)}},
	{d: {X: 0.2, Y: 0.2}, f: math::Inf(-1), r: {X: math::Inf(1), Y: math::Inf(-1)}},
	{d: {X: 0.1, Y: 1}, f: math::Inf(-1), r: {X: math::Inf(1), Y: math::Inf(-1)}},
	{d: {X: 0.2, Y: 1}, f: math::Inf(-1), r: {X: math::Inf(1), Y: math::Inf(-1)}},
	{d: {X: 0.1, Y: 2}, f: math::Inf(-1), r: {X: math::Inf(1), Y: math::Inf(-1)}},
	{d: {X: 0.2, Y: 2}, f: math::Inf(-1), r: {X: math::Inf(1), Y: math::Inf(-1)}},

	// Handled by math.Pow tests:
	//
	// Pow(+Inf, y) = +Inf for y > 0
	// Pow(+Inf, y) = +0 for y < 0
	// Pow(-Inf, y) = Pow(-0, -y)

	// PowReal(x, y) = NaN+NaNϵ for finite x < 0 and finite non-integer y
	{d: {X: -1, Y: -1}, f: 0.5, r: {X: math::NaN(), Y: math::NaN()}},
	{d: {X: -1, Y: 2}, f: 0.5, r: {X: math::NaN(), Y: math::NaN()}},
]

#test
fn testPowReal(t: &testing::T) {
	const tol = 1e-15
	for _, test in testsPowReal {
		mut r := test.d
		r.PowReal(&test.d, test.f)
		if !sameDual(r, test.r, tol) {
			t.Errorf("unexpected PowReal({}, {}): got:{} want:{}", test.d, test.f, r, test.r)
		}
	}
}

fn sameDual(a: Dual, b: Dual, tol: f64): bool {
	ret same(a.X, b.X, tol) && same(a.Y, b.Y, tol)
}

fn same(a: f64, b: f64, tol: f64): bool {
	ret math::IsNaN(a) && math::IsNaN(b) || julenum::Tolerance(a, b, tol)
}