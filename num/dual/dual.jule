// Copyright 2025 mertcandav.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// Dual with floating-point precision.
struct Dual {
	X: f64
	Y: f64
}

impl Dual {
	// Reports whether all fields of dual are zero.
	fn Zero(*self): bool {
		ret self.X == 0 && self.Y == 0
	}

	// Sets self to the sum x+y.
	fn Add(mut *self, &x: *Dual, &y: *Dual) {
		self.X, self.Y = x.X+y.X, x.Y+y.Y
	}

	// Sets self to the difference x-y.
	fn Sub(mut *self, &x: *Dual, &y: *Dual) {
		self.X, self.Y = x.X-y.X, x.Y-y.Y
	}

	// Sets self to the product x*y.
	fn Mul(mut *self, &x: *Dual, &y: *Dual) {
		self.X, self.Y = x.X*y.X, x.X*y.Y+x.Y*y.X
	}
}