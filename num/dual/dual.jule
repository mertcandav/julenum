// Copyright 2025 mertcandav.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// Package dual provides the dual numeric type and functions. Dual numbers
// are an extension of the real numbers in the form a+bϵ where ϵ^2=0, but ϵ≠0.
//
// See https://en.wikipedia.org/wiki/Dual_number for details of their properties
// and uses.

use "std/math"

// Dual with floating-point precision.
struct Dual {
	X: f64
	Y: f64
}

impl Dual {
	// Reports whether all fields of dual are zero.
	fn Zero(*self): bool {
		ret self.X == 0 && self.Y == 0
	}

	// Sets self to the sum x+y.
	fn Add(mut *self, &x: *Dual, &y: *Dual) {
		self.X, self.Y = x.X+y.X, x.Y+y.Y
	}

	// Sets self to the difference x-y.
	fn Sub(mut *self, &x: *Dual, &y: *Dual) {
		self.X, self.Y = x.X-y.X, x.Y-y.Y
	}

	// Sets self to the product x*y.
	fn Mul(mut *self, &x: *Dual, &y: *Dual) {
		self.X, self.Y = x.X*y.X, x.X*y.Y+x.Y*y.X
	}

	// Sets self to d scaled by k.
	fn Scale(mut *self, &d: *Dual, k: f64) {
		self.X, self.Y = d.X*k, d.Y*k
	}

	// Sets self to inverse of d.
	//
	// Special cases are:
	//	Inv(±Inf) = ±0-0ϵ
	//	Inv(±0) = ±Inf-Infϵ
	fn Inv(mut *self, &d: *Dual) {
		self.X, self.Y = 1/d.X, -d.Y/(d.X*d.X)
	}

	// Sets self to absolute value of d.
	fn Abs(mut *self, &d: *Dual) {
		if math::Signbit(d.X) {
			self.Scale(d, -1)
		} else {
			*self = *d
		}
	}
}