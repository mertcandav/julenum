// Copyright 2025 mertcandav.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// Implementation derived from the gonum.
//
// Copyright ©2018 The Gonum Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

use "julenum/num/quat"
use "std/math"

impl Quat {
	// Sets self to q**p, the base-q exponential of p.
	//
	// Special cases are (in order):
	//	PowReal(NaN+xϵ, ±0) = 1+NaNϵ for any q
	//	PowReal(q, ±0) = 1 for any q
	//	PowReal(1+xϵ, p) = 1+xyϵ for any p
	//	PowReal(q, 1) = q for any q
	//	PowReal(NaN+xϵ, p) = NaN+NaNϵ
	//	PowReal(q, NaN) = NaN+NaNϵ
	//	PowReal(±0, p) = ±Inf for p an odd integer < 0
	//	PowReal(±0, -Inf) = +Inf
	//	PowReal(±0, +Inf) = +0
	//	PowReal(±0, p) = +Inf for finite p < 0 and not an odd integer
	//	PowReal(±0, p) = ±0 for p an odd integer > 0
	//	PowReal(±0, p) = +0 for finite p > 0 and not an odd integer
	//	PowReal(-1, ±Inf) = 1
	//	PowReal(q+0ϵ, +Inf) = +Inf+NaNϵ for |q| > 1
	//	PowReal(q+yϵ, +Inf) = +Inf for |q| > 1
	//	PowReal(q, -Inf) = +0+NaNϵ for |q| > 1
	//	PowReal(q, +Inf) = +0+NaNϵ for |q| < 1
	//	PowReal(q+0ϵ, -Inf) = +Inf+NaNϵ for |q| < 1
	//	PowReal(q, -Inf) = +Inf-Infϵ for |q| < 1
	//	PowReal(+Inf, p) = +Inf for p > 0
	//	PowReal(+Inf, p) = +0 for p < 0
	//	PowReal(-Inf, p) = Pow(-0, -p)
	fn PowReal(mut *self, &q: *Quat, p: f64) {
		match {
		| p == 0:
			match {
			| q.X.NaN():
				self.X, self.Y = quat::Quat{W: 1}, quat::NaN()
				ret
			| q.X.Zero() | q.X.Inf():
				self.X, self.Y = quat::Quat{W: 1}, quat::Quat{}
				ret
			}
		| p == 1:
			*self = *q
			ret
		| math::IsInf(p, 1):
			if q.Abs().X > 1 {
				if q.Y.Zero() {
					self.X, self.Y = quat::Inf(1), quat::NaN()
				} else {
					self.X, self.Y = quat::Inf(1), quat::Inf(1)
				}
				ret
			}
			self.X, self.Y = quat::Quat{}, quat::NaN()
			ret
		| math::IsInf(p, -1):
			if q.Abs().X > 1 {
				self.X, self.Y = quat::Quat{}, quat::NaN()
				ret
			}
			if q.Y.Zero() {
				self.X, self.Y = quat::Inf(1), quat::NaN()
			} else {
				self.X, self.Y = quat::Inf(1), quat::Inf(1)
			}
			ret
		}
		mut z := quat::Quat{W: p - 1}
		mut r := q.X
		r.Pow(&r, &z)
		z.W = p
		r.Mul(&z, &r)
		self.X.Pow(&self.X, &z)
		self.Y.Mul(&self.Y, &r)
	}

	// Sets self to the product q**p, the base-q exponential of p.
	fn Pow(mut *self, &q: *Quat, &p: *Quat) {
		// exp(p * log(q))
		self.Log(q)
		self.Mul(p, self)
		self.Exp(self)
	}

	// Sets self to the square root of q
	//
	// Special cases are:
	//	Sqrt(+Inf) = +Inf
	//	Sqrt(±0) = (±0+Infϵ)
	//	Sqrt(x < 0) = NaN
	//	Sqrt(NaN) = NaN
	fn Sqrt(mut *self, &q: *Quat) {
		self.PowReal(q, 0.5)
	}

	// Sets self to e**q, the base-e exponential of q.
	//
	// Special cases are:
	//	Exp(+Inf) = +Inf
	//	Exp(NaN) = NaN
	//
	// Very large values overflow to 0 or +Inf.
	// Very small values underflow to 1.
	fn Exp(mut *self, &q: *Quat) {
		self.X.Exp(&q.X)
		self.Y.Mul(&self.X, &q.Y)
	}

	// Sets self to the natural logarithm of q.
	//
	// Special cases are:
	//	Log(+Inf) = (+Inf+0ϵ)
	//	Log(0) = (-Inf±Infϵ)
	//	Log(x < 0) = NaN
	//	Log(NaN) = NaN
	fn Log(mut *self, &q: *Quat) {
		match {
		| q.X.Zero():
			self.X.Log(&q.X)
			self.Y = quat::Inf(1)
			ret
		| q.X.Inf():
			self.X.Log(&q.X)
			self.Y = quat::Quat{}
			ret
		}
		mut xlog := q.X // q may be alias for self.
		xlog.Log(&q.X)
		self.X.Inv(&q.X)
		self.Y.Mul(&q.Y, &self.X)
		self.X = xlog
	}
}