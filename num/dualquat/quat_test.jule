// Copyright 2025 mertcandav.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "julenum"
use "julenum/num/quat"
use "std/math"
use "std/testing"

fn dExp(mut x: quat::Quat): quat::Quat {
	x.Exp(&x)
	ret x
}
fn dLog(mut x: quat::Quat): quat::Quat {
	match {
	| x.Zero():
		ret quat::Inf(1)
	| x.Inf():
		ret quat::Quat{}
	}
	x.Inv(&x)
	ret x
}
fn dSqrt(mut x: quat::Quat): quat::Quat {
	x.Sqrt(&x)
	x.Inv(&x)
	x.Scale(&x, 0.5)
	ret x
}
fn dInv(mut x: quat::Quat): quat::Quat {
	x.Mul(&x, &x)
	x.Inv(&x)
	x.Scale(&x, -1)
	ret x
}
fn scale(mut x: quat::Quat, k: f64): quat::Quat {
	x.Scale(&x, k)
	ret x
}

let zeroQuat = quat::Quat{}
let negZero = math::Copysign(0, -1)
let oneReal = quat::Quat{W: 1}
let negZeroQuat = scale(zeroQuat, -1)
let one = quat::Quat{W: 1, X: 1, Y: 1, Z: 1}
let negOne = scale(one, -1)
let half = scale(one, 0.5)
let negHalf = scale(half, -1)
let two = scale(one, 2)
let negTwo = scale(two, -1)
let three = scale(one, 3)
let negThree = scale(three, -1)
let four = scale(one, 4)
let six = scale(one, 6)

struct dualTest {
	name:   str
	x:      []quat::Quat
	fnDual: fn(mut &x: *Quat)
	f:      fn(mut &x: *quat::Quat)
	dFn:    fn(mut x: quat::Quat): quat::Quat
}

let testsDual: []dualTest = [
	{
		name: "inv",
		x: [quat::NaN(), quat::Inf(1), negThree, negTwo, negOne, negHalf, negZeroQuat, zeroQuat, half, one, two, three],
		fnDual: fn|mut q| q.Inv(q),
		f: fn|mut q| q.Inv(q),
		dFn: dInv,
	},
	{
		name: "exp",
		x: [quat::NaN(), quat::Inf(1), negThree, negTwo, negOne, negHalf, negZeroQuat, zeroQuat, half, one, two, three],
		fnDual: fn|mut q| q.Exp(q),
		f: fn|mut q| q.Exp(q),
		dFn: dExp,
	},
	{
		name: "sqrt",
		x: [quat::NaN(), quat::Inf(1), negThree, negTwo, negOne, negHalf, negZeroQuat, zeroQuat, half, one, two, three],
		fnDual: fn|mut q| q.Sqrt(q),
		f: fn|mut q| q.Sqrt(q),
		dFn: dSqrt,
	},
]

#test
fn testNumber(t: &testing::T) {
	const tol = 1e-15
	for _, test in testsDual {
		for (_, mut x) in test.x {
			mut fxDual := Quat{x, oneReal}
			test.fnDual(&fxDual)
			mut fx := x
			test.f(&fx)
			dFx := test.dFn(x)
			if !same(fxDual.X, fx, tol) {
				t.Errorf("unexpected {}({}): got:{} r:{}", test.name, x, fxDual.X, fx)
			}
			if !same(fxDual.Y, dFx, tol) {
				t.Errorf("unexpected {}'({}): got:{} r:{}", test.name, x, fxDual.Y, dFx)
			}
		}
	}
}

let invTests: []Quat = [
	{X: quat::Quat{W: 1}},
	{X: quat::Quat{W: 1}, Y: quat::Quat{W: 1}},
	{X: quat::Quat{X: 1}, Y: quat::Quat{W: 1}},
	{X: quat::Quat{W: 1}, Y: quat::Quat{W: 1, X: 1}},
	{X: quat::Quat{W: 1, X: 1}, Y: quat::Quat{W: 1, X: 1}},
	{X: quat::Quat{W: 1, X: 10}, Y: quat::Quat{W: 1, X: 5}},
	{X: quat::Quat{W: 10, X: 1}, Y: quat::Quat{W: 5, X: 1}},
	{X: quat::Quat{W: 1}, Y: quat::Quat{W: 1, X: 1, Z: 1}},
	{X: quat::Quat{W: 12, X: 1}, Y: quat::Quat{W: 1, X: 1}},
	{X: quat::Quat{W: 12, X: 1, Y: 3}},
]

#test
fn testInv(t: &testing::T) {
	const tol = 1e-15
	for _, x in invTests {
		mut inv := x
		inv.Inv(&x)
		inv.Mul(&x, &inv)
		want := Quat{X: quat::Quat{W: 1}}
		if !sameDual(inv, want, tol) {
			t.Errorf("unexpected Mul({}, Inv({})): got:{} want:{}", x, x, inv, want)
		}
	}
}

struct powRealTest {
	d: Quat
	p: f64
	r: Quat
}

let testsPowReal: []powRealTest = [
	// PowReal(NaN+xϵ, ±0) = 1+NaNϵ for any x
	{d: {X: quat::NaN(), Y: zeroQuat}, p: 0, r: {X: oneReal, Y: quat::NaN()}},
	{d: {X: quat::NaN(), Y: zeroQuat}, p: negZero, r: {X: oneReal, Y: quat::NaN()}},
	{d: {X: quat::NaN(), Y: one}, p: 0, r: {X: oneReal, Y: quat::NaN()}},
	{d: {X: quat::NaN(), Y: two}, p: negZero, r: {X: oneReal, Y: quat::NaN()}},
	{d: {X: quat::NaN(), Y: three}, p: 0, r: {X: oneReal, Y: quat::NaN()}},
	{d: {X: quat::NaN(), Y: one}, p: negZero, r: {X: oneReal, Y: quat::NaN()}},
	{d: {X: quat::NaN(), Y: two}, p: 0, r: {X: oneReal, Y: quat::NaN()}},
	{d: {X: quat::NaN(), Y: three}, p: negZero, r: {X: oneReal, Y: quat::NaN()}},

	// PowReal(x, ±0) = 1 for any x
	{d: {X: zeroQuat, Y: zeroQuat}, p: 0, r: {X: oneReal, Y: zeroQuat}},
	{d: {X: negZeroQuat, Y: zeroQuat}, p: negZero, r: {X: oneReal, Y: zeroQuat}},
	{d: {X: quat::Inf(1), Y: zeroQuat}, p: 0, r: {X: oneReal, Y: zeroQuat}},
	{d: {X: quat::Inf(1), Y: zeroQuat}, p: negZero, r: {X: oneReal, Y: zeroQuat}},
	{d: {X: zeroQuat, Y: one}, p: 0, r: {X: oneReal, Y: zeroQuat}},
	{d: {X: negZeroQuat, Y: one}, p: negZero, r: {X: oneReal, Y: zeroQuat}},
	{d: {X: quat::Inf(1), Y: one}, p: 0, r: {X: oneReal, Y: zeroQuat}},
	{d: {X: quat::Inf(1), Y: one}, p: negZero, r: {X: oneReal, Y: zeroQuat}},

	// PowReal(1+xϵ, y) = (1+xyϵ) for any y
	{d: {X: oneReal, Y: zeroQuat}, p: 0, r: {X: oneReal, Y: zeroQuat}},
	{d: {X: oneReal, Y: zeroQuat}, p: 1, r: {X: oneReal, Y: zeroQuat}},
	{d: {X: oneReal, Y: zeroQuat}, p: 2, r: {X: oneReal, Y: zeroQuat}},
	{d: {X: oneReal, Y: zeroQuat}, p: 3, r: {X: oneReal, Y: zeroQuat}},
	{d: {X: oneReal, Y: one}, p: 0, r: {X: oneReal, Y: zeroQuat}},
	{d: {X: oneReal, Y: one}, p: 1, r: {X: oneReal, Y: one}},
	{d: {X: oneReal, Y: one}, p: 2, r: {X: oneReal, Y: two}},
	{d: {X: oneReal, Y: one}, p: 3, r: {X: oneReal, Y: three}},
	{d: {X: oneReal, Y: two}, p: 0, r: {X: oneReal, Y: zeroQuat}},
	{d: {X: oneReal, Y: two}, p: 1, r: {X: oneReal, Y: two}},
	{d: {X: oneReal, Y: two}, p: 2, r: {X: oneReal, Y: four}},
	{d: {X: oneReal, Y: two}, p: 3, r: {X: oneReal, Y: six}},

	// PowReal(x, 1) = x for any x
	{d: {X: zeroQuat, Y: zeroQuat}, p: 1, r: {X: zeroQuat, Y: zeroQuat}},
	{d: {X: negZeroQuat, Y: zeroQuat}, p: 1, r: {X: negZeroQuat, Y: zeroQuat}},
	{d: {X: zeroQuat, Y: one}, p: 1, r: {X: zeroQuat, Y: one}},
	{d: {X: negZeroQuat, Y: one}, p: 1, r: {X: negZeroQuat, Y: one}},
	{d: {X: quat::NaN(), Y: zeroQuat}, p: 1, r: {X: quat::NaN(), Y: zeroQuat}},
	{d: {X: quat::NaN(), Y: one}, p: 1, r: {X: quat::NaN(), Y: one}},
	{d: {X: quat::NaN(), Y: two}, p: 1, r: {X: quat::NaN(), Y: two}},

	// PowReal(NaN+xϵ, y) = NaN+NaNϵ
	{d: {X: quat::NaN(), Y: zeroQuat}, p: 2, r: {X: quat::NaN(), Y: quat::NaN()}},
	{d: {X: quat::NaN(), Y: zeroQuat}, p: 3, r: {X: quat::NaN(), Y: quat::NaN()}},
	{d: {X: quat::NaN(), Y: one}, p: 2, r: {X: quat::NaN(), Y: quat::NaN()}},
	{d: {X: quat::NaN(), Y: one}, p: 3, r: {X: quat::NaN(), Y: quat::NaN()}},
	{d: {X: quat::NaN(), Y: two}, p: 2, r: {X: quat::NaN(), Y: quat::NaN()}},
	{d: {X: quat::NaN(), Y: two}, p: 3, r: {X: quat::NaN(), Y: quat::NaN()}},

	// PowReal(x, NaN) = NaN+NaNϵ
	{d: {X: zeroQuat, Y: zeroQuat}, p: math::NaN(), r: {X: quat::NaN(), Y: quat::NaN()}},
	{d: {X: two, Y: zeroQuat}, p: math::NaN(), r: {X: quat::NaN(), Y: quat::NaN()}},
	{d: {X: three, Y: zeroQuat}, p: math::NaN(), r: {X: quat::NaN(), Y: quat::NaN()}},
	{d: {X: zeroQuat, Y: one}, p: math::NaN(), r: {X: quat::NaN(), Y: quat::NaN()}},
	{d: {X: two, Y: one}, p: math::NaN(), r: {X: quat::NaN(), Y: quat::NaN()}},
	{d: {X: three, Y: one}, p: math::NaN(), r: {X: quat::NaN(), Y: quat::NaN()}},
	{d: {X: zeroQuat, Y: two}, p: math::NaN(), r: {X: quat::NaN(), Y: quat::NaN()}},
	{d: {X: two, Y: two}, p: math::NaN(), r: {X: quat::NaN(), Y: quat::NaN()}},
	{d: {X: three, Y: two}, p: math::NaN(), r: {X: quat::NaN(), Y: quat::NaN()}},

	// Handled by quat.Quat::Pow tests:
	//
	// Pow(±0, y) = ±Inf for y an odd integer < 0
	// Pow(±0, -Inf) = +Inf
	// Pow(±0, +Inf) = +0
	// Pow(±0, y) = +Inf for finite y < 0 and not an odd integer
	// Pow(±0, y) = ±0 for y an odd integer > 0
	// Pow(±0, y) = +0 for finite y > 0 and not an odd integer
	// Pow(-1, ±Inf) = 1

	// PowReal(x+0ϵ, +Inf) = +Inf+NaNϵ for |x| > 1
	{d: {X: two, Y: zeroQuat}, p: math::Inf(1), r: {X: quat::Inf(1), Y: quat::NaN()}},
	{d: {X: three, Y: zeroQuat}, p: math::Inf(1), r: {X: quat::Inf(1), Y: quat::NaN()}},

	// PowReal(x+yϵ, +Inf) = +Inf for |x| > 1
	{d: {X: two, Y: one}, p: math::Inf(1), r: {X: quat::Inf(1), Y: quat::Inf(1)}},
	{d: {X: three, Y: one}, p: math::Inf(1), r: {X: quat::Inf(1), Y: quat::Inf(1)}},
	{d: {X: two, Y: two}, p: math::Inf(1), r: {X: quat::Inf(1), Y: quat::Inf(1)}},
	{d: {X: three, Y: two}, p: math::Inf(1), r: {X: quat::Inf(1), Y: quat::Inf(1)}},

	// PowReal(x, -Inf) = +0+NaNϵ for |x| > 1
	{d: {X: two, Y: zeroQuat}, p: math::Inf(-1), r: {X: zeroQuat, Y: quat::NaN()}},
	{d: {X: three, Y: zeroQuat}, p: math::Inf(-1), r: {X: zeroQuat, Y: quat::NaN()}},
	{d: {X: two, Y: one}, p: math::Inf(-1), r: {X: zeroQuat, Y: quat::NaN()}},
	{d: {X: three, Y: one}, p: math::Inf(-1), r: {X: zeroQuat, Y: quat::NaN()}},
	{d: {X: two, Y: two}, p: math::Inf(-1), r: {X: zeroQuat, Y: quat::NaN()}},
	{d: {X: three, Y: two}, p: math::Inf(-1), r: {X: zeroQuat, Y: quat::NaN()}},

	// PowReal(x+yϵ, +Inf) = +0+NaNϵ for |x| < 1
	{d: {X: scale(one, 0.1), Y: zeroQuat}, p: math::Inf(1), r: {X: zeroQuat, Y: quat::NaN()}},
	{d: {X: scale(one, 0.1), Y: scale(one, 0.1)}, p: math::Inf(1), r: {X: zeroQuat, Y: quat::NaN()}},
	{d: {X: scale(one, 0.2), Y: scale(one, 0.2)}, p: math::Inf(1), r: {X: zeroQuat, Y: quat::NaN()}},
	{d: {X: scale(one, 0.5), Y: scale(one, 0.5)}, p: math::Inf(1), r: {X: zeroQuat, Y: quat::NaN()}},

	// PowReal(x+0ϵ, -Inf) = +Inf+NaNϵ for |x| < 1
	{d: {X: scale(one, 0.1), Y: zeroQuat}, p: math::Inf(-1), r: {X: quat::Inf(1), Y: quat::NaN()}},
	{d: {X: scale(one, 0.2), Y: zeroQuat}, p: math::Inf(-1), r: {X: quat::Inf(1), Y: quat::NaN()}},

	// PowReal(x, -Inf) = +Inf-Infϵ for |x| < 1
	{d: {X: scale(one, 0.1), Y: scale(one, 0.1)}, p: math::Inf(-1), r: {X: quat::Inf(1), Y: quat::Inf(1)}},
	{d: {X: scale(one, 0.2), Y: scale(one, 0.1)}, p: math::Inf(-1), r: {X: quat::Inf(1), Y: quat::Inf(1)}},
	{d: {X: scale(one, 0.1), Y: scale(one, 0.2)}, p: math::Inf(-1), r: {X: quat::Inf(1), Y: quat::Inf(1)}},
	{d: {X: scale(one, 0.2), Y: scale(one, 0.2)}, p: math::Inf(-1), r: {X: quat::Inf(1), Y: quat::Inf(1)}},
	{d: {X: scale(one, 0.1), Y: one}, p: math::Inf(-1), r: {X: quat::Inf(1), Y: quat::Inf(1)}},
	{d: {X: scale(one, 0.2), Y: one}, p: math::Inf(-1), r: {X: quat::Inf(1), Y: quat::Inf(1)}},
	{d: {X: scale(one, 0.1), Y: two}, p: math::Inf(-1), r: {X: quat::Inf(1), Y: quat::Inf(1)}},
	{d: {X: scale(one, 0.2), Y: two}, p: math::Inf(-1), r: {X: quat::Inf(1), Y: quat::Inf(1)}},

	// Handled by quat::Quat.Pow tests:
	//
	// Pow(+Inf, y) = +Inf for y > 0
	// Pow(+Inf, y) = +0 for y < 0
	// Pow(-Inf, y) = Pow(-0, -y)
]

#test
fn testPowReal(t: &testing::T) {
	const tol = 1e-15
	for _, test in testsPowReal {
		mut r := test.d
		r.PowReal(&test.d, test.p)
		if !sameDual(r, test.r, tol) {
			t.Errorf("unexpected PowReal({}, {}): got:{} r:{}", test.d, test.p, r, test.r)
		}
	}
}

fn sameDual(a: Quat, b: Quat, tol: f64): bool {
	ret same(a.X, b.X, tol) && same(a.Y, b.Y, tol)
}

fn same(a: quat::Quat, b: quat::Quat, tol: f64): bool {
	ret a.NaN() && b.NaN() || a.Inf() && b.Inf() || equalApprox(a, b, tol)
}

fn equalApprox(a: quat::Quat, b: quat::Quat, tol: f64): bool {
	ret julenum::Tolerance(a.W, b.W, tol) &&
		julenum::Tolerance(a.X, b.X, tol) &&
		julenum::Tolerance(a.Y, b.Y, tol) &&
		julenum::Tolerance(a.Z, b.Z, tol)
}