// Copyright 2025 mertcandav.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use jn "julenum"
use "std/math"
use "std/math/cmplx"
use "std/testing"

struct quatArithTest {
	x: Quat
	y: Quat
	f: f64

	rAdd:   Quat
	rSub:   Quat
	rMul:   Quat
	rScale: Quat
}

let testsQuatArith: []quatArithTest = [
	{
		x: {1, 1, 1, 1}, y: {1, 1, 1, 1},
		f: 2,
		rAdd: {2, 2, 2, 2},
		rSub: {0, 0, 0, 0},
		rMul: {-2, 2, 2, 2},
		rScale: {2, 2, 2, 2},
	},
	{
		x: {1, 1, 1, 1}, y: {2, -1, 1, -1},
		f: -2,
		rAdd: {3, 0, 2, 0},
		rSub: {-1, 2, 0, 2},
		rMul: {3, -1, 3, 3},
		rScale: {-2, -2, -2, -2},
	},
	{
		x: {1, 2, 3, 4}, y: {4, -3, 2, -1},
		f: 2,
		rAdd: {5, -1, 5, 3},
		rSub: {-3, 5, 1, 5},
		rMul: {8, -6, 4, 28},
		rScale: {2, 4, 6, 8},
	},
	{
		x: {1, 2, 3, 4}, y: {-4, 3, -2, 1},
		f: -2,
		rAdd: {-3, 5, 1, 5},
		rSub: {5, -1, 5, 3},
		rMul: {-8, 6, -4, -28},
		rScale: {-2, -4, -6, -8},
	},
	{
		x: {-4, 3, -2, 1}, y: {1, 2, 3, 4},
		f: 0.5,
		rAdd: {-3, 5, 1, 5},
		rSub: {-5, 1, -5, -3},
		rMul: {-8, -16, -24, -2},
		rScale: {-2, 1.5, -1, 0.5},
	},
]

#test
fn testQuatAdd(t: &testing::T) {
	for _, test in testsQuatArith {
		mut x, y := test.x, test.y
		x.Add(&x, &y)
		if x != test.rAdd {
			t.Errorf("expected {}, found {}, for Add({}, {})", test.rAdd, x, test.x, test.y)
		}
	}
}

#test
fn testQuatSub(t: &testing::T) {
	for _, test in testsQuatArith {
		mut x, y := test.x, test.y
		x.Sub(&x, &y)
		if x != test.rSub {
			t.Errorf("expected {}, found {}, for Sub({}, {})", test.rSub, x, test.x, test.y)
		}
	}
}

#test
fn testQuatMul(t: &testing::T) {
	for _, test in testsQuatArith {
		mut x, y := test.x, test.y
		x.Mul(&x, &y)
		if x != test.rMul {
			t.Errorf("expected {}, found {}, for Mul({}, {})", test.rMul, x, test.x, test.y)
		}
	}
}

#test
fn testQuatScale(t: &testing::T) {
	for _, test in testsQuatArith {
		mut x := test.x
		x.Scale(&x, test.f)
		if x != test.rScale {
			t.Errorf("expected {}, found {}, for Scale({}, {})", test.rScale, x, test.x, test.f)
		}
	}
}

let nan = math::NaN()
let inf = math::Inf(1)

struct testQuatBool {
	q: Quat
	r: bool
}

let testsQuatNaN: []testQuatBool = [
	{q: NaN(), r: true},
	{q: {W: nan, X: nan, Y: nan, Z: nan}, r: true},
	{q: {W: nan, X: 0, Y: 0, Z: 0}, r: true},
	{q: {W: 0, X: nan, Y: 0, Z: 0}, r: true},
	{q: {W: 0, X: 0, Y: nan, Z: 0}, r: true},
	{q: {W: 0, X: 0, Y: 0, Z: nan}, r: true},
	{q: {W: inf, X: nan, Y: nan, Z: nan}, r: false},
	{q: {W: nan, X: inf, Y: nan, Z: nan}, r: false},
	{q: {W: nan, X: nan, Y: inf, Z: nan}, r: false},
	{q: {W: nan, X: nan, Y: nan, Z: inf}, r: false},
	{q: {W: -inf, X: nan, Y: nan, Z: nan}, r: false},
	{q: {W: nan, X: -inf, Y: nan, Z: nan}, r: false},
	{q: {W: nan, X: nan, Y: -inf, Z: nan}, r: false},
	{q: {W: nan, X: nan, Y: nan, Z: -inf}, r: false},
	{q: {}, r: false},
]

#test
fn testQuatNaN(t: &testing::T) {
	for _, test in testsQuatNaN {
		r := test.q.NaN()
		if r != test.r {
			t.Errorf("expected {}, found {}, for NaN({})", test.r, r, test.q)
		}
	}
}

let testsQuatInf: []testQuatBool = [
	{q: Inf(0), r: true},
	{q: {W: inf, X: inf, Y: inf, Z: inf}, r: true},
	{q: {W: -inf, X: -inf, Y: -inf, Z: -inf}, r: true},
	{q: {W: inf, X: nan, Y: nan, Z: nan}, r: true},
	{q: {W: nan, X: inf, Y: nan, Z: nan}, r: true},
	{q: {W: nan, X: nan, Y: inf, Z: nan}, r: true},
	{q: {W: nan, X: nan, Y: nan, Z: inf}, r: true},
	{q: {W: -inf, X: nan, Y: nan, Z: nan}, r: true},
	{q: {W: nan, X: -inf, Y: nan, Z: nan}, r: true},
	{q: {W: nan, X: nan, Y: -inf, Z: nan}, r: true},
	{q: {W: nan, X: nan, Y: nan, Z: -inf}, r: true},
	{q: {W: inf}, r: true},
	{q: {X: inf}, r: true},
	{q: {Y: inf}, r: true},
	{q: {Z: inf}, r: true},
	{q: {W: -inf}, r: true},
	{q: {X: -inf}, r: true},
	{q: {Y: -inf}, r: true},
	{q: {Z: -inf}, r: true},
	{q: {}, r: false},
]

#test
fn testQuatInf(t: &testing::T) {
	for _, test in testsQuatInf {
		r := test.q.Inf()
		if r != test.r {
			t.Errorf("expected {}, found {}, for Inf({})", test.r, r, test.q)
		}
	}
}

struct testQuatF64 {
	q: Quat
	r: f64
}

let testsQuatAbs: []testQuatF64 = [
	{q: {}, r: 0},
	{q: NaN(), r: nan},
	{q: Inf(0), r: inf},
	{q: {W: 1, X: 1, Y: 1, Z: 1}, r: 2},
	{q: {W: -1, X: 1, Y: -1, Z: 1}, r: 2},
	{q: {W: 1, X: 2, Y: 3, Z: 4}, r: math::Sqrt(1 + 4 + 9 + 16)},
	{q: {W: -1, X: -2, Y: -3, Z: -4}, r: math::Sqrt(1 + 4 + 9 + 16)},
]

#test
fn testQuatAbs(t: &testing::T) {
	for _, test in testsQuatAbs {
		r := test.q.Abs()
		if math::IsNaN(test.r) {
			if !math::IsNaN(r) {
				t.Errorf("expected {}, found {}, for Abs({})", test.r, r, test.q)
			}
			continue
		}
		if r != test.r {
			t.Errorf("expected {}, found {}, for Inf({})", test.r, r, test.q)
		}
	}
}

// r = want NaN
let testsQuatInv: []testQuatBool = [
	{q: {W: 1, X: 1, Y: 1, Z: 1}},
	{q: {W: 3, X: -1, Y: 5, Z: -40}},
	{q: {W: 1e6, X: -1e5, Y: 4, Z: -10}},
	{q: {W: 0, X: 1, Y: 1, Z: 1}},
	{q: {W: 1, X: 0, Y: 1, Z: 1}},
	{q: {W: 1, X: 1, Y: 0, Z: 1}},
	{q: {W: 1, X: 1, Y: 1, Z: 0}},
	{q: {}, r: true},
]

#test
fn testQuatInv(t: &testing::T) {
	for _, test in testsQuatInv {
		mut r := test.q
		r.Inv(&r)
		r.Mul(&r, &test.q)
		if test.r { // want NaN
			if !r.NaN() {
				t.Errorf("expected NaN, found {}, for Inv({})", r, test.q)
			}
			continue
		}
		if !jn::Close(r.W, 1) || !jn::Close(r.Abs(), 1) {
			t.Errorf("expected W=1, found {}, for Inv({})", r, test.q)
		}
	}
}

struct testQuatQuat {
	q: Quat
	r: Quat
}

let testsQuatNormalize: []testQuatQuat = [
	{q: {1, 2, 3, 4}, r: {0.18257418583505536, 0.3651483716701107, 0.5477225575051661, 0.7302967433402214}},
	{q: {2, 3, 4, 1}, r: {0.3651483716701107, 0.5477225575051661, 0.7302967433402214, 0.18257418583505536}},
	{q: {3, 4, 1, 2}, r: {0.5477225575051661, 0.7302967433402214, 0.18257418583505536, 0.3651483716701107}},
]

#test
fn testQuatNormalize(t: &testing::T) {
	for _, test in testsQuatNormalize {
		mut x := test.q
		x.Normalize(&x)
		if !sameApprox(x, test.r) {
			t.Errorf("expected {}, found {}, for Normalize({})", test.r, x, test.q)
		}
	}
}

let testsQuatExp: []testQuatQuat = [
	{q: {}, r: {W: 1}},
	// Expected velues below are from pyquaternion.
	{
		q: {W: 1, X: 1, Y: 1, Z: 1},
		r: {W: -0.43643792124786496, X: 1.549040352371697, Y: 1.549040352371697, Z: 1.549040352371697},
	},
	{
		q: {W: 1, X: 0, Y: 1, Z: 1},
		r: {W: 0.42389891174348104, X: 0, Y: 1.8986002490721081, Z: 1.8986002490721081},
	},
	{
		q: {W: 1, X: 0, Y: 0, Z: 1},
		r: {W: 1.4686939399158851, X: 0, Y: 0, Z: 2.2873552871788423},
	},
	{
		q: {W: 0, X: 1, Y: 1, Z: 1},
		r: {W: -0.16055653857469052, X: 0.569860099182514, Y: 0.569860099182514, Z: 0.569860099182514},
	},
	{
		q: {W: 0, X: 0, Y: 1, Z: 1},
		r: {W: 0.15594369476537437, X: 0, Y: 0.6984559986366083, Z: 0.6984559986366083},
	},
	{
		q: {W: 0, X: 0, Y: 0, Z: 1},
		r: {W: 0.5403023058681398, X: 0, Y: 0, Z: 0.8414709848078965},
	},
]

#test
fn testQuatExp(t: &testing::T) {
	for _, test in testsQuatExp {
		mut x := test.q
		x.Exp(&x)
		if !equalApprox(x, test.r) {
			t.Errorf("expected {}, found {}, for Exp({})", test.r, x, test.q)
		}
	}
}

let testsQuatLog: []testQuatQuat = [
	{q: {}, r: {W: -inf}},
	// Expected velues below are from pyquaternion.
	{
		q: {W: 1, X: 1, Y: 1, Z: 1},
		r: {W: 0.6931471805599453, X: 0.6045997880780728, Y: 0.6045997880780728, Z: 0.6045997880780728},
	},
	{
		q: {W: 1, X: 0, Y: 1, Z: 1},
		r: {W: 0.5493061443340548, X: 0, Y: 0.6755108588560398, Z: 0.6755108588560398},
	},
	{
		q: {W: 1, X: 0, Y: 0, Z: 1},
		r: {W: 0.3465735902799727, X: 0, Y: 0, Z: 0.7853981633974484},
	},
	{
		q: {W: 0, X: 1, Y: 1, Z: 1},
		r: {W: 0.5493061443340548, X: 0.906899682117109, Y: 0.906899682117109, Z: 0.906899682117109},
	},
	{
		q: {W: 0, X: 0, Y: 1, Z: 1},
		r: {W: 0.3465735902799727, X: 0, Y: 1.1107207345395915, Z: 1.1107207345395915},
	},
	{
		q: {W: 0, X: 0, Y: 0, Z: 1},
		r: {W: 0, X: 0, Y: 0, Z: 1.5707963267948966},
	},
]

#test
fn testQuatLog(t: &testing::T) {
	for _, test in testsQuatLog {
		mut x := test.q
		x.Log(&x)
		if !equalApprox(x, test.r) {
			t.Errorf("expected {}, found {}, for Log({})", test.r, x, test.q)
		}
	}
}

struct quatPowTest {
	q: Quat
	r: Quat
	w: Quat
}

let testsQuatPow: []quatPowTest = [
	{q: {}, r: {}, w: {W: 1}},
	// Expected velues below are from pyquaternion.
	// pyquaternion does not support quaternion powers.
	{
		q: {W: 1, X: 1, Y: 1, Z: 1}, r: {W: 2},
		w: {W: -2, X: 2, Y: 2, Z: 2},
	},
	{
		q: {W: 1, X: 0, Y: 1, Z: 1}, r: {W: 2},
		w: {W: -1, X: 0, Y: 2, Z: 2},
	},
	{
		q: {W: 1, X: 0, Y: 0, Z: 1}, r: {W: 2},
		w: {W: 0, X: 0, Y: 0, Z: 2},
	},
	{
		q: {W: 0, X: 1, Y: 1, Z: 1}, r: {W: 2},
		w: {W: -3, X: 0, Y: 0, Z: 0},
	},
	{
		q: {W: 0, X: 0, Y: 1, Z: 1}, r: {W: 2},
		w: {W: -2, X: 0, Y: 0, Z: 0},
	},
	{
		q: {W: 0, X: 0, Y: 0, Z: 1}, r: {W: 2},
		w: {W: -1, X: 0, Y: 0, Z: 0},
	},
	{
		q: {W: 1, X: 1, Y: 1, Z: 1}, r: {W: jn::Pi},
		w: {W: -8.728144138959564, X: -0.7527136547040768, Y: -0.7527136547040768, Z: -0.7527136547040768},
	},
	{
		q: {W: 1, X: 0, Y: 1, Z: 1}, r: {W: jn::Pi},
		w: {W: -5.561182514695044, X: 0, Y: 0.5556661490713818, Z: 0.5556661490713818},
	},
	{
		q: {W: 1, X: 0, Y: 0, Z: 1}, r: {W: jn::Pi},
		w: {W: -2.320735561810013, X: 0, Y: 0, Z: 1.8544983901925216},
	},
	{
		q: {W: 0, X: 1, Y: 1, Z: 1}, r: {W: jn::Pi},
		w: {W: 1.2388947209955585, X: -3.162774128856231, Y: -3.162774128856231, Z: -3.162774128856231},
	},
	{
		q: {W: 0, X: 0, Y: 1, Z: 1}, r: {W: jn::Pi},
		w: {W: 0.6552860151073727, X: 0, Y: -2.0488506614051922, Z: -2.0488506614051922},
	},
	{
		q: {W: 0, X: 0, Y: 0, Z: 1}, r: {W: jn::Pi},
		w: {W: 0.22058404074969779, X: 0, Y: 0, Z: -0.9753679720836315},
	},
	{
		q: {W: 1, X: 1, Y: 1, Z: 1}, r: {W: 3},
		w: {W: -8, X: 0, Y: 0, Z: 0},
	},
	{
		q: {W: 1, X: 0, Y: 1, Z: 1}, r: {W: 3},
		w: {W: -5, X: 0, Y: 1, Z: 1},
	},
	{
		q: {W: 1, X: 0, Y: 0, Z: 1}, r: {W: 3},
		w: {W: -2, X: 0, Y: 0, Z: 2},
	},
	{
		q: {W: 0, X: 1, Y: 1, Z: 1}, r: {W: 3},
		w: {W: 0, X: -3, Y: -3, Z: -3},
	},
	{
		q: {W: 0, X: 0, Y: 1, Z: 1}, r: {W: 3},
		w: {W: 0, X: 0, Y: -2, Z: -2},
	},
	{
		q: {W: 0, X: 0, Y: 0, Z: 1}, r: {W: 3},
		w: {W: 0, X: 0, Y: 0, Z: -1},
	},
]

#test
fn testQuatPow(t: &testing::T) {
	for _, test in testsQuatPow {
		mut x := test.q
		x.Pow(&x, &test.r)
		if !equalApprox(x, test.w) {
			t.Errorf("expected {}, found {}, for Pow({}, {})", test.w, x, test.q, test.r)
		}
	}
}

struct powRealTest {
	q: Quat
	r: f64
	w: Quat
}

let testsQuatPowReal: []powRealTest = [
	{q: {}, r: 0, w: {W: 1}},
	{
		q: {W: 1, X: 1, Y: 1, Z: 1}, r: 2,
		w: {W: -2, X: 2, Y: 2, Z: 2},
	},
	{
		q: {W: 1, X: 0, Y: 1, Z: 1}, r: 2,
		w: {W: -1, X: 0, Y: 2, Z: 2},
	},
	{
		q: {W: 1, X: 0, Y: 0, Z: 1}, r: 2,
		w: {W: 0, X: 0, Y: 0, Z: 2},
	},
	{
		q: {W: 0, X: 1, Y: 1, Z: 1}, r: 2,
		w: {W: -3, X: 0, Y: 0, Z: 0},
	},
	{
		q: {W: 0, X: 0, Y: 1, Z: 1}, r: 2,
		w: {W: -2, X: 0, Y: 0, Z: 0},
	},
	{
		q: {W: 0, X: 0, Y: 0, Z: 1}, r: 2,
		w: {W: -1, X: 0, Y: 0, Z: 0},
	},
	{
		q: {W: 1, X: 1, Y: 1, Z: 1}, r: jn::Pi,
		w: {W: -8.728144138959564, X: -0.7527136547040768, Y: -0.7527136547040768, Z: -0.7527136547040768},
	},
	{
		q: {W: 1, X: 0, Y: 1, Z: 1}, r: jn::Pi,
		w: {W: -5.561182514695044, X: 0, Y: 0.5556661490713818, Z: 0.5556661490713818},
	},
	{
		q: {W: 1, X: 0, Y: 0, Z: 1}, r: jn::Pi,
		w: {W: -2.320735561810013, X: 0, Y: 0, Z: 1.8544983901925216},
	},
	{
		q: {W: 0, X: 1, Y: 1, Z: 1}, r: jn::Pi,
		w: {W: 1.2388947209955585, X: -3.162774128856231, Y: -3.162774128856231, Z: -3.162774128856231},
	},
	{
		q: {W: 0, X: 0, Y: 1, Z: 1}, r: jn::Pi,
		w: {W: 0.6552860151073727, X: 0, Y: -2.0488506614051922, Z: -2.0488506614051922},
	},
	{
		q: {W: 0, X: 0, Y: 0, Z: 1}, r: jn::Pi,
		w: {W: 0.22058404074969779, X: 0, Y: 0, Z: -0.9753679720836315},
	},
	{
		q: {W: 1, X: 1, Y: 1, Z: 1}, r: 3,
		w: {W: -8, X: 0, Y: 0, Z: 0},
	},
	{
		q: {W: 1, X: 0, Y: 1, Z: 1}, r: 3,
		w: {W: -5, X: 0, Y: 1, Z: 1},
	},
	{
		q: {W: 1, X: 0, Y: 0, Z: 1}, r: 3,
		w: {W: -2, X: 0, Y: 0, Z: 2},
	},
	{
		q: {W: 0, X: 1, Y: 1, Z: 1}, r: 3,
		w: {W: 0, X: -3, Y: -3, Z: -3},
	},
	{
		q: {W: 0, X: 0, Y: 1, Z: 1}, r: 3,
		w: {W: 0, X: 0, Y: -2, Z: -2},
	},
	{
		q: {W: 0, X: 0, Y: 0, Z: 1}, r: 3,
		w: {W: 0, X: 0, Y: 0, Z: -1},
	},
]

#test
fn testQuatPowReal(t: &testing::T) {
	for _, test in testsQuatPowReal {
		mut x := test.q
		x.PowReal(&x, test.r)
		if !equalApprox(x, test.w) {
			t.Errorf("expected {}, found {}, for PowReal({}, {})", test.w, x, test.q, test.r)
		}
	}
}

let testsQuatSqrt: []testQuatQuat = [
	{q: {}, r: {}},
	// Expected velues below are from pyquaternion.
	{
		q: {W: 1, X: 1, Y: 1, Z: 1},
		r: {W: 1.2247448713915892, X: 0.4082482904638631, Y: 0.4082482904638631, Z: 0.4082482904638631},
	},
	{
		q: {W: 1, X: 0, Y: 1, Z: 1},
		r: {W: 1.1687708944803676, X: 0, Y: 0.42779983858367593, Z: 0.42779983858367593},
	},
	{
		q: {W: 1, X: 0, Y: 0, Z: 1},
		r: {W: 1.0986841134678098, X: 0, Y: 0, Z: 0.45508986056222733},
	},
	{
		q: {W: 0, X: 1, Y: 1, Z: 1},
		r: {W: 0.9306048591020996, X: 0.5372849659117709, Y: 0.5372849659117709, Z: 0.5372849659117709},
	},
	{
		q: {W: 0, X: 0, Y: 1, Z: 1},
		r: {W: 0.8408964152537146, X: 0, Y: 0.5946035575013604, Z: 0.5946035575013604},
	},
	{
		q: {W: 0, X: 0, Y: 0, Z: 1},
		r: {W: 0.7071067811865476, X: 0, Y: 0, Z: 0.7071067811865475},
	},
]

#test
fn testQuatSqrt(t: &testing::T) {
	for _, test in testsQuatSqrt {
		mut x := test.q
		x.Sqrt(&x)
		if !equalApprox(x, test.r) {
			t.Errorf("expected {}, found {}, for Sqrt({})", test.r, x, test.q)
		}
	}
}

// Including exercises from Real Quaternionic Calculus Handbook doi:10.1007/978-3-0348-0622-0
// Ex 6.159 (a) and (b).
let testsQuatSin: []testQuatQuat = [
	{q: {}, r: {}},
	{q: {W: jn::Pi / 2}, r: {W: 1}},
	{q: {X: jn::Pi / 2}, r: {X: imag(cmplx::Sin(cmplx(0, jn::Pi/2)))}},
	{q: {Y: jn::Pi / 2}, r: {Y: imag(cmplx::Sin(cmplx(0, jn::Pi/2)))}},
	{q: {Z: jn::Pi / 2}, r: {Z: imag(cmplx::Sin(cmplx(0, jn::Pi/2)))}},
	{
		q: {W: 1, X: 1, Y: 1, Z: 1}, r: fn(): Quat {
			p := math::Cos(1) * math::Sinh(math::Sqrt(3)) / math::Sqrt(3)
			// An error exists in the book's given solution for the real part.
			ret {W: math::Sin(1) * math::Cosh(math::Sqrt(3)), X: p, Y: p, Z: p}
		}(),
	},
	{
		q: {X: -2, Y: 1}, r: fn(): Quat {
			s := math::Sinh(math::Sqrt(5)) / math::Sqrt(5)
			ret Quat{X: -2 * s, Y: s}
		}(),
	},
]

#test
fn testQuatSin(t: &testing::T) {
	for _, test in testsQuatSin {
		mut x := test.q
		x.Sin(&x)
		if !equalApprox(x, test.r) {
			t.Errorf("expected {}, found {}, for Sin({})", test.r, x, test.q)
		}
	}
}

let testsQuatSinh: []testQuatQuat = [
	{q: {}, r: {}},
	{q: {W: jn::Pi / 2}, r: {W: math::Sinh(jn::Pi / 2)}},
	{q: {X: jn::Pi / 2}, r: {X: imag(cmplx::Sinh(cmplx(0, jn::Pi/2)))}},
	{q: {Y: jn::Pi / 2}, r: {Y: imag(cmplx::Sinh(cmplx(0, jn::Pi/2)))}},
	{q: {Z: jn::Pi / 2}, r: {Z: imag(cmplx::Sinh(cmplx(0, jn::Pi/2)))}},
	{
		q: {W: 1, X: -1, Y: -1}, r: fn(): Quat {
			// This was based on the example on p118, but it too has an error.
			mut q := Quat{W: 1, X: -1, Y: -1}
			mut exp := q
			exp.Exp(&exp)
			q.Scale(&q, -1)
			q.Exp(&q)
			q.Sub(&exp, &q)
			q.Scale(&q, 0.5)
			ret q
		}(),
	},
	{
		q: {1, 1, 1, 1}, r: fn(): Quat {
			mut q := Quat{1, 1, 1, 1}
			mut exp := q
			exp.Exp(&exp)
			q.Scale(&q, -1)
			q.Exp(&q)
			q.Sub(&exp, &q)
			q.Scale(&q, 0.5)
			ret q
		}(),
	},
	{q: asinh({1, 1, 1, 1}), r: {1, 1, 1, 1}},
	{
		q: asinh({1, 1, 1, 1}), r: fn(): Quat {
			mut q := asinh({1, 1, 1, 1})
			mut exp := q
			exp.Exp(&exp)
			q.Scale(&q, -1)
			q.Exp(&q)
			q.Sub(&exp, &q)
			q.Scale(&q, 0.5)
			ret q
		}(),
	},
	{q: {W: math::Inf(1)}, r: {W: math::Inf(1)}},
	{q: {W: math::Inf(1), X: jn::Pi / 2}, r: {W: math::Inf(1), X: math::Inf(1)}},
	{q: {W: math::Inf(1), X: jn::Pi}, r: {W: math::Inf(-1), X: math::Inf(1)}},
	{q: {W: math::Inf(1), X: 3 * jn::Pi / 2}, r: {W: math::Inf(-1), X: math::Inf(-1)}},
	{q: {W: math::Inf(1), X: 2 * jn::Pi}, r: {W: math::Inf(1), X: math::Inf(-1)}},
]

#test
fn testQuatSinh(t: &testing::T) {
	for _, test in testsQuatSinh {
		mut x := test.q
		x.Sinh(&x)
		if !sameApprox(x, test.r) {
			t.Errorf("expected {}, found {}, for Sinh({})", test.r, x, test.q)
		}
	}
}

// Including example from Real Quaternionic Calculus Handbook doi:10.1007/978-3-0348-0622-0 p108.
let testsQuatCos: []testQuatQuat = [
	{q: {}, r: {W: 1}},
	{q: {W: jn::Pi / 2}, r: {W: 0}},
	{q: {X: jn::Pi / 2}, r: {W: real(cmplx::Cos(cmplx(0, jn::Pi/2)))}},
	{q: {Y: jn::Pi / 2}, r: {W: real(cmplx::Cos(cmplx(0, jn::Pi/2)))}},
	{q: {Z: jn::Pi / 2}, r: {W: real(cmplx::Cos(cmplx(0, jn::Pi/2)))}},
	{q: {W: 1, X: 1, Y: 1, Z: 1}, r: fn(): Quat {
			p := math::Sin(1) * math::Sinh(math::Sqrt(3)) / math::Sqrt(3)
			ret Quat{W: math::Cos(1) * math::Cosh(math::Sqrt(3)), X: -p, Y: -p, Z: -p}
		}()},
]

#test
fn testQuatCos(t: &testing::T) {
	for _, test in testsQuatCos {
		mut x := test.q
		x.Cos(&x)
		if !equalApprox(x, test.r) {
			t.Errorf("expected {}, found {}, for Cos({})", test.r, x, test.q)
		}
	}
}

let testsQuatCosh: []testQuatQuat = [
	{q: {}, r: {W: 1}},
	{q: {W: jn::Pi / 2}, r: {W: math::Cosh(jn::Pi / 2)}},
	{q: {X: jn::Pi / 2}, r: {X: imag(cmplx::Cosh(cmplx(0, jn::Pi/2)))}},
	{q: {Y: jn::Pi / 2}, r: {Y: imag(cmplx::Cosh(cmplx(0, jn::Pi/2)))}},
	{q: {Z: jn::Pi / 2}, r: {Z: imag(cmplx::Cosh(cmplx(0, jn::Pi/2)))}},
	{q: {W: 1, X: -1, Y: -1}, r: fn(): Quat {
			mut q := Quat{W: 1, X: -1, Y: -1}
			mut t := q
			q.Scale(&q, -1)
			q.Exp(&q)
			t.Exp(&t)
			q.Add(&q, &t)
			q.Scale(&q, 0.5)
			ret q
		}()},
	{q: {1, 1, 1, 1}, r: fn(): Quat {
			mut q := Quat{1, 1, 1, 1}
			mut t := q
			q.Scale(&q, -1)
			q.Exp(&q)
			t.Exp(&t)
			q.Add(&q, &t)
			q.Scale(&q, 0.5)
			ret q
		}()},
	{q: {W: math::Inf(1)}, r: {W: math::Inf(1)}},
	{q: {W: math::Inf(1), X: jn::Pi / 2}, r: {W: math::Inf(1), X: math::Inf(1)}},
	{q: {W: math::Inf(1), X: jn::Pi}, r: {W: math::Inf(-1), X: math::Inf(1)}},
	{q: {W: math::Inf(1), X: 3 * jn::Pi / 2}, r: {W: math::Inf(-1), X: math::Inf(-1)}},
	{q: {W: math::Inf(1), X: 2 * jn::Pi}, r: {W: math::Inf(1), X: math::Inf(-1)}},
]

#test
fn testQuatCosh(t: &testing::T) {
	for _, test in testsQuatCosh {
		mut x := test.q
		x.Cosh(&x)
		if !sameApprox(x, test.r) {
			t.Errorf("expected {}, found {}, for Cosh({})", test.r, x, test.q)
		}
	}
}

let testsQuatTan: []testQuatQuat = [
	{q: {}, r: {}},
	{q: {W: jn::Pi / 4}, r: {W: math::Tan(jn::Pi / 4)}},
	{q: {X: jn::Pi / 4}, r: {X: imag(cmplx::Tan(cmplx(0, jn::Pi/4)))}},
	{q: {Y: jn::Pi / 4}, r: {Y: imag(cmplx::Tan(cmplx(0, jn::Pi/4)))}},
	{q: {Z: jn::Pi / 4}, r: {Z: imag(cmplx::Tan(cmplx(0, jn::Pi/4)))}},

	// From exercise from Real Numberernionic Calculus Handbook doi:10.1007/978-3-0348-0622-0
	{q: {X: 1}, r: mul(sin({X: 1}), inv(cos({X: 1})))},
	{q: {1, 1, 1, 1}, r: mul(sin({1, 1, 1, 1}), inv(cos({1, 1, 1, 1})))},
]

#test
fn testQuatTan(t: &testing::T) {
	for _, test in testsQuatTan {
		mut x := test.q
		x.Tan(&x)
		if !equalApprox(x, test.r) {
			t.Errorf("expected {}, found {}, for Tan({})", test.r, x, test.q)
		}
	}
}

let testsQuatTanh: []testQuatQuat = [
	{q: {}, r: {}},
	{q: {W: jn::Pi / 4}, r: {W: math::Tanh(jn::Pi / 4)}},
	{q: {X: jn::Pi / 4}, r: {X: imag(cmplx::Tanh(cmplx(0, jn::Pi/4)))}},
	{q: {Y: jn::Pi / 4}, r: {Y: imag(cmplx::Tanh(cmplx(0, jn::Pi/4)))}},
	{q: {Z: jn::Pi / 4}, r: {Z: imag(cmplx::Tanh(cmplx(0, jn::Pi/4)))}},
	{q: {X: 1}, r: mul(sinh({X: 1}), inv(cosh({X: 1})))},
	{q: {1, 1, 1, 1}, r: mul(sinh({1, 1, 1, 1}), inv(cosh({1, 1, 1, 1})))},
	{q: {W: math::Inf(1)}, r: {W: 1}},
	{q: {W: math::Inf(1), X: jn::Pi / 4}, r: {W: 1, X: 0 * math::Sin(jn::Pi/2)}},
	{q: {W: math::Inf(1), X: jn::Pi / 2}, r: {W: 1, X: 0 * math::Sin(jn::Pi)}},
	{q: {W: math::Inf(1), X: 3 * jn::Pi / 4}, r: {W: 1, X: 0 * math::Sin(3*jn::Pi/2)}},
	{q: {W: math::Inf(1), X: jn::Pi}, r: {W: 1, X: 0 * math::Sin(2*jn::Pi)}},
]

#test
fn testQuatTanh(t: &testing::T) {
	for _, test in testsQuatTanh {
		mut x := test.q
		x.Tanh(&x)
		if !sameApprox(x, test.r) {
			t.Errorf("expected {}, found {}, for Tanh({})", test.r, x, test.q)
		}
	}
}

let testsQuatAsin: []testQuatQuat = [
	{q: {}, r: {}},
	{q: {W: 1}, r: {W: jn::Pi / 2}},
	{q: {X: 1}, r: {X: real(cmplx::Asinh(1))}},
	{q: {Y: 1}, r: {Y: real(cmplx::Asinh(1))}},
	{q: {Z: 1}, r: {Z: real(cmplx::Asinh(1))}},
	{q: sin({1, 1, 1, 1}), r: {1, 1, 1, 1}},
]

#test
fn testQuatAsin(t: &testing::T) {
	for _, test in testsQuatAsin {
		mut x := test.q
		x.Asin(&x)
		if !equalApprox(x, test.r) {
			t.Errorf("expected {}, found {}, for Asin({})", test.r, x, test.q)
		}
	}
}

let testsQuatAsinh: []testQuatQuat = [
	{q: {}, r: {}},
	{q: {W: 1}, r: {W: math::Asinh(1)}},
	{q: {X: 1}, r: {X: jn::Pi / 2}},
	{q: {Y: 1}, r: {Y: jn::Pi / 2}},
	{q: {Z: 1}, r: {Z: jn::Pi / 2}},
	{q: {1, 1, 1, 1}, r: fn(): Quat {
			mut q := Quat{1, 1, 1, 1}
			mut p := Quat{W: 1}
			q.Mul(&q, &q)
			q.Add(&q, &p)
			q.Sqrt(&q)
			p = {1, 1, 1, 1}
			q.Add(&q, &p)
			q.Log(&q)
			ret q
		}()},
	{q: sinh({W: 1}), r: {W: 1}},
	{q: sinh({X: 1}), r: {X: 1}},
	{q: sinh({X: 1, Y: 1}), r: {X: 1, Y: 1}},
	{q: sinh({W: 1, X: 1, Y: 1}), r: {W: 1, X: 1, Y: 1}},
	{q: sinh({1, 1, 1, 1}), r: fn(): Quat {
			// The following fails:
			// {q: sinh({1, 1, 1, 1}), r: {1, 1, 1, 1}},
			// but this passes...
			mut p := Quat{W: 1}
			mut q := sinh({1, 1, 1, 1})
			q.Mul(&q, &q)
			q.Add(&q, &p)
			q.Sqrt(&q)
			p = sinh({1, 1, 1, 1})
			q.Add(&q, &p)
			q.Log(&q)
			ret q
		}()},
	// And see the Sinh tests that do the reciprocal operation.
]

#test
fn testQuatAsinh(t: &testing::T) {
	for _, test in testsQuatAsinh {
		mut x := test.q
		x.Asinh(&x)
		if !equalApprox(x, test.r) {
			t.Errorf("expected {}, found {}, for Asinh({})", test.r, x, test.q)
		}
	}
}

let testsQuatAcos: []testQuatQuat = [
	{q: {}, r: {W: jn::Pi / 2}},
	{q: {W: 1}, r: {W: 0}},
	{q: {X: 1}, r: {W: real(cmplx::Acos(1i)), X: imag(cmplx::Acos(1i))}},
	{q: {Y: 1}, r: {W: real(cmplx::Acos(1i)), Y: imag(cmplx::Acos(1i))}},
	{q: {Z: 1}, r: {W: real(cmplx::Acos(1i)), Z: imag(cmplx::Acos(1i))}},
	{q: cos({1, 1, 1, 1}), r: {1, 1, 1, 1}},
]

#test
fn testQuatAcos(t: &testing::T) {
	for _, test in testsQuatAcos {
		mut x := test.q
		x.Acos(&x)
		if !equalApprox(x, test.r) {
			t.Errorf("expected {}, found {}, for Acos({})", test.r, x, test.q)
		}
	}
}

let testsQuatAcosh: []testQuatQuat = [
	{q: {}, r: {W: jn::Pi / 2}},
	{q: {W: 1}, r: {W: math::Acosh(1)}},
	{q: {X: 1}, r: {W: real(cmplx::Acosh(1i)), X: imag(cmplx::Acosh(1i))}},
	{q: {Y: 1}, r: {W: real(cmplx::Acosh(1i)), Y: imag(cmplx::Acosh(1i))}},
	{q: {Z: 1}, r: {W: real(cmplx::Acosh(1i)), Z: imag(cmplx::Acosh(1i))}},
	{q: cosh({1, 1, 1, 1}), r: {1, 1, 1, 1}},
	{
		q: {1, 1, 1, 1}, r: fn(): Quat {
			mut q := Quat{1, 1, 1, 1}
			mut p := Quat{W: 1}
			q.Mul(&q, &q)
			q.Sub(&q, &p)
			q.Sqrt(&q)
			p = Quat{1, 1, 1, 1}
			p.Add(&p, &q)
			p.Log(&p)
			ret p
		}(),
	},
]

#test
fn testQuatAcosh(t: &testing::T) {
	for _, test in testsQuatAcosh {
		mut x := test.q
		x.Acosh(&x)
		if !equalApprox(x, test.r) {
			t.Errorf("expected {}, found {}, for Acosh({})", test.r, x, test.q)
		}
	}
}

let testsQuatAtan: []testQuatQuat = [
	{q: {}, r: {}},
	{q: {W: 1}, r: {W: jn::Pi / 4}},
	{q: {X: 0.5}, r: {W: real(cmplx::Atan(0.5i)), X: imag(cmplx::Atan(0.5i))}},
	{q: {Y: 0.5}, r: {W: real(cmplx::Atan(0.5i)), Y: imag(cmplx::Atan(0.5i))}},
	{q: {Z: 0.5}, r: {W: real(cmplx::Atan(0.5i)), Z: imag(cmplx::Atan(0.5i))}},
	{q: tan({1, 1, 1, 1}), r: {1, 1, 1, 1}},
]

#test
fn testQuatAtan(t: &testing::T) {
	for _, test in testsQuatAtan {
		mut x := test.q
		x.Atan(&x)
		if !equalApprox(x, test.r) {
			t.Errorf("expected {}, found {}, for Atan({})", test.r, x, test.q)
		}
	}
}

let testsQuatAtanh: []testQuatQuat = [
	{q: {}, r: {}},
	{q: {W: 1}, r: {W: math::Atanh(1)}},
	{q: {X: 0.5}, r: {W: real(cmplx::Atanh(0.5i)), X: imag(cmplx::Atanh(0.5i))}},
	{q: {Y: 0.5}, r: {W: real(cmplx::Atanh(0.5i)), Y: imag(cmplx::Atanh(0.5i))}},
	{q: {Z: 0.5}, r: {W: real(cmplx::Atanh(0.5i)), Z: imag(cmplx::Atanh(0.5i))}},
	{
		q: {1, 1, 1, 1}, r: fn(): Quat {
			mut q := Quat{1, 1, 1, 1}
			mut p := Quat{W: 1}
			p.Sub(&p, &q)
			p.Log(&p)
			r1 := Quat{W: 1}
			q.Add(&r1, &q)
			q.Log(&q)
			q.Sub(&q, &p)
			q.Scale(&q, 0.5)
			ret q
		}(),
	},
	{q: tanh({W: 1}), r: {W: 1}},
	{q: tanh({X: 1}), r: {X: 1}},
	{q: tanh({X: 1, Y: 1}), r: {X: 1, Y: 1}},
	{q: tanh({W: 1, X: 1, Y: 1}), r: {W: 1, X: 1, Y: 1}},
	{
		q: tanh({1, 1, 1, 1}), r: fn(): Quat {
			// The following fails
			// {q: tanh({1, 1, 1, 1}), r: {1, 1, 1, 1}},
			// but...

			mut q := tanh({1, 1, 1, 1})
			mut p := Quat{W: 1}
			p.Sub(&p, &q)
			p.Log(&p)
			r1 := Quat{W: 1}
			q.Add(&r1, &q)
			q.Log(&q)
			q.Sub(&q, &p)
			q.Scale(&q, 0.5)
			ret q
		}(),
	},
]

#test
fn testQuatAtanh(t: &testing::T) {
	for _, test in testsQuatAtanh {
		mut x := test.q
		x.Atanh(&x)
		if !equalApprox(x, test.r) {
			t.Errorf("expected {}, found {}, for Atanh({})", test.r, x, test.q)
		}
	}
}

struct axisAngleTest {
	x:   f64
	y:   f64
	z:   f64
	rad: f64
	r:   Quat
}

let testsAxisAngle: []axisAngleTest = [
	{
		x: 0, y: 1, z: 0, rad: 0,
		r: {1, 0, 0, 0},
	},
	{
		x: 0, y: 1, z: 0, rad: jn::Pi,
		r: {0, 0, 1, 0},
	},
	{
		x: 1, y: 0, z: 0, rad: jn::Pi / 2,
		r: {jn::Sqrt2 / 2, jn::Sqrt2 / 2, 0, 0},
	},
	{
		x: 0, y: 0, z: 1, rad: jn::Pi / 2,
		r: {jn::Sqrt2 / 2, 0, 0, jn::Sqrt2 / 2},
	},
	{
		x: 1 / math::Sqrt(3), y: 1 / math::Sqrt(3), z: 1 / math::Sqrt(3), rad: jn::Pi / 4,
		r: {math::Cos(jn::Pi / 8), math::Sin(jn::Pi/8) / math::Sqrt(3), math::Sin(jn::Pi/8) / math::Sqrt(3), math::Sin(jn::Pi/8) / math::Sqrt(3)},
	},
	{
		x: 1, y: 0, z: 0, rad: jn::Pi * 2,
		r: {1, 0, 0, 0},
	},
	{
		x: 0, y: -1, z: 0, rad: jn::Pi / 2,
		r: {jn::Sqrt2 / 2, 0, -jn::Sqrt2 / 2, 0},
	},
]

#test
fn testAxisAngle(t: &testing::T) {
	for _, test in testsAxisAngle {
		q := AxisAngle(test.x, test.y, test.z, test.rad)
		if !sameApprox(q, test.r) {
			t.Errorf("expected {}, found {}, for AxisAngle({}, {}, {}, {})", test.r, q, test.x, test.y, test.z, test.rad)
		}
	}
}

fn equalApprox(a: Quat, b: Quat): bool {
	ret jn::Close(a.W, b.W) &&
		jn::Close(a.X, b.X) &&
		jn::Close(a.Y, b.Y) &&
		jn::Close(a.Z, b.Z)
}

fn sameApprox(a: Quat, b: Quat): bool {
	match {
	| a.W == 0 && b.W == 0:
		ret math::Signbit(a.W) == math::Signbit(b.W)
	| a.X == 0 && b.X == 0:
		ret math::Signbit(a.X) == math::Signbit(b.X)
	| a.Y == 0 && b.Y == 0:
		ret math::Signbit(a.Y) == math::Signbit(b.Y)
	| a.Z == 0 && b.Z == 0:
		ret math::Signbit(a.Z) == math::Signbit(b.Z)
	}
	ret (sameFloat(a.W, b.W) || jn::Close(a.W, b.W)) &&
		(sameFloat(a.X, b.X) || jn::Close(a.X, b.X)) &&
		(sameFloat(a.Y, b.Y) || jn::Close(a.Y, b.Y)) &&
		(sameFloat(a.Z, b.Z) || jn::Close(a.Z, b.Z))
}

fn sameFloat(a: f64, b: f64): bool {
	ret a == b || (math::IsNaN(a) && math::IsNaN(b))
}

fn asinh(mut q: Quat): Quat {
	q.Asinh(&q)
	ret q
}

fn sinh(mut q: Quat): Quat {
	q.Sinh(&q)
	ret q
}

fn sin(mut q: Quat): Quat {
	q.Sin(&q)
	ret q
}

fn cos(mut q: Quat): Quat {
	q.Cos(&q)
	ret q
}

fn cosh(mut q: Quat): Quat {
	q.Cosh(&q)
	ret q
}

fn tan(mut q: Quat): Quat {
	q.Tan(&q)
	ret q
}

fn tanh(mut q: Quat): Quat {
	q.Tanh(&q)
	ret q
}

fn inv(mut q: Quat): Quat {
	q.Inv(&q)
	ret q
}

fn mul(mut x: Quat, y: Quat): Quat {
	x.Mul(&x, &y)
	ret x
}