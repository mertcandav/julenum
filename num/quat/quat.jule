// Copyright 2025 mertcandav.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/math"

// Quaternion with floating-point precision.
struct Quat {
	W: f64
	X: f64
	Y: f64
	Z: f64
}

impl Quat {
	// Reports whether all fields of quaternion is zero.
	fn Zero(*self): bool {
		ret self.W == 0 && self.X == 0 && self.Y == 0 && self.Z == 0
	}

	// Sets self to the sum of x+y.
	fn Add(mut *self, &x: *Quat, &y: *Quat) {
		self.W, self.X, self.Y, self.Z = x.W+y.W, x.X+y.X, x.Y+y.Y, x.Z+y.Z
	}

	// Sets self to the difference x-y.
	fn Sub(mut *self, &x: *Quat, &y: *Quat) {
		self.W, self.X, self.Y, self.Z = x.W-y.W, x.X-y.X, x.Y-y.Y, x.Z-y.Z
	}

	// Sets self to the Hamiltonian product x*y.
	fn Mul(mut *self, &x: *Quat, &y: *Quat) {
		_w := x.W*y.W - x.X*y.X - x.Y*y.Y - x.Z*y.Z
		_x := x.W*y.X + x.X*y.W + x.Y*y.Z - x.Z*y.Y
		_y := x.W*y.Y - x.X*y.Z + x.Y*y.W + x.Z*y.X
		_z := x.W*y.Z + x.X*y.Y - x.Y*y.X + x.Z*y.W
		self.W, self.X, self.Y, self.Z = _w, _x, _y, _z
	}

	// Sets self to q scaled by k.
	fn Scale(mut *self, &q: *Quat, k: f64) {
		self.W, self.X, self.Y, self.Z = q.W*k, q.X*k, q.Y*k, q.Z*k
	}

	// Returns the norm (magnitude or length) of the quaternion.
	fn Norm(*self): f64 {
		ret math::Sqrt(self.W*self.W + self.X*self.X + self.Y*self.Y + self.Z*self.Z)
	}

	// Sets self to normalized quaternion q.
	fn Normalize(mut *self, &q: *Quat) {
		norm := q.Norm()
		self.W, self.X, self.Y, self.Z = q.W/norm, q.X/norm, q.Y/norm, q.Z/norm
	}

	// Sets self to the quaternion conjugate of q.
	fn Conj(mut *self, &q: *Quat) {
		self.W, self.X, self.Y, self.Z = q.W, -q.X, -q.Y, -q.Z
	}
}

// Returns a quaternion NaN.
fn NaN(): Quat {
	nan := math::NaN()
	ret Quat{nan, nan, nan, nan}
}

// Returns a quaternion Â±infinity by sign.
fn Inf(sign: int): Quat {
	inf := math::Inf(sign)
	ret Quat{inf, inf, inf, inf}
}

// Returns a unit quaternion representing a rotation
// around the given axis (x, y, z) by the specified angle in radians.
//
// Components of the rotation axis vector. Rotation vector is assumed
// (but not enforced) that this is a unit vector.
fn AxisAngle(x: f64, y: f64, z: f64, radians: f64): Quat {
	half := radians / 2
	sinHalf := math::Sin(half)
	mut q := Quat{
		W: math::Cos(half),
		X: x * sinHalf,
		Y: y * sinHalf,
		Z: z * sinHalf,
	}
	q.Normalize(&q)
	ret q
}