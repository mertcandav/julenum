// Copyright 2025 mertcandav.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use jn "julenum"
use "std/math"
use "std/testing"

struct commonDistCase {
	x:    f64
	want: f64
}

let testsBernoulliCDF: []commonDistCase = [
	{-1, 0.0},
	{0.0, 0.7},
	{0.5, 0.7},
	{1.0, 1.0},
	{2.0, 1.0},
]

#test
fn testBernoulliCDF(t: &testing::T) {
	b := Bernoulli{P: 0.3}
	for _, test in testsBernoulliCDF {
		got := b.CDF(test.x)
		if !jn::Tolerance(got, test.want, 1e-10) {
			t.Errorf("CDF({}): got {}, want {}", test.x, got, test.want)
		}
	}
}

let testsBernoulliEntropy: []commonDistCase = [
	{0.0, 0.0},
	{1.0, 0.0},
	{0.5, 1.0},
]

#test
fn testBernoulliEntropy(t: &testing::T) {
	for _, test in testsBernoulliEntropy {
		b := Bernoulli{P: test.x}
		got := b.Entropy()
		if !jn::Tolerance(got, test.want, 1e-10) {
			t.Errorf("Entropy({}): got {}, want {}", test.x, got, test.want)
		}
	}
}

#test
fn testBernoulliExcessKurtosis(t: &testing::T) {
	b := Bernoulli{P: 0.5}
	got := b.ExcessKurtosis()
	want := -2.0
	if !jn::Tolerance(got, want, 1e-10) {
		t.Errorf("ExcessKurtosis: got {}, want {}", got, want)
	}

	b0 := Bernoulli{}
	if !math::IsInf(b0.ExcessKurtosis(), 1) {
		t.Errorf("ExcessKurtosis(p=0) should be +Inf")
	}
}

let testsBernoulliLogPMF: []commonDistCase = [
	{1.0, math::Log(0.8)},
	{0.0, math::Log(0.2)},
	{2.0, math::Inf(-1)},
]

#test
fn testBernoulliLogPMF(t: &testing::T) {
	b := Bernoulli{P: 0.8}
	for _, test in testsBernoulliLogPMF {
		got := b.LogPMF(test.x)
		if !jn::Tolerance(got, test.want, 1e-10) &&
			!(math::IsInf(got, -1) && math::IsInf(test.want, -1)) {
			t.Errorf("LogPMF({}): got {}, want {}", test.x, got, test.want)
		}
	}
}

#test
fn testBernoulliMean(t: &testing::T) {
	b := Bernoulli{P: 0.42}
	got := b.Mean()
	if got != 0.42 {
		t.Errorf("Mean: got {}, want {}", got, 0.42)
	}
}

let testsBernoulliMedian: []commonDistCase = [
	{0.3, 0.0},
	{0.7, 1.0},
	{0.5, 0.5},
]

#test
fn testBernoulliMedian(t: &testing::T) {
	for _, test in testsBernoulliMedian {
		b := Bernoulli{P: test.x}
		got := b.Median()
		if got != test.want {
			t.Errorf("Median({}): got {}, want {}", test.x, got, test.want)
		}
	}
}

#test
fn testBernoulliNumParams(t: &testing::T) {
	b := Bernoulli{P: 0.2}
	got := b.NumParams()
	if got != 1 {
		t.Errorf("NumParams: got {}, want 1", got)
	}
}

#test
fn testBernoulliPMF(t: &testing::T) {
	b := Bernoulli{P: 0.6}
	mut got := b.PMF(1)
	if got != 0.6 {
		t.Errorf("PMF(1): got {}, want 0.6", got)
	}
	got = b.PMF(0)
	if got != 0.4 {
		t.Errorf("PMF(0): got {}, want 0.4", got)
	}
	got = b.PMF(2)
	if got != 0 {
		t.Errorf("PMF(2): got {}, want 0.0", got)
	}
}

let testsBernoulliQuantile: []commonDistCase = [
	{0.0, 0.0},
	{0.7, 0.0},
	{0.71, 1.0},
	{1.0, 1.0},
	{-0.1, math::NaN()},
	{1.1, math::NaN()},
]

#test
fn testBernoulliQuantile(t: &testing::T) {
	b := Bernoulli{P: 0.3}
	for _, test in testsBernoulliQuantile {
		got := b.Quantile(test.x)
		if math::IsNaN(test.want) {
			if !math::IsNaN(got) {
				t.Errorf("Quantile({}): expected NaN, got {}", test.x, got)
			}
		} else if got != test.want {
			t.Errorf("Quantile({}): got {}, want {}", test.x, got, test.want)
		}
	}
}

#test
fn testBernoulliRand(t: &testing::T) {
	b := Bernoulli{P: 0.8}
	mut i := 0
	for i < 100; i++ {
		v := b.Rand()
		if v != 0 && v != 1 {
			t.Errorf("Rand: got {}, expected 0 or 1", v)
			break
		}
	}
}

#test
fn testBernoulliSkewness(t: &testing::T) {
	b := Bernoulli{P: 0.2}
	want := (1 - 2*0.2) / math::Sqrt(0.2*0.8)
	got := b.Skewness()
	if !jn::Tolerance(got, want, 1e-10) {
		t.Errorf("Skewness: got {}, want {}", got, want)
	}

	b0 := Bernoulli{}
	if !math::IsNaN(b0.Skewness()) {
		t.Errorf("Skewness(p=0): expected NaN")
	}
}

#test
fn testBernoulliStdDev(t: &testing::T) {
	b := Bernoulli{P: 0.25}
	want := math::Sqrt(0.25 * 0.75)
	got := b.StdDev()
	if !jn::Tolerance(got, want, 1e-10) {
		t.Errorf("StdDev: got %v, want %v", got, want)
	}
}

let testsBernoulliSurvival: []commonDistCase = [
	{-1, 1.0},
	{0.0, 0.4},
	{0.5, 0.4},
	{1.0, 0.0},
]

#test
fn testBernoulliSurvival(t: &testing::T) {
	b := Bernoulli{P: 0.4}
	for _, test in testsBernoulliSurvival {
		got := b.Survival(test.x)
		if !jn::Tolerance(got, test.want, 1e-10) {
			t.Errorf("Survival({}): got {}, want {}", test.x, got, test.want)
		}
	}
}

#test
fn testBernoulliVariance(t: &testing::T) {
	b := Bernoulli{P: 0.3}
	want := 0.3 * 0.7
	got := b.Variance()
	if !jn::Tolerance(got, want, 1e-10) {
		t.Errorf("Variance: got {}, want {}", got, want)
	}
}